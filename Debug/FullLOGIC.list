
FullLOGIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08007ee0  08007ee0  00008ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800838c  0800838c  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008394  08008394  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008398  08008398  00009398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800839c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e4  2**0
                  CONTENTS
 10 .bss          00000350  200001e4  200001e4  0000a1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000534  20000534  0000a1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2fc  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239c  00000000  00000000  00018510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0001a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ba  00000000  00000000  0001b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021489  00000000  00000000  0001bf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ede4  00000000  00000000  0003d39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb195  00000000  00000000  0004c17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117314  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e4  00000000  00000000  00117358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0011b93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ec8 	.word	0x08007ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007ec8 	.word	0x08007ec8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <CAN_Filter_Config>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// CAN Messages filter
void CAN_Filter_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef sFilterConfig;

    // Configure filter for speed messages only
    sFilterConfig.FilterBank = 0;                           // Use filter bank 0
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;       // Use ID + Mask mode
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;      // 32-bit filter
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = (SPEED_CAN_ID << 5);       //
 8000ee6:	f44f 437d 	mov.w	r3, #64768	@ 0xfd00
 8000eea:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = (0x7FF << 5);          // Mask for exact ID match (standard 11-bit ID)
 8000ef0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ef4:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;      // Assign to FIFO0
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;                // Enable the filter
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]

    // Apply filter configuration
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <CAN_Filter_Config+0x4c>)
 8000f08:	f001 fde4 	bl	8002ad4 <HAL_CAN_ConfigFilter>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <CAN_Filter_Config+0x42>
    {
        Error_Handler();
 8000f12:	f000 fc47 	bl	80017a4 <Error_Handler>
    }
}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	@ 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200002a8 	.word	0x200002a8

08000f24 <RequestSpeed>:

// OBD-II PID Speed Request
void RequestSpeed(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0x02, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <RequestSpeed+0x48>)
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
	uint32_t TxMailbox;

	TxHeader.StdId = 0x7DF;
 8000f32:	f240 73df 	movw	r3, #2015	@ 0x7df
 8000f36:	613b      	str	r3, [r7, #16]
	TxHeader.ExtId = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = 8;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	f107 0110 	add.w	r1, r7, #16
 8000f52:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <RequestSpeed+0x4c>)
 8000f54:	f001 fee0 	bl	8002d18 <HAL_CAN_AddTxMessage>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <RequestSpeed+0x3e>
    {
        Error_Handler();
 8000f5e:	f000 fc21 	bl	80017a4 <Error_Handler>
    }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	000d0102 	.word	0x000d0102
 8000f70:	200002a8 	.word	0x200002a8

08000f74 <DAC_Write>:
    }
}

// Write 12-bit value to DAC via SPI
void DAC_Write(GPIO_TypeDef *cs_port, uint16_t cs_pin, uint16_t value)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
 8000f80:	4613      	mov	r3, r2
 8000f82:	803b      	strh	r3, [r7, #0]
    value &= 0x0FFF;    // ensure 12-bit value
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8a:	803b      	strh	r3, [r7, #0]
    uint16_t word = value | (0x0 << 12); // DAC121S101 expects data in lower 12 bits
 8000f8c:	883b      	ldrh	r3, [r7, #0]
 8000f8e:	81fb      	strh	r3, [r7, #14]

    uint8_t data[2];
    data[0] = (word >> 8) & 0xFF;
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	733b      	strb	r3, [r7, #12]
    data[1] = word & 0xFF;
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET); // CS LOW
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f002 fdca 	bl	8003b40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 8000fac:	f107 010c 	add.w	r1, r7, #12
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <DAC_Write+0x80>)
 8000fb8:	f003 fafb 	bl	80045b2 <HAL_SPI_Transmit>
    snprintf(uartBuffer, sizeof(uartBuffer),
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <DAC_Write+0x52>
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	e000      	b.n	8000fc8 <DAC_Write+0x54>
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	883b      	ldrh	r3, [r7, #0]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <DAC_Write+0x84>)
 8000fd0:	2164      	movs	r1, #100	@ 0x64
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <DAC_Write+0x88>)
 8000fd4:	f004 fe32 	bl	8005c3c <sniprintf>
             "DAC%d Write: Code=%u\r\n\n",
             (cs_pin == DAC1_CS_PIN) ? 1 : 2,
             value);
    UART_SendString(uartBuffer);
 8000fd8:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <DAC_Write+0x88>)
 8000fda:	f000 f979 	bl	80012d0 <UART_SendString>

    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f002 fdab 	bl	8003b40 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002d0 	.word	0x200002d0
 8000ff8:	08007f40 	.word	0x08007f40
 8000ffc:	20000378 	.word	0x20000378

08001000 <ReadPedalPercent>:

// Convert ADC value to normalized pedal percentage
float ReadPedalPercent(uint16_t adc_value, float voltage_min, float voltage_max){
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	b08d      	sub	sp, #52	@ 0x34
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	ed87 0a02 	vstr	s0, [r7, #8]
 800100c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001010:	81fb      	strh	r3, [r7, #14]

	float preproccsing_current_voltage_divided = ((float)adc_value / ADC_RESOLUTION)*ADC_REF_VOLTAGE;
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800101c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80010c8 <ReadPedalPercent+0xc8>
 8001020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001024:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80010cc <ReadPedalPercent+0xcc>
 8001028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800102c:	edc7 7a06 	vstr	s15, [r7, #24]
	float preproccsing_current_voltage = preproccsing_current_voltage_divided * VoltageRestoreFactor;
 8001030:	edd7 7a06 	vldr	s15, [r7, #24]
 8001034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001038:	edc7 7a05 	vstr	s15, [r7, #20]
	float preproccsing_percent_current_voltage = (preproccsing_current_voltage - voltage_min) / (voltage_max - voltage_min);
 800103c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001040:	edd7 7a02 	vldr	s15, [r7, #8]
 8001044:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001048:	ed97 7a01 	vldr	s14, [r7, #4]
 800104c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001050:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001058:	edc7 7a07 	vstr	s15, [r7, #28]

	snprintf(uartBuffer, sizeof(uartBuffer),
 800105c:	89fe      	ldrh	r6, [r7, #14]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff fa72 	bl	8000548 <__aeabi_f2d>
 8001064:	4604      	mov	r4, r0
 8001066:	460d      	mov	r5, r1
 8001068:	69f8      	ldr	r0, [r7, #28]
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001076:	e9cd 4500 	strd	r4, r5, [sp]
 800107a:	4633      	mov	r3, r6
 800107c:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <ReadPedalPercent+0xd0>)
 800107e:	2164      	movs	r1, #100	@ 0x64
 8001080:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <ReadPedalPercent+0xd4>)
 8001082:	f004 fddb 	bl	8005c3c <sniprintf>
	         "ADC=%u | Vin=%.2f V | Percent=%.2f%%\r\n\n",
	         adc_value,
	         preproccsing_current_voltage,
	         preproccsing_percent_current_voltage);
	UART_SendString(uartBuffer);
 8001086:	4813      	ldr	r0, [pc, #76]	@ (80010d4 <ReadPedalPercent+0xd4>)
 8001088:	f000 f922 	bl	80012d0 <UART_SendString>


    if (preproccsing_percent_current_voltage <preproccsing_percent_current_voltage_Min) preproccsing_percent_current_voltage = preproccsing_percent_current_voltage_Min;
 800108c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <ReadPedalPercent+0xa0>
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    if (preproccsing_percent_current_voltage > preproccsing_percent_current_voltage_Max) preproccsing_percent_current_voltage = preproccsing_percent_current_voltage_Max;
 80010a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	dd02      	ble.n	80010b8 <ReadPedalPercent+0xb8>
 80010b2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010b6:	61fb      	str	r3, [r7, #28]

    return preproccsing_percent_current_voltage;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	ee07 3a90 	vmov	s15, r3
}
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	3724      	adds	r7, #36	@ 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c8:	457ff000 	.word	0x457ff000
 80010cc:	40533333 	.word	0x40533333
 80010d0:	08007f58 	.word	0x08007f58
 80010d4:	20000378 	.word	0x20000378

080010d8 <PercentToDACValue>:


// Convert pedal percentage to DAC output code
uint16_t PercentToDACValue(float percent, float voltage_min, float voltage_max) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b08c      	sub	sp, #48	@ 0x30
 80010dc:	af06      	add	r7, sp, #24
 80010de:	ed87 0a03 	vstr	s0, [r7, #12]
 80010e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80010e6:	ed87 1a01 	vstr	s2, [r7, #4]

    float afterprocessing_voltage = voltage_min + (percent * (voltage_max - voltage_min)); //Percentage to voltage
 80010ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001106:	edc7 7a04 	vstr	s15, [r7, #16]
    uint16_t dac_value = (uint16_t)((afterprocessing_voltage / 4.88f) * ADC_RESOLUTION); //DAC expects digital value CHECK THIS - WRONG REF VOLTAGE - changed ref to 4.88v(supply)
 800110a:	ed97 7a04 	vldr	s14, [r7, #16]
 800110e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001180 <PercentToDACValue+0xa8>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001184 <PercentToDACValue+0xac>
 800111a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	82fb      	strh	r3, [r7, #22]

    snprintf(uartBuffer, sizeof(uartBuffer),
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff fa0d 	bl	8000548 <__aeabi_f2d>
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1
 8001132:	6938      	ldr	r0, [r7, #16]
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	8af9      	ldrh	r1, [r7, #22]
 800113e:	9104      	str	r1, [sp, #16]
 8001140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001144:	e9cd 4500 	strd	r4, r5, [sp]
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <PercentToDACValue+0xb0>)
 800114a:	2164      	movs	r1, #100	@ 0x64
 800114c:	480f      	ldr	r0, [pc, #60]	@ (800118c <PercentToDACValue+0xb4>)
 800114e:	f004 fd75 	bl	8005c3c <sniprintf>
             "Attenuated=%.2f%% | Vout=%.2f V | DAC Code=%u\r\n\n",
             percent,
             afterprocessing_voltage,
             dac_value);
    UART_SendString(uartBuffer);
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <PercentToDACValue+0xb4>)
 8001154:	f000 f8bc 	bl	80012d0 <UART_SendString>


    if (dac_value > ADC_RESOLUTION ) dac_value = ADC_RESOLUTION ;
 8001158:	8afb      	ldrh	r3, [r7, #22]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001162:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001184 <PercentToDACValue+0xac>
 8001166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	dd02      	ble.n	8001176 <PercentToDACValue+0x9e>
 8001170:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001174:	82fb      	strh	r3, [r7, #22]
    return dac_value;
 8001176:	8afb      	ldrh	r3, [r7, #22]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	409c28f6 	.word	0x409c28f6
 8001184:	457ff000 	.word	0x457ff000
 8001188:	08007f80 	.word	0x08007f80
 800118c:	20000378 	.word	0x20000378

08001190 <AttenuationFunction>:

// Apply pedal attenuation based on vehicle speed
void AttenuationFunction(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
	float scale_factor;
	float percent1, percent2, output_percent1, output_percent2;

	percent1 = ReadPedalPercent(adc_buf[0], PEDAL_CH1_VMIN, PEDAL_CH1_VMAX); //Converts the raw value from adc to percentage
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <AttenuationFunction+0x124>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4a46      	ldr	r2, [pc, #280]	@ (80012b8 <AttenuationFunction+0x128>)
 800119e:	edd2 7a00 	vldr	s15, [r2]
 80011a2:	4a46      	ldr	r2, [pc, #280]	@ (80012bc <AttenuationFunction+0x12c>)
 80011a4:	ed92 7a00 	vldr	s14, [r2]
 80011a8:	eef0 0a47 	vmov.f32	s1, s14
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff25 	bl	8001000 <ReadPedalPercent>
 80011b6:	ed87 0a04 	vstr	s0, [r7, #16]
	percent2 = ReadPedalPercent(adc_buf[1], PEDAL_CH2_VMIN, PEDAL_CH2_VMAX); //Converts the raw value from adc to percentage
 80011ba:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <AttenuationFunction+0x124>)
 80011bc:	885b      	ldrh	r3, [r3, #2]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4a3f      	ldr	r2, [pc, #252]	@ (80012c0 <AttenuationFunction+0x130>)
 80011c2:	edd2 7a00 	vldr	s15, [r2]
 80011c6:	4a3f      	ldr	r2, [pc, #252]	@ (80012c4 <AttenuationFunction+0x134>)
 80011c8:	ed92 7a00 	vldr	s14, [r2]
 80011cc:	eef0 0a47 	vmov.f32	s1, s14
 80011d0:	eeb0 0a67 	vmov.f32	s0, s15
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff13 	bl	8001000 <ReadPedalPercent>
 80011da:	ed87 0a03 	vstr	s0, [r7, #12]


    if(CarSpeed >= SPEED_THRESHOLD_KMH) {
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <AttenuationFunction+0x138>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	2b1d      	cmp	r3, #29
 80011e6:	d930      	bls.n	800124a <AttenuationFunction+0xba>

        float overspeed = CarSpeed - SPEED_THRESHOLD_KMH;
 80011e8:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <AttenuationFunction+0x138>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b1e      	subs	r3, #30
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f8:	edc7 7a02 	vstr	s15, [r7, #8]
        scale_factor = Scale_Factor_Max - (overspeed / (float)SPEED_FADE_RANGE_KMH);
 80011fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001200:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800120c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001210:	edc7 7a07 	vstr	s15, [r7, #28]
        if (scale_factor < Scale_Factor_Min) scale_factor = Scale_Factor_Min;
 8001214:	edd7 7a07 	vldr	s15, [r7, #28]
 8001218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	d502      	bpl.n	8001228 <AttenuationFunction+0x98>
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
        output_percent1 = percent1 * scale_factor;
 8001228:	ed97 7a04 	vldr	s14, [r7, #16]
 800122c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	edc7 7a06 	vstr	s15, [r7, #24]
        output_percent2 = percent2 * scale_factor;
 8001238:	ed97 7a03 	vldr	s14, [r7, #12]
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	edc7 7a05 	vstr	s15, [r7, #20]
 8001248:	e003      	b.n	8001252 <AttenuationFunction+0xc2>
    } else {

        output_percent1 = percent1;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	61bb      	str	r3, [r7, #24]
        output_percent2 = percent2;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	617b      	str	r3, [r7, #20]
    }

    uint16_t dac_value_1 = PercentToDACValue(output_percent1, PEDAL_CH1_VMIN, PEDAL_CH1_VMAX); //Converts percentage back to analog
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <AttenuationFunction+0x128>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <AttenuationFunction+0x12c>)
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	eeb0 1a47 	vmov.f32	s2, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	ed97 0a06 	vldr	s0, [r7, #24]
 800126a:	f7ff ff35 	bl	80010d8 <PercentToDACValue>
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
    uint16_t dac_value_2 = PercentToDACValue(output_percent2, PEDAL_CH2_VMIN, PEDAL_CH2_VMAX); //Converts percentage back to analog
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <AttenuationFunction+0x130>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <AttenuationFunction+0x134>)
 800127a:	ed93 7a00 	vldr	s14, [r3]
 800127e:	eeb0 1a47 	vmov.f32	s2, s14
 8001282:	eef0 0a67 	vmov.f32	s1, s15
 8001286:	ed97 0a05 	vldr	s0, [r7, #20]
 800128a:	f7ff ff25 	bl	80010d8 <PercentToDACValue>
 800128e:	4603      	mov	r3, r0
 8001290:	80bb      	strh	r3, [r7, #4]

    DAC_Write(DAC1_CS_PORT, DAC1_CS_PIN, dac_value_1);
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	461a      	mov	r2, r3
 8001296:	2101      	movs	r1, #1
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <AttenuationFunction+0x13c>)
 800129a:	f7ff fe6b 	bl	8000f74 <DAC_Write>
    DAC_Write(DAC2_CS_PORT, DAC2_CS_PIN, dac_value_2);
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	461a      	mov	r2, r3
 80012a2:	2102      	movs	r1, #2
 80012a4:	4809      	ldr	r0, [pc, #36]	@ (80012cc <AttenuationFunction+0x13c>)
 80012a6:	f7ff fe65 	bl	8000f74 <DAC_Write>

   /* snprintf(uartBuffer, sizeof(uartBuffer),
             " Scale: %.2f | P1 In:%.2f Out:%.2f | P2 In:%.2f Out:%.2f\r\n",
             scale_factor, percent1, output_percent1, percent2, output_percent2);
    UART_SendString(uartBuffer);*/
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200003dc 	.word	0x200003dc
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004
 80012c0:	20000008 	.word	0x20000008
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	20000370 	.word	0x20000370
 80012cc:	40020000 	.word	0x40020000

080012d0 <UART_SendString>:

void UART_SendString(char *str)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7fe ffc9 	bl	8000270 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <UART_SendString+0x28>)
 80012ea:	f003 fbd3 	bl	8004a94 <HAL_UART_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000328 	.word	0x20000328

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001300:	f000 fd1c 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001304:	f000 f866 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001308:	f000 f9e4 	bl	80016d4 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2101      	movs	r1, #1
 8001310:	4827      	ldr	r0, [pc, #156]	@ (80013b0 <main+0xb4>)
 8001312:	f002 fc15 	bl	8003b40 <HAL_GPIO_WritePin>
  MX_DMA_Init();
 8001316:	f000 f9bd 	bl	8001694 <MX_DMA_Init>
  MX_ADC1_Init();
 800131a:	f000 f8c5 	bl	80014a8 <MX_ADC1_Init>
  MX_CAN1_Init();
 800131e:	f000 f923 	bl	8001568 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001322:	f000 f957 	bl	80015d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001326:	f000 f98b 	bl	8001640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(MUX_EN_PORT, MUX_EN_PIN, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001330:	481f      	ldr	r0, [pc, #124]	@ (80013b0 <main+0xb4>)
 8001332:	f002 fc05 	bl	8003b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC1_CS_PORT, DAC1_CS_PIN, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2101      	movs	r1, #1
 800133a:	481e      	ldr	r0, [pc, #120]	@ (80013b4 <main+0xb8>)
 800133c:	f002 fc00 	bl	8003b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC2_CS_PORT, DAC2_CS_PIN, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2102      	movs	r1, #2
 8001344:	481b      	ldr	r0, [pc, #108]	@ (80013b4 <main+0xb8>)
 8001346:	f002 fbfb 	bl	8003b40 <HAL_GPIO_WritePin>
  UART_SendString("Befor ADC dual channel Config\r\n");
 800134a:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <main+0xbc>)
 800134c:	f7ff ffc0 	bl	80012d0 <UART_SendString>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2);
 8001350:	2202      	movs	r2, #2
 8001352:	491a      	ldr	r1, [pc, #104]	@ (80013bc <main+0xc0>)
 8001354:	481a      	ldr	r0, [pc, #104]	@ (80013c0 <main+0xc4>)
 8001356:	f000 fedb 	bl	8002110 <HAL_ADC_Start_DMA>
  UART_SendString("After ADC dual channel Config\r\n");
 800135a:	481a      	ldr	r0, [pc, #104]	@ (80013c4 <main+0xc8>)
 800135c:	f7ff ffb8 	bl	80012d0 <UART_SendString>

  CAN_Filter_Config();
 8001360:	f7ff fdb8 	bl	8000ed4 <CAN_Filter_Config>

  if (HAL_CAN_Start(&hcan1) != HAL_OK) //Starts CAN peripheral
 8001364:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <main+0xcc>)
 8001366:	f001 fc93 	bl	8002c90 <HAL_CAN_Start>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <main+0x78>
  {
      Error_Handler();
 8001370:	f000 fa18 	bl	80017a4 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) //Enable interrupts
 8001374:	2102      	movs	r1, #2
 8001376:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <main+0xcc>)
 8001378:	f001 fd9e 	bl	8002eb8 <HAL_CAN_ActivateNotification>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <main+0x8a>
  {
      Error_Handler();
 8001382:	f000 fa0f 	bl	80017a4 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		RequestSpeed();
 8001386:	f7ff fdcd 	bl	8000f24 <RequestSpeed>
		HAL_Delay(100); //Sending too fast causes STM CAN to fault out.
 800138a:	2064      	movs	r0, #100	@ 0x64
 800138c:	f000 fd48 	bl	8001e20 <HAL_Delay>
		// Check if CAN messages stopped coming
		if (HAL_GetTick() - lastCanMsgTick > 500)  // 500ms timeout
 8001390:	f000 fd3a 	bl	8001e08 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <main+0xd0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013a0:	d902      	bls.n	80013a8 <main+0xac>
		{
		    CarSpeed = 0;   // fallback to 0 km/h
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <main+0xd4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	801a      	strh	r2, [r3, #0]
		}

		AttenuationFunction();
 80013a8:	f7ff fef2 	bl	8001190 <AttenuationFunction>
		RequestSpeed();
 80013ac:	e7eb      	b.n	8001386 <main+0x8a>
 80013ae:	bf00      	nop
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	08007fb4 	.word	0x08007fb4
 80013bc:	200003dc 	.word	0x200003dc
 80013c0:	20000200 	.word	0x20000200
 80013c4:	08007fd4 	.word	0x08007fd4
 80013c8:	200002a8 	.word	0x200002a8
 80013cc:	20000374 	.word	0x20000374
 80013d0:	20000370 	.word	0x20000370

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	@ 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fca3 	bl	8005d2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <SystemClock_Config+0xd0>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <SystemClock_Config+0xd0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001444:	2308      	movs	r3, #8
 8001446:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001448:	23a8      	movs	r3, #168	@ 0xa8
 800144a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fb8b 	bl	8003b74 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001464:	f000 f99e 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001474:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2105      	movs	r1, #5
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fdec 	bl	8004064 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001492:	f000 f987 	bl	80017a4 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	@ 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ba:	4b28      	ldr	r3, [pc, #160]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014bc:	4a28      	ldr	r2, [pc, #160]	@ (8001560 <MX_ADC1_Init+0xb8>)
 80014be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c8:	4b24      	ldr	r3, [pc, #144]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014d4:	4b21      	ldr	r3, [pc, #132]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <MX_ADC1_Init+0xbc>)
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_ADC1_Init+0xb4>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001502:	4b16      	ldr	r3, [pc, #88]	@ (800155c <MX_ADC1_Init+0xb4>)
 8001504:	2201      	movs	r2, #1
 8001506:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001508:	4814      	ldr	r0, [pc, #80]	@ (800155c <MX_ADC1_Init+0xb4>)
 800150a:	f000 fcad 	bl	8001e68 <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001514:	f000 f946 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001518:	2302      	movs	r3, #2
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001520:	2304      	movs	r3, #4
 8001522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <MX_ADC1_Init+0xb4>)
 800152a:	f000 ff2d 	bl	8002388 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001534:	f000 f936 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001538:	2303      	movs	r3, #3
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_ADC1_Init+0xb4>)
 8001546:	f000 ff1f 	bl	8002388 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001550:	f000 f928 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000200 	.word	0x20000200
 8001560:	40012000 	.word	0x40012000
 8001564:	0f000001 	.word	0x0f000001

08001568 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800156c:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <MX_CAN1_Init+0x64>)
 800156e:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <MX_CAN1_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_CAN1_Init+0x64>)
 8001574:	2204      	movs	r2, #4
 8001576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_CAN1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_CAN1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_CAN1_Init+0x64>)
 8001586:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 800158a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_CAN1_Init+0x64>)
 800158e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8001592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <MX_CAN1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_CAN1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_CAN1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_CAN1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_CAN1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_CAN1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_CAN1_Init+0x64>)
 80015ba:	f001 f98f 	bl	80028dc <HAL_CAN_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80015c4:	f000 f8ee 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002a8 	.word	0x200002a8
 80015d0:	40006400 	.word	0x40006400

080015d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <MX_SPI1_Init+0x64>)
 80015da:	4a18      	ldr	r2, [pc, #96]	@ (800163c <MX_SPI1_Init+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <MX_SPI1_Init+0x64>)
 80015e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015e6:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_SPI1_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_SPI1_Init+0x64>)
 8001600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001604:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_SPI1_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_SPI1_Init+0x64>)
 8001620:	220a      	movs	r2, #10
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	@ (8001638 <MX_SPI1_Init+0x64>)
 8001626:	f002 ff3b 	bl	80044a0 <HAL_SPI_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001630:	f000 f8b8 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002d0 	.word	0x200002d0
 800163c:	40013000 	.word	0x40013000

08001640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <MX_USART1_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_USART1_UART_Init+0x4c>)
 8001678:	f003 f9bc 	bl	80049f4 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f000 f88f 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000328 	.word	0x20000328
 8001690:	40011000 	.word	0x40011000

08001694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_DMA_Init+0x3c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <MX_DMA_Init+0x3c>)
 80016a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_DMA_Init+0x3c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2038      	movs	r0, #56	@ 0x38
 80016bc:	f001 fcfd 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016c0:	2038      	movs	r0, #56	@ 0x38
 80016c2:	f001 fd16 	bl	80030f2 <HAL_NVIC_EnableIRQ>

}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <MX_GPIO_Init+0xc4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <MX_GPIO_Init+0xc4>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <MX_GPIO_Init+0xc4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <MX_GPIO_Init+0xc4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <MX_GPIO_Init+0xc4>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <MX_GPIO_Init+0xc4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_GPIO_Init+0xc4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a1b      	ldr	r2, [pc, #108]	@ (8001798 <MX_GPIO_Init+0xc4>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_GPIO_Init+0xc4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_9, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f240 2101 	movw	r1, #513	@ 0x201
 8001744:	4815      	ldr	r0, [pc, #84]	@ (800179c <MX_GPIO_Init+0xc8>)
 8001746:	f002 f9fb 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2103      	movs	r1, #3
 800174e:	4814      	ldr	r0, [pc, #80]	@ (80017a0 <MX_GPIO_Init+0xcc>)
 8001750:	f002 f9f6 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8001754:	f240 2301 	movw	r3, #513	@ 0x201
 8001758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	480b      	ldr	r0, [pc, #44]	@ (800179c <MX_GPIO_Init+0xc8>)
 800176e:	f002 f84b 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001772:	2303      	movs	r3, #3
 8001774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_GPIO_Init+0xcc>)
 800178a:	f002 f83d 	bl	8003808 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <Error_Handler+0x8>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <HAL_MspInit+0x4c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_MspInit+0x4c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a33      	ldr	r2, [pc, #204]	@ (80018ec <HAL_ADC_MspInit+0xec>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d160      	bne.n	80018e4 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_ADC_MspInit+0xf0>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a31      	ldr	r2, [pc, #196]	@ (80018f0 <HAL_ADC_MspInit+0xf0>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_ADC_MspInit+0xf0>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <HAL_ADC_MspInit+0xf0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a2a      	ldr	r2, [pc, #168]	@ (80018f0 <HAL_ADC_MspInit+0xf0>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <HAL_ADC_MspInit+0xf0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185e:	2303      	movs	r3, #3
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4821      	ldr	r0, [pc, #132]	@ (80018f4 <HAL_ADC_MspInit+0xf4>)
 800186e:	f001 ffcb 	bl	8003808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 8001874:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <HAL_ADC_MspInit+0xfc>)
 8001876:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 800188c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001890:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 8001894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001898:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 800189c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b8:	480f      	ldr	r0, [pc, #60]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018ba:	f001 fc35 	bl	8003128 <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80018c4:	f7ff ff6e 	bl	80017a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <HAL_ADC_MspInit+0xf8>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2012      	movs	r0, #18
 80018da:	f001 fbee 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018de:	2012      	movs	r0, #18
 80018e0:	f001 fc07 	bl	80030f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	@ 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012000 	.word	0x40012000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	20000248 	.word	0x20000248
 80018fc:	40026410 	.word	0x40026410

08001900 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a19      	ldr	r2, [pc, #100]	@ (8001984 <HAL_CAN_MspInit+0x84>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12c      	bne.n	800197c <HAL_CAN_MspInit+0x7c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <HAL_CAN_MspInit+0x88>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	4a17      	ldr	r2, [pc, #92]	@ (8001988 <HAL_CAN_MspInit+0x88>)
 800192c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001930:	6413      	str	r3, [r2, #64]	@ 0x40
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_CAN_MspInit+0x88>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_CAN_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a10      	ldr	r2, [pc, #64]	@ (8001988 <HAL_CAN_MspInit+0x88>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_CAN_MspInit+0x88>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800195a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800196c:	2309      	movs	r3, #9
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <HAL_CAN_MspInit+0x8c>)
 8001978:	f001 ff46 	bl	8003808 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	@ 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40006400 	.word	0x40006400
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000

08001990 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_SPI_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12b      	bne.n	8001a0a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_SPI_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <HAL_SPI_MspInit+0x88>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_SPI_MspInit+0x88>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <HAL_SPI_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a10      	ldr	r2, [pc, #64]	@ (8001a18 <HAL_SPI_MspInit+0x88>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_SPI_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019ea:	23a0      	movs	r3, #160	@ 0xa0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <HAL_SPI_MspInit+0x8c>)
 8001a06:	f001 feff 	bl	8003808 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	@ (8001aa4 <HAL_UART_MspInit+0x84>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12c      	bne.n	8001a9c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a7a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <HAL_UART_MspInit+0x8c>)
 8001a98:	f001 feb6 	bl	8003808 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	@ 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b06:	f000 f96b 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <ADC_IRQHandler+0x10>)
 8001b16:	f000 f9ea 	bl	8001eee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000200 	.word	0x20000200

08001b24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <DMA2_Stream0_IRQHandler+0x10>)
 8001b2a:	f001 fc03 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000248 	.word	0x20000248

08001b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_kill>:

int _kill(int pid, int sig)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b52:	f004 f93f 	bl	8005dd4 <__errno>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2216      	movs	r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_exit>:

void _exit (int status)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe7 	bl	8001b48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b7a:	bf00      	nop
 8001b7c:	e7fd      	b.n	8001b7a <_exit+0x12>

08001b7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e00a      	b.n	8001ba6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b90:	f3af 8000 	nop.w
 8001b94:	4601      	mov	r1, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	60ba      	str	r2, [r7, #8]
 8001b9c:	b2ca      	uxtb	r2, r1
 8001b9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbf0      	blt.n	8001b90 <_read+0x12>
  }

  return len;
 8001bae:	687b      	ldr	r3, [r7, #4]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e009      	b.n	8001bde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	60ba      	str	r2, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbf1      	blt.n	8001bca <_write+0x12>
  }
  return len;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_close>:

int _close(int file)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c18:	605a      	str	r2, [r3, #4]
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_isatty>:

int _isatty(int file)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	@ (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f004 f8a4 	bl	8005dd4 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20020000 	.word	0x20020000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	200003e0 	.word	0x200003e0
 8001cc0:	20000538 	.word	0x20000538

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cec:	f7ff ffea 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	@ (8001d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f004 f863 	bl	8005de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1a:	f7ff faef 	bl	80012fc <main>
  bx  lr    
 8001d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001d2c:	0800839c 	.word	0x0800839c
  ldr r2, =_sbss
 8001d30:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001d34:	20000534 	.word	0x20000534

08001d38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <CAN1_RX0_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <HAL_Init+0x40>)
 8001d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <HAL_Init+0x40>)
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <HAL_Init+0x40>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f001 f99d 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fd1e 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 f9b5 	bl	800310e <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f001 f97d 	bl	80030ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000010 	.word	0x20000010
 8001dd8:	20000018 	.word	0x20000018
 8001ddc:	20000014 	.word	0x20000014

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000018 	.word	0x20000018
 8001e04:	200003e4 	.word	0x200003e4

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200003e4 	.word	0x200003e4

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff ffee 	bl	8001e08 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000018 	.word	0x20000018

08001e68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e033      	b.n	8001ee6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fcba 	bl	8001800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eae:	f023 0302 	bic.w	r3, r3, #2
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fb86 	bl	80025cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ed6:	e001      	b.n	8001edc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d049      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0xca>
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d046      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d12b      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d127      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d119      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0220 	bic.w	r2, r2, #32
 8001f82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f9c5 	bl	8002338 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0212 	mvn.w	r2, #18
 8001fb6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d057      	beq.n	800207e <HAL_ADC_IRQHandler+0x190>
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d054      	beq.n	800207e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d139      	bne.n	800206e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002000:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12b      	bne.n	800206e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002020:	2b00      	cmp	r3, #0
 8002022:	d124      	bne.n	800206e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11d      	bne.n	800206e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002048:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fc2a 	bl	80028c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 020c 	mvn.w	r2, #12
 800207c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d017      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x1d6>
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d014      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10d      	bne.n	80020c4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f953 	bl	8002360 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0201 	mvn.w	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020d2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_ADC_IRQHandler+0x218>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	f043 0202 	orr.w	r2, r3, #2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0220 	mvn.w	r2, #32
 80020f4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f93c 	bl	8002374 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0220 	mvn.w	r2, #32
 8002104:	601a      	str	r2, [r3, #0]
  }
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Start_DMA+0x22>
 800212e:	2302      	movs	r3, #2
 8002130:	e0eb      	b.n	800230a <HAL_ADC_Start_DMA+0x1fa>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d018      	beq.n	800217a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002158:	4b6e      	ldr	r3, [pc, #440]	@ (8002314 <HAL_ADC_Start_DMA+0x204>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6e      	ldr	r2, [pc, #440]	@ (8002318 <HAL_ADC_Start_DMA+0x208>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9a      	lsrs	r2, r3, #18
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800216c:	e002      	b.n	8002174 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3b01      	subs	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002188:	d107      	bne.n	800219a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002198:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 80a3 	bne.w	80022f0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e8:	d106      	bne.n	80021f8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f023 0206 	bic.w	r2, r3, #6
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80021f6:	e002      	b.n	80021fe <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002206:	4b45      	ldr	r3, [pc, #276]	@ (800231c <HAL_ADC_Start_DMA+0x20c>)
 8002208:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220e:	4a44      	ldr	r2, [pc, #272]	@ (8002320 <HAL_ADC_Start_DMA+0x210>)
 8002210:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002216:	4a43      	ldr	r2, [pc, #268]	@ (8002324 <HAL_ADC_Start_DMA+0x214>)
 8002218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221e:	4a42      	ldr	r2, [pc, #264]	@ (8002328 <HAL_ADC_Start_DMA+0x218>)
 8002220:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800222a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800223a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800224a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	334c      	adds	r3, #76	@ 0x4c
 8002256:	4619      	mov	r1, r3
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f001 f812 	bl	8003284 <HAL_DMA_Start_IT>
 8002260:	4603      	mov	r3, r0
 8002262:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	2b00      	cmp	r3, #0
 800226e:	d12a      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2d      	ldr	r2, [pc, #180]	@ (800232c <HAL_ADC_Start_DMA+0x21c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d015      	beq.n	80022a6 <HAL_ADC_Start_DMA+0x196>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2c      	ldr	r2, [pc, #176]	@ (8002330 <HAL_ADC_Start_DMA+0x220>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d105      	bne.n	8002290 <HAL_ADC_Start_DMA+0x180>
 8002284:	4b25      	ldr	r3, [pc, #148]	@ (800231c <HAL_ADC_Start_DMA+0x20c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <HAL_ADC_Start_DMA+0x224>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d136      	bne.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_ADC_Start_DMA+0x20c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d130      	bne.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d129      	bne.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e020      	b.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a18      	ldr	r2, [pc, #96]	@ (800232c <HAL_ADC_Start_DMA+0x21c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d11b      	bne.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d114      	bne.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	e00b      	b.n	8002308 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f043 0210 	orr.w	r2, r3, #16
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002308:	7ffb      	ldrb	r3, [r7, #31]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000010 	.word	0x20000010
 8002318:	431bde83 	.word	0x431bde83
 800231c:	40012300 	.word	0x40012300
 8002320:	080027c5 	.word	0x080027c5
 8002324:	0800287f 	.word	0x0800287f
 8002328:	0800289b 	.word	0x0800289b
 800232c:	40012000 	.word	0x40012000
 8002330:	40012100 	.word	0x40012100
 8002334:	40012200 	.word	0x40012200

08002338 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1c>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e105      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x228>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	d925      	bls.n	8002400 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68d9      	ldr	r1, [r3, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1e      	subs	r3, #30
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	4603      	mov	r3, r0
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4403      	add	r3, r0
 80023f2:	3b1e      	subs	r3, #30
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e022      	b.n	8002446 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	2207      	movs	r2, #7
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	4603      	mov	r3, r0
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4403      	add	r3, r0
 800243c:	409a      	lsls	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d824      	bhi.n	8002498 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b05      	subs	r3, #5
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b05      	subs	r3, #5
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34
 8002496:	e04c      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d824      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b23      	subs	r3, #35	@ 0x23
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b23      	subs	r3, #35	@ 0x23
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e8:	e023      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b41      	subs	r3, #65	@ 0x41
 80024fc:	221f      	movs	r2, #31
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b41      	subs	r3, #65	@ 0x41
 8002526:	fa00 f203 	lsl.w	r2, r0, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002532:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <HAL_ADC_ConfigChannel+0x234>)
 8002534:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <HAL_ADC_ConfigChannel+0x238>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d109      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1cc>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_ADC_ConfigChannel+0x238>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d123      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x21e>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d003      	beq.n	800256e <HAL_ADC_ConfigChannel+0x1e6>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b11      	cmp	r3, #17
 800256c:	d11b      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_ADC_ConfigChannel+0x23c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a10      	ldr	r2, [pc, #64]	@ (80025c8 <HAL_ADC_ConfigChannel+0x240>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9a      	lsrs	r2, r3, #18
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40012300 	.word	0x40012300
 80025c0:	40012000 	.word	0x40012000
 80025c4:	20000010 	.word	0x20000010
 80025c8:	431bde83 	.word	0x431bde83

080025cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d4:	4b79      	ldr	r3, [pc, #484]	@ (80027bc <ADC_Init+0x1f0>)
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	021a      	lsls	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	4a58      	ldr	r2, [pc, #352]	@ (80027c0 <ADC_Init+0x1f4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002672:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	e00f      	b.n	80026ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0202 	bic.w	r2, r2, #2
 80026d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e1b      	ldrb	r3, [r3, #24]
 80026e4:	005a      	lsls	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002706:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002716:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	3b01      	subs	r3, #1
 8002724:	035a      	lsls	r2, r3, #13
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	e007      	b.n	8002740 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800273e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800274e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	3b01      	subs	r3, #1
 800275c:	051a      	lsls	r2, r3, #20
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002782:	025a      	lsls	r2, r3, #9
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	029a      	lsls	r2, r3, #10
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40012300 	.word	0x40012300
 80027c0:	0f000001 	.word	0x0f000001

080027c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d13c      	bne.n	8002858 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d12b      	bne.n	8002850 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d127      	bne.n	8002850 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002818:	2b00      	cmp	r3, #0
 800281a:	d119      	bne.n	8002850 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0220 	bic.w	r2, r2, #32
 800282a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff fd71 	bl	8002338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002856:	e00e      	b.n	8002876 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff fd85 	bl	8002374 <HAL_ADC_ErrorCallback>
}
 800286a:	e004      	b.n	8002876 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fd5d 	bl	800234c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2240      	movs	r2, #64	@ 0x40
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff fd5a 	bl	8002374 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0ed      	b.n	8002aca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff f800 	bl	8001900 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002910:	f7ff fa7a 	bl	8001e08 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002916:	e012      	b.n	800293e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002918:	f7ff fa76 	bl	8001e08 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b0a      	cmp	r3, #10
 8002924:	d90b      	bls.n	800293e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2205      	movs	r2, #5
 8002936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0c5      	b.n	8002aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0e5      	beq.n	8002918 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0202 	bic.w	r2, r2, #2
 800295a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295c:	f7ff fa54 	bl	8001e08 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002962:	e012      	b.n	800298a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002964:	f7ff fa50 	bl	8001e08 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b0a      	cmp	r3, #10
 8002970:	d90b      	bls.n	800298a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2205      	movs	r2, #5
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e09f      	b.n	8002aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e5      	bne.n	8002964 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e007      	b.n	80029c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7e5b      	ldrb	r3, [r3, #25]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e9b      	ldrb	r3, [r3, #26]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e007      	b.n	8002a16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0220 	bic.w	r2, r2, #32
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7edb      	ldrb	r3, [r3, #27]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0210 	bic.w	r2, r2, #16
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e007      	b.n	8002a40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0210 	orr.w	r2, r2, #16
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7f1b      	ldrb	r3, [r3, #28]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0208 	orr.w	r2, r2, #8
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e007      	b.n	8002a6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0208 	bic.w	r2, r2, #8
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7f5b      	ldrb	r3, [r3, #29]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0204 	orr.w	r2, r2, #4
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e007      	b.n	8002a94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	ea42 0103 	orr.w	r1, r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d003      	beq.n	8002af4 <HAL_CAN_ConfigFilter+0x20>
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	f040 80be 	bne.w	8002c70 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002af4:	4b65      	ldr	r3, [pc, #404]	@ (8002c8c <HAL_CAN_ConfigFilter+0x1b8>)
 8002af6:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b0e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	431a      	orrs	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2201      	movs	r2, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d123      	bne.n	8002b9e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	401a      	ands	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	3248      	adds	r2, #72	@ 0x48
 8002b7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b94:	6939      	ldr	r1, [r7, #16]
 8002b96:	3348      	adds	r3, #72	@ 0x48
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d122      	bne.n	8002bec <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bc6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	3248      	adds	r2, #72	@ 0x48
 8002bcc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002be0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002be2:	6939      	ldr	r1, [r7, #16]
 8002be4:	3348      	adds	r3, #72	@ 0x48
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002c06:	e007      	b.n	8002c18 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002c32:	e007      	b.n	8002c44 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c62:	f023 0201 	bic.w	r2, r3, #1
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e006      	b.n	8002c7e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40006400 	.word	0x40006400

08002c90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d12e      	bne.n	8002d02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7ff f8a4 	bl	8001e08 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cc2:	e012      	b.n	8002cea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cc4:	f7ff f8a0 	bl	8001e08 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b0a      	cmp	r3, #10
 8002cd0:	d90b      	bls.n	8002cea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e012      	b.n	8002d10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e5      	bne.n	8002cc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e006      	b.n	8002d10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d003      	beq.n	8002d44 <HAL_CAN_AddTxMessage+0x2c>
 8002d3c:	7ffb      	ldrb	r3, [r7, #31]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	f040 80ad 	bne.w	8002e9e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8095 	beq.w	8002e8e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	0e1b      	lsrs	r3, r3, #24
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d6e:	2201      	movs	r2, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	6809      	ldr	r1, [r1, #0]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3318      	adds	r3, #24
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	440b      	add	r3, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e00f      	b.n	8002dbc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002db0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3318      	adds	r3, #24
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	440b      	add	r3, r1
 8002dba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3318      	adds	r3, #24
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	440b      	add	r3, r1
 8002dcc:	3304      	adds	r3, #4
 8002dce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	7d1b      	ldrb	r3, [r3, #20]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d111      	bne.n	8002dfc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3318      	adds	r3, #24
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	4413      	add	r3, r2
 8002de4:	3304      	adds	r3, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6811      	ldr	r1, [r2, #0]
 8002dec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3318      	adds	r3, #24
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	440b      	add	r3, r1
 8002df8:	3304      	adds	r3, #4
 8002dfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3307      	adds	r3, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	061a      	lsls	r2, r3, #24
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3306      	adds	r3, #6
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3305      	adds	r3, #5
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	4313      	orrs	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	3204      	adds	r2, #4
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	4610      	mov	r0, r2
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	6811      	ldr	r1, [r2, #0]
 8002e24:	ea43 0200 	orr.w	r2, r3, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002e32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3303      	adds	r3, #3
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	061a      	lsls	r2, r3, #24
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	4610      	mov	r0, r2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	ea43 0200 	orr.w	r2, r3, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	440b      	add	r3, r1
 8002e64:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002e68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3318      	adds	r3, #24
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	6811      	ldr	r1, [r2, #0]
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3318      	adds	r3, #24
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	440b      	add	r3, r1
 8002e88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e00e      	b.n	8002eac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e006      	b.n	8002eac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3724      	adds	r7, #36	@ 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <HAL_CAN_ActivateNotification+0x1e>
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d109      	bne.n	8002eea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6959      	ldr	r1, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e006      	b.n	8002ef8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	@ (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	@ (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	@ (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff3e 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff8e 	bl	8002ff8 <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5d 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff31 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa2 	bl	8003060 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7fe fe68 	bl	8001e08 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e099      	b.n	8003278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003164:	e00f      	b.n	8003186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003166:	f7fe fe4f 	bl	8001e08 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b05      	cmp	r3, #5
 8003172:	d908      	bls.n	8003186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e078      	b.n	8003278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e8      	bne.n	8003166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <HAL_DMA_Init+0x158>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d107      	bne.n	80031f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	4313      	orrs	r3, r2
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	2b04      	cmp	r3, #4
 8003218:	d117      	bne.n	800324a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa6f 	bl	8003710 <DMA_CheckFifoParam>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2240      	movs	r2, #64	@ 0x40
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003246:	2301      	movs	r3, #1
 8003248:	e016      	b.n	8003278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa26 	bl	80036a4 <DMA_CalcBaseAndBitshift>
 8003258:	4603      	mov	r3, r0
 800325a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	223f      	movs	r2, #63	@ 0x3f
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	f010803f 	.word	0xf010803f

08003284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_DMA_Start_IT+0x26>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e040      	b.n	800332c <HAL_DMA_Start_IT+0xa8>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d12f      	bne.n	800331e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f9b8 	bl	8003648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	223f      	movs	r2, #63	@ 0x3f
 80032de:	409a      	lsls	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0216 	orr.w	r2, r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e005      	b.n	800332a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003340:	4b8e      	ldr	r3, [pc, #568]	@ (800357c <HAL_DMA_IRQHandler+0x248>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8e      	ldr	r2, [pc, #568]	@ (8003580 <HAL_DMA_IRQHandler+0x24c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	2208      	movs	r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d043      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	2210      	movs	r2, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e01f      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e016      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0208 	bic.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	2220      	movs	r2, #32
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808f 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8087 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	2220      	movs	r2, #32
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d136      	bne.n	800354c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_IRQHandler+0x1da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	223f      	movs	r2, #63	@ 0x3f
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07e      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
        }
        return;
 800354a:	e079      	b.n	8003640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e02c      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
 800357a:	bf00      	nop
 800357c:	20000010 	.word	0x20000010
 8003580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e01e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0210 	bic.w	r2, r2, #16
 80035b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d032      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d307      	bcc.n	800361c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_DMA_IRQHandler+0x2cc>
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800361c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003640:	bf00      	nop
    }
  }
}
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d108      	bne.n	8003688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003686:	e007      	b.n	8003698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b10      	subs	r3, #16
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <DMA_CalcBaseAndBitshift+0x64>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036be:	4a13      	ldr	r2, [pc, #76]	@ (800370c <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d909      	bls.n	80036e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80036e4:	e007      	b.n	80036f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	0800800c 	.word	0x0800800c

08003710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d856      	bhi.n	80037de <DMA_CheckFifoParam+0xce>
 8003730:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <DMA_CheckFifoParam+0x28>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	0800375b 	.word	0x0800375b
 8003740:	08003749 	.word	0x08003749
 8003744:	080037df 	.word	0x080037df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d046      	beq.n	80037e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e043      	b.n	80037e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003762:	d140      	bne.n	80037e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e03d      	b.n	80037e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003772:	d121      	bne.n	80037b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d837      	bhi.n	80037ea <DMA_CheckFifoParam+0xda>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <DMA_CheckFifoParam+0x70>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	08003797 	.word	0x08003797
 8003788:	08003791 	.word	0x08003791
 800378c:	080037a9 	.word	0x080037a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e030      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d025      	beq.n	80037ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e022      	b.n	80037ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b0:	d11f      	bne.n	80037f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b6:	e01c      	b.n	80037f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d903      	bls.n	80037c6 <DMA_CheckFifoParam+0xb6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c4:	e018      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ca:	e015      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e00b      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037de:	bf00      	nop
 80037e0:	e00a      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e008      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e006      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e004      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
    }
  } 
  
  return status; 
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e16b      	b.n	8003afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 815a 	bne.w	8003af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80b4 	beq.w	8003af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b60      	ldr	r3, [pc, #384]	@ (8003b14 <HAL_GPIO_Init+0x30c>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	4a5f      	ldr	r2, [pc, #380]	@ (8003b14 <HAL_GPIO_Init+0x30c>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800399c:	6453      	str	r3, [r2, #68]	@ 0x44
 800399e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b14 <HAL_GPIO_Init+0x30c>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003b18 <HAL_GPIO_Init+0x310>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_GPIO_Init+0x314>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <HAL_GPIO_Init+0x226>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a51      	ldr	r2, [pc, #324]	@ (8003b20 <HAL_GPIO_Init+0x318>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d025      	beq.n	8003a2a <HAL_GPIO_Init+0x222>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a50      	ldr	r2, [pc, #320]	@ (8003b24 <HAL_GPIO_Init+0x31c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <HAL_GPIO_Init+0x21e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003b28 <HAL_GPIO_Init+0x320>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x21a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4e      	ldr	r2, [pc, #312]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x216>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b30 <HAL_GPIO_Init+0x328>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x212>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4c      	ldr	r2, [pc, #304]	@ (8003b34 <HAL_GPIO_Init+0x32c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x20e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4b      	ldr	r2, [pc, #300]	@ (8003b38 <HAL_GPIO_Init+0x330>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x20a>
 8003a0e:	2307      	movs	r3, #7
 8003a10:	e00e      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a12:	2308      	movs	r3, #8
 8003a14:	e00c      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a16:	2306      	movs	r3, #6
 8003a18:	e00a      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	@ (8003b18 <HAL_GPIO_Init+0x310>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b30      	ldr	r3, [pc, #192]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a27      	ldr	r2, [pc, #156]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b26      	ldr	r3, [pc, #152]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a12      	ldr	r2, [pc, #72]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f ae90 	bls.w	8003824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	@ 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40021400 	.word	0x40021400
 8003b34:	40021800 	.word	0x40021800
 8003b38:	40021c00 	.word	0x40021c00
 8003b3c:	40013c00 	.word	0x40013c00

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b5c:	e003      	b.n	8003b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	041a      	lsls	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	619a      	str	r2, [r3, #24]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e267      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b92:	4b88      	ldr	r3, [pc, #544]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4b85      	ldr	r3, [pc, #532]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b82      	ldr	r3, [pc, #520]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e242      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x74>
 8003bda:	4b76      	ldr	r3, [pc, #472]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a75      	ldr	r2, [pc, #468]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6f      	ldr	r2, [pc, #444]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6c      	ldr	r2, [pc, #432]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	4b69      	ldr	r3, [pc, #420]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b66      	ldr	r3, [pc, #408]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f8ec 	bl	8001e08 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fe f8e8 	bl	8001e08 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	@ 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e207      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b5b      	ldr	r3, [pc, #364]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fe f8d8 	bl	8001e08 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe f8d4 	bl	8001e08 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1f3      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b51      	ldr	r3, [pc, #324]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b47      	ldr	r3, [pc, #284]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b44      	ldr	r3, [pc, #272]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1c7      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4937      	ldr	r1, [pc, #220]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b34      	ldr	r3, [pc, #208]	@ (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe f88d 	bl	8001e08 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fe f889 	bl	8001e08 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1a8      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b28      	ldr	r3, [pc, #160]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4925      	ldr	r1, [pc, #148]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe f86c 	bl	8001e08 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fe f868 	bl	8001e08 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e187      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d036      	beq.n	8003dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fe f84c 	bl	8001e08 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fe f848 	bl	8001e08 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e167      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x200>
 8003d92:	e01b      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe f835 	bl	8001e08 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fe f831 	bl	8001e08 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d907      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e150      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470000 	.word	0x42470000
 8003dbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	4b88      	ldr	r3, [pc, #544]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ea      	bne.n	8003da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dde:	4b81      	ldr	r3, [pc, #516]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b77      	ldr	r3, [pc, #476]	@ (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b74      	ldr	r3, [pc, #464]	@ (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a73      	ldr	r2, [pc, #460]	@ (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fd fff1 	bl	8001e08 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fd ffed 	bl	8001e08 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e10c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2ea>
 8003e50:	4b64      	ldr	r3, [pc, #400]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	4a63      	ldr	r2, [pc, #396]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x30c>
 8003e66:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e80:	4b58      	ldr	r3, [pc, #352]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	4a57      	ldr	r2, [pc, #348]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8c:	4b55      	ldr	r3, [pc, #340]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e90:	4a54      	ldr	r2, [pc, #336]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd ffb2 	bl	8001e08 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd ffae 	bl	8001e08 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0cb      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x334>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ecc:	f7fd ff9c 	bl	8001e08 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fd ff98 	bl	8001e08 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0b5      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b39      	ldr	r3, [pc, #228]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	4a38      	ldr	r2, [pc, #224]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a1 	beq.w	8004054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f12:	4b34      	ldr	r3, [pc, #208]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d05c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d141      	bne.n	8003faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ff6c 	bl	8001e08 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd ff68 	bl	8001e08 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e087      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b27      	ldr	r3, [pc, #156]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	491b      	ldr	r1, [pc, #108]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7fd ff41 	bl	8001e08 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fd ff3d 	bl	8001e08 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e05c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9c:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x416>
 8003fa8:	e054      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fd ff2a 	bl	8001e08 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd ff26 	bl	8001e08 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e045      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x444>
 8003fd6:	e03d      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e038      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	@ (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	@ (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	@ (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fd fe58 	bl	8001e08 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fe54 	bl	8001e08 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	@ (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	@ (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	@ (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	@ (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fdb8 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	08007ff4 	.word	0x08007ff4
 8004228:	20000010 	.word	0x20000010
 800422c:	20000014 	.word	0x20000014

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b094      	sub	sp, #80	@ 0x50
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b79      	ldr	r3, [pc, #484]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80e1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x1ec>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e0db      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b73      	ldr	r3, [pc, #460]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x204>)
 8004266:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004268:	e0db      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b72      	ldr	r3, [pc, #456]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x204>)
 800426c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800426e:	e0d8      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b6f      	ldr	r3, [pc, #444]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d063      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	2200      	movs	r2, #0
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004290:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
 800429e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	f04f 0000 	mov.w	r0, #0
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	0159      	lsls	r1, r3, #5
 80042b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b4:	0150      	lsls	r0, r2, #5
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4621      	mov	r1, r4
 80042bc:	1a51      	subs	r1, r2, r1
 80042be:	6139      	str	r1, [r7, #16]
 80042c0:	4629      	mov	r1, r5
 80042c2:	eb63 0301 	sbc.w	r3, r3, r1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d4:	4659      	mov	r1, fp
 80042d6:	018b      	lsls	r3, r1, #6
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042de:	4651      	mov	r1, sl
 80042e0:	018a      	lsls	r2, r1, #6
 80042e2:	4651      	mov	r1, sl
 80042e4:	ebb2 0801 	subs.w	r8, r2, r1
 80042e8:	4659      	mov	r1, fp
 80042ea:	eb63 0901 	sbc.w	r9, r3, r1
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004302:	4690      	mov	r8, r2
 8004304:	4699      	mov	r9, r3
 8004306:	4623      	mov	r3, r4
 8004308:	eb18 0303 	adds.w	r3, r8, r3
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	462b      	mov	r3, r5
 8004310:	eb49 0303 	adc.w	r3, r9, r3
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004322:	4629      	mov	r1, r5
 8004324:	028b      	lsls	r3, r1, #10
 8004326:	4621      	mov	r1, r4
 8004328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800432c:	4621      	mov	r1, r4
 800432e:	028a      	lsls	r2, r1, #10
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004336:	2200      	movs	r2, #0
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800433c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004340:	f7fc fc32 	bl	8000ba8 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434c:	e058      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	2200      	movs	r2, #0
 8004356:	4618      	mov	r0, r3
 8004358:	4611      	mov	r1, r2
 800435a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
 8004364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	f04f 0000 	mov.w	r0, #0
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	0159      	lsls	r1, r3, #5
 8004376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800437a:	0150      	lsls	r0, r2, #5
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4641      	mov	r1, r8
 8004382:	ebb2 0a01 	subs.w	sl, r2, r1
 8004386:	4649      	mov	r1, r9
 8004388:	eb63 0b01 	sbc.w	fp, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800439c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043a0:	ebb2 040a 	subs.w	r4, r2, sl
 80043a4:	eb63 050b 	sbc.w	r5, r3, fp
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	00eb      	lsls	r3, r5, #3
 80043b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b6:	00e2      	lsls	r2, r4, #3
 80043b8:	4614      	mov	r4, r2
 80043ba:	461d      	mov	r5, r3
 80043bc:	4643      	mov	r3, r8
 80043be:	18e3      	adds	r3, r4, r3
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	464b      	mov	r3, r9
 80043c4:	eb45 0303 	adc.w	r3, r5, r3
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ea:	2200      	movs	r2, #0
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	61fa      	str	r2, [r7, #28]
 80043f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f4:	f7fc fbd8 	bl	8000ba8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004410:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_GetSysClockFreq+0x204>)
 800441e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004424:	4618      	mov	r0, r3
 8004426:	3750      	adds	r7, #80	@ 0x50
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00f42400 	.word	0x00f42400

08004438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800443c:	4b03      	ldr	r3, [pc, #12]	@ (800444c <HAL_RCC_GetHCLKFreq+0x14>)
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000010 	.word	0x20000010

08004450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004454:	f7ff fff0 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0a9b      	lsrs	r3, r3, #10
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4903      	ldr	r1, [pc, #12]	@ (8004474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	08008004 	.word	0x08008004

08004478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800447c:	f7ff ffdc 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0b5b      	lsrs	r3, r3, #13
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	08008004 	.word	0x08008004

080044a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07b      	b.n	80045aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c2:	d009      	beq.n	80044d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	61da      	str	r2, [r3, #28]
 80044ca:	e005      	b.n	80044d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fa4c 	bl	8001990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	ea42 0103 	orr.w	r1, r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	f003 0104 	and.w	r1, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	f003 0210 	and.w	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004598:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b088      	sub	sp, #32
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c2:	f7fd fc21 	bl	8001e08 <HAL_GetTick>
 80045c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	e12a      	b.n	8004832 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Transmit+0x36>
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e122      	b.n	8004832 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_SPI_Transmit+0x48>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e11b      	b.n	8004832 <HAL_SPI_Transmit+0x280>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2203      	movs	r2, #3
 8004606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004648:	d10f      	bne.n	800466a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	d007      	beq.n	8004688 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004690:	d152      	bne.n	8004738 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_Transmit+0xee>
 800469a:	8b7b      	ldrh	r3, [r7, #26]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d145      	bne.n	800472c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	881a      	ldrh	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	1c9a      	adds	r2, r3, #2
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046c4:	e032      	b.n	800472c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d112      	bne.n	80046fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	881a      	ldrh	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e4:	1c9a      	adds	r2, r3, #2
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046f8:	e018      	b.n	800472c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046fa:	f7fd fb85 	bl	8001e08 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d803      	bhi.n	8004712 <HAL_SPI_Transmit+0x160>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d102      	bne.n	8004718 <HAL_SPI_Transmit+0x166>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d109      	bne.n	800472c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e082      	b.n	8004832 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1c7      	bne.n	80046c6 <HAL_SPI_Transmit+0x114>
 8004736:	e053      	b.n	80047e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit+0x194>
 8004740:	8b7b      	ldrh	r3, [r7, #26]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d147      	bne.n	80047d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	330c      	adds	r3, #12
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800476c:	e033      	b.n	80047d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b02      	cmp	r3, #2
 800477a:	d113      	bne.n	80047a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	7812      	ldrb	r2, [r2, #0]
 8004788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047a2:	e018      	b.n	80047d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a4:	f7fd fb30 	bl	8001e08 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d803      	bhi.n	80047bc <HAL_SPI_Transmit+0x20a>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Transmit+0x210>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e02d      	b.n	8004832 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1c6      	bne.n	800476e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f8b1 	bl	800494c <SPI_EndRxTxTransaction>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004830:	2300      	movs	r3, #0
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800484c:	f7fd fadc 	bl	8001e08 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	4413      	add	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800485c:	f7fd fad4 	bl	8001e08 <HAL_GetTick>
 8004860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004862:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	015b      	lsls	r3, r3, #5
 8004868:	0d1b      	lsrs	r3, r3, #20
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004872:	e055      	b.n	8004920 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d051      	beq.n	8004920 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800487c:	f7fd fac4 	bl	8001e08 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	429a      	cmp	r2, r3
 800488a:	d902      	bls.n	8004892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d13d      	bne.n	800490e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048aa:	d111      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b4:	d004      	beq.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	d107      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d8:	d10f      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e018      	b.n	8004940 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e002      	b.n	8004920 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3b01      	subs	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	429a      	cmp	r2, r3
 800493c:	d19a      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000010 	.word	0x20000010

0800494c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2201      	movs	r2, #1
 8004960:	2102      	movs	r1, #2
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff ff6a 	bl	800483c <SPI_WaitFlagStateUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e032      	b.n	80049e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800497e:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <SPI_EndRxTxTransaction+0xa0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <SPI_EndRxTxTransaction+0xa4>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	0d5b      	lsrs	r3, r3, #21
 800498a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800499c:	d112      	bne.n	80049c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2180      	movs	r1, #128	@ 0x80
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff ff47 	bl	800483c <SPI_WaitFlagStateUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e00f      	b.n	80049e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d0f2      	beq.n	80049c4 <SPI_EndRxTxTransaction+0x78>
 80049de:	e000      	b.n	80049e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80049e0:	bf00      	nop
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000010 	.word	0x20000010
 80049f0:	165e9f81 	.word	0x165e9f81

080049f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e042      	b.n	8004a8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd f800 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	@ 0x24
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f973 	bl	8004d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	@ 0x28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d175      	bne.n	8004ba0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Transmit+0x2c>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e06e      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2221      	movs	r2, #33	@ 0x21
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad2:	f7fd f999 	bl	8001e08 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aec:	d108      	bne.n	8004b00 <HAL_UART_Transmit+0x6c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d104      	bne.n	8004b00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e003      	b.n	8004b08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b08:	e02e      	b.n	8004b68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	@ 0x80
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f848 	bl	8004baa <UART_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03a      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	3302      	adds	r3, #2
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e007      	b.n	8004b5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1cb      	bne.n	8004b0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2140      	movs	r1, #64	@ 0x40
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f814 	bl	8004baa <UART_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e006      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bba:	e03b      	b.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d037      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7fd f920 	bl	8001e08 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e03a      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d023      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b80      	cmp	r3, #128	@ 0x80
 8004bf0:	d020      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d01d      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d116      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f81d 	bl	8004c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2208      	movs	r2, #8
 8004c26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e00f      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d0b4      	beq.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b095      	sub	sp, #84	@ 0x54
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c84:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e5      	bne.n	8004c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e5      	bne.n	8004c98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d119      	bne.n	8004d08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf4:	61ba      	str	r2, [r7, #24]
 8004cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d16:	bf00      	nop
 8004d18:	3754      	adds	r7, #84	@ 0x54
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d28:	b0c0      	sub	sp, #256	@ 0x100
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	68d9      	ldr	r1, [r3, #12]
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	ea40 0301 	orr.w	r3, r0, r1
 8004d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d7c:	f021 010c 	bic.w	r1, r1, #12
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9e:	6999      	ldr	r1, [r3, #24]
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	ea40 0301 	orr.w	r3, r0, r1
 8004daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff0 <UART_SetConfig+0x2cc>)
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d005      	beq.n	8004dc4 <UART_SetConfig+0xa0>
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8004ff4 <UART_SetConfig+0x2d0>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d104      	bne.n	8004dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc4:	f7ff fb58 	bl	8004478 <HAL_RCC_GetPCLK2Freq>
 8004dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dcc:	e003      	b.n	8004dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7ff fb3f 	bl	8004450 <HAL_RCC_GetPCLK1Freq>
 8004dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de0:	f040 810c 	bne.w	8004ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004df6:	4622      	mov	r2, r4
 8004df8:	462b      	mov	r3, r5
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e06:	4621      	mov	r1, r4
 8004e08:	eb12 0801 	adds.w	r8, r2, r1
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	eb43 0901 	adc.w	r9, r3, r1
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e26:	4690      	mov	r8, r2
 8004e28:	4699      	mov	r9, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	eb18 0303 	adds.w	r3, r8, r3
 8004e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e34:	462b      	mov	r3, r5
 8004e36:	eb49 0303 	adc.w	r3, r9, r3
 8004e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e52:	460b      	mov	r3, r1
 8004e54:	18db      	adds	r3, r3, r3
 8004e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e58:	4613      	mov	r3, r2
 8004e5a:	eb42 0303 	adc.w	r3, r2, r3
 8004e5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e68:	f7fb fe9e 	bl	8000ba8 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b61      	ldr	r3, [pc, #388]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2302 	umull	r2, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	011c      	lsls	r4, r3, #4
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e94:	415b      	adcs	r3, r3
 8004e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ebc:	4692      	mov	sl, r2
 8004ebe:	469b      	mov	fp, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	18db      	adds	r3, r3, r3
 8004eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eee:	4613      	mov	r3, r2
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004efe:	f7fb fe53 	bl	8000ba8 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2264      	movs	r2, #100	@ 0x64
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	1acb      	subs	r3, r1, r3
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f1e:	4b36      	ldr	r3, [pc, #216]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004f20:	fba3 2302 	umull	r2, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fba:	f7fb fdf5 	bl	8000ba8 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	@ 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3332      	adds	r3, #50	@ 0x32
 8004fd6:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 0207 	and.w	r2, r3, #7
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4422      	add	r2, r4
 8004fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fec:	e106      	b.n	80051fc <UART_SetConfig+0x4d8>
 8004fee:	bf00      	nop
 8004ff0:	40011000 	.word	0x40011000
 8004ff4:	40011400 	.word	0x40011400
 8004ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005006:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800500a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800500e:	4642      	mov	r2, r8
 8005010:	464b      	mov	r3, r9
 8005012:	1891      	adds	r1, r2, r2
 8005014:	6239      	str	r1, [r7, #32]
 8005016:	415b      	adcs	r3, r3
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
 800501a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501e:	4641      	mov	r1, r8
 8005020:	1854      	adds	r4, r2, r1
 8005022:	4649      	mov	r1, r9
 8005024:	eb43 0501 	adc.w	r5, r3, r1
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	00eb      	lsls	r3, r5, #3
 8005032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005036:	00e2      	lsls	r2, r4, #3
 8005038:	4614      	mov	r4, r2
 800503a:	461d      	mov	r5, r3
 800503c:	4643      	mov	r3, r8
 800503e:	18e3      	adds	r3, r4, r3
 8005040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005044:	464b      	mov	r3, r9
 8005046:	eb45 0303 	adc.w	r3, r5, r3
 800504a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800505a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800506a:	4629      	mov	r1, r5
 800506c:	008b      	lsls	r3, r1, #2
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005074:	4621      	mov	r1, r4
 8005076:	008a      	lsls	r2, r1, #2
 8005078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800507c:	f7fb fd94 	bl	8000ba8 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b60      	ldr	r3, [pc, #384]	@ (8005208 <UART_SetConfig+0x4e4>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	011c      	lsls	r4, r3, #4
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005098:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800509c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	61b9      	str	r1, [r7, #24]
 80050a8:	415b      	adcs	r3, r3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6139      	str	r1, [r7, #16]
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800511a:	f7fb fd45 	bl	8000ba8 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4611      	mov	r1, r2
 8005124:	4b38      	ldr	r3, [pc, #224]	@ (8005208 <UART_SetConfig+0x4e4>)
 8005126:	fba3 2301 	umull	r2, r3, r3, r1
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2264      	movs	r2, #100	@ 0x64
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	@ 0x32
 8005138:	4a33      	ldr	r2, [pc, #204]	@ (8005208 <UART_SetConfig+0x4e4>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	673b      	str	r3, [r7, #112]	@ 0x70
 800514e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005150:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	415b      	adcs	r3, r3
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005164:	4641      	mov	r1, r8
 8005166:	1851      	adds	r1, r2, r1
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	4649      	mov	r1, r9
 800516c:	414b      	adcs	r3, r1
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800517c:	4659      	mov	r1, fp
 800517e:	00cb      	lsls	r3, r1, #3
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005186:	4651      	mov	r1, sl
 8005188:	00ca      	lsls	r2, r1, #3
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	4603      	mov	r3, r0
 8005190:	4642      	mov	r2, r8
 8005192:	189b      	adds	r3, r3, r2
 8005194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005196:	464b      	mov	r3, r9
 8005198:	460a      	mov	r2, r1
 800519a:	eb42 0303 	adc.w	r3, r2, r3
 800519e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80051aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051b8:	4649      	mov	r1, r9
 80051ba:	008b      	lsls	r3, r1, #2
 80051bc:	4641      	mov	r1, r8
 80051be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c2:	4641      	mov	r1, r8
 80051c4:	008a      	lsls	r2, r1, #2
 80051c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ca:	f7fb fced 	bl	8000ba8 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <UART_SetConfig+0x4e4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	@ 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	3332      	adds	r3, #50	@ 0x32
 80051e6:	4a08      	ldr	r2, [pc, #32]	@ (8005208 <UART_SetConfig+0x4e4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4422      	add	r2, r4
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005202:	46bd      	mov	sp, r7
 8005204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005208:	51eb851f 	.word	0x51eb851f

0800520c <__cvt>:
 800520c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	ec57 6b10 	vmov	r6, r7, d0
 8005214:	2f00      	cmp	r7, #0
 8005216:	460c      	mov	r4, r1
 8005218:	4619      	mov	r1, r3
 800521a:	463b      	mov	r3, r7
 800521c:	bfbb      	ittet	lt
 800521e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005222:	461f      	movlt	r7, r3
 8005224:	2300      	movge	r3, #0
 8005226:	232d      	movlt	r3, #45	@ 0x2d
 8005228:	700b      	strb	r3, [r1, #0]
 800522a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800522c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005230:	4691      	mov	r9, r2
 8005232:	f023 0820 	bic.w	r8, r3, #32
 8005236:	bfbc      	itt	lt
 8005238:	4632      	movlt	r2, r6
 800523a:	4616      	movlt	r6, r2
 800523c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005240:	d005      	beq.n	800524e <__cvt+0x42>
 8005242:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005246:	d100      	bne.n	800524a <__cvt+0x3e>
 8005248:	3401      	adds	r4, #1
 800524a:	2102      	movs	r1, #2
 800524c:	e000      	b.n	8005250 <__cvt+0x44>
 800524e:	2103      	movs	r1, #3
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	ab02      	add	r3, sp, #8
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	ec47 6b10 	vmov	d0, r6, r7
 800525c:	4653      	mov	r3, sl
 800525e:	4622      	mov	r2, r4
 8005260:	f000 fe6e 	bl	8005f40 <_dtoa_r>
 8005264:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005268:	4605      	mov	r5, r0
 800526a:	d119      	bne.n	80052a0 <__cvt+0x94>
 800526c:	f019 0f01 	tst.w	r9, #1
 8005270:	d00e      	beq.n	8005290 <__cvt+0x84>
 8005272:	eb00 0904 	add.w	r9, r0, r4
 8005276:	2200      	movs	r2, #0
 8005278:	2300      	movs	r3, #0
 800527a:	4630      	mov	r0, r6
 800527c:	4639      	mov	r1, r7
 800527e:	f7fb fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005282:	b108      	cbz	r0, 8005288 <__cvt+0x7c>
 8005284:	f8cd 900c 	str.w	r9, [sp, #12]
 8005288:	2230      	movs	r2, #48	@ 0x30
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	454b      	cmp	r3, r9
 800528e:	d31e      	bcc.n	80052ce <__cvt+0xc2>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005294:	1b5b      	subs	r3, r3, r5
 8005296:	4628      	mov	r0, r5
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	b004      	add	sp, #16
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052a4:	eb00 0904 	add.w	r9, r0, r4
 80052a8:	d1e5      	bne.n	8005276 <__cvt+0x6a>
 80052aa:	7803      	ldrb	r3, [r0, #0]
 80052ac:	2b30      	cmp	r3, #48	@ 0x30
 80052ae:	d10a      	bne.n	80052c6 <__cvt+0xba>
 80052b0:	2200      	movs	r2, #0
 80052b2:	2300      	movs	r3, #0
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f7fb fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80052bc:	b918      	cbnz	r0, 80052c6 <__cvt+0xba>
 80052be:	f1c4 0401 	rsb	r4, r4, #1
 80052c2:	f8ca 4000 	str.w	r4, [sl]
 80052c6:	f8da 3000 	ldr.w	r3, [sl]
 80052ca:	4499      	add	r9, r3
 80052cc:	e7d3      	b.n	8005276 <__cvt+0x6a>
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	9103      	str	r1, [sp, #12]
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e7d9      	b.n	800528a <__cvt+0x7e>

080052d6 <__exponent>:
 80052d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052d8:	2900      	cmp	r1, #0
 80052da:	bfba      	itte	lt
 80052dc:	4249      	neglt	r1, r1
 80052de:	232d      	movlt	r3, #45	@ 0x2d
 80052e0:	232b      	movge	r3, #43	@ 0x2b
 80052e2:	2909      	cmp	r1, #9
 80052e4:	7002      	strb	r2, [r0, #0]
 80052e6:	7043      	strb	r3, [r0, #1]
 80052e8:	dd29      	ble.n	800533e <__exponent+0x68>
 80052ea:	f10d 0307 	add.w	r3, sp, #7
 80052ee:	461d      	mov	r5, r3
 80052f0:	270a      	movs	r7, #10
 80052f2:	461a      	mov	r2, r3
 80052f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80052f8:	fb07 1416 	mls	r4, r7, r6, r1
 80052fc:	3430      	adds	r4, #48	@ 0x30
 80052fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005302:	460c      	mov	r4, r1
 8005304:	2c63      	cmp	r4, #99	@ 0x63
 8005306:	f103 33ff 	add.w	r3, r3, #4294967295
 800530a:	4631      	mov	r1, r6
 800530c:	dcf1      	bgt.n	80052f2 <__exponent+0x1c>
 800530e:	3130      	adds	r1, #48	@ 0x30
 8005310:	1e94      	subs	r4, r2, #2
 8005312:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005316:	1c41      	adds	r1, r0, #1
 8005318:	4623      	mov	r3, r4
 800531a:	42ab      	cmp	r3, r5
 800531c:	d30a      	bcc.n	8005334 <__exponent+0x5e>
 800531e:	f10d 0309 	add.w	r3, sp, #9
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	42ac      	cmp	r4, r5
 8005326:	bf88      	it	hi
 8005328:	2300      	movhi	r3, #0
 800532a:	3302      	adds	r3, #2
 800532c:	4403      	add	r3, r0
 800532e:	1a18      	subs	r0, r3, r0
 8005330:	b003      	add	sp, #12
 8005332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005334:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005338:	f801 6f01 	strb.w	r6, [r1, #1]!
 800533c:	e7ed      	b.n	800531a <__exponent+0x44>
 800533e:	2330      	movs	r3, #48	@ 0x30
 8005340:	3130      	adds	r1, #48	@ 0x30
 8005342:	7083      	strb	r3, [r0, #2]
 8005344:	70c1      	strb	r1, [r0, #3]
 8005346:	1d03      	adds	r3, r0, #4
 8005348:	e7f1      	b.n	800532e <__exponent+0x58>
	...

0800534c <_printf_float>:
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	b08d      	sub	sp, #52	@ 0x34
 8005352:	460c      	mov	r4, r1
 8005354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005358:	4616      	mov	r6, r2
 800535a:	461f      	mov	r7, r3
 800535c:	4605      	mov	r5, r0
 800535e:	f000 fcef 	bl	8005d40 <_localeconv_r>
 8005362:	6803      	ldr	r3, [r0, #0]
 8005364:	9304      	str	r3, [sp, #16]
 8005366:	4618      	mov	r0, r3
 8005368:	f7fa ff82 	bl	8000270 <strlen>
 800536c:	2300      	movs	r3, #0
 800536e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005370:	f8d8 3000 	ldr.w	r3, [r8]
 8005374:	9005      	str	r0, [sp, #20]
 8005376:	3307      	adds	r3, #7
 8005378:	f023 0307 	bic.w	r3, r3, #7
 800537c:	f103 0208 	add.w	r2, r3, #8
 8005380:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005384:	f8d4 b000 	ldr.w	fp, [r4]
 8005388:	f8c8 2000 	str.w	r2, [r8]
 800538c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005394:	9307      	str	r3, [sp, #28]
 8005396:	f8cd 8018 	str.w	r8, [sp, #24]
 800539a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800539e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005614 <_printf_float+0x2c8>)
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295
 80053a8:	f7fb fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80053ac:	bb70      	cbnz	r0, 800540c <_printf_float+0xc0>
 80053ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053b2:	4b98      	ldr	r3, [pc, #608]	@ (8005614 <_printf_float+0x2c8>)
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	f7fb fb9a 	bl	8000af0 <__aeabi_dcmple>
 80053bc:	bb30      	cbnz	r0, 800540c <_printf_float+0xc0>
 80053be:	2200      	movs	r2, #0
 80053c0:	2300      	movs	r3, #0
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fb fb89 	bl	8000adc <__aeabi_dcmplt>
 80053ca:	b110      	cbz	r0, 80053d2 <_printf_float+0x86>
 80053cc:	232d      	movs	r3, #45	@ 0x2d
 80053ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d2:	4a91      	ldr	r2, [pc, #580]	@ (8005618 <_printf_float+0x2cc>)
 80053d4:	4b91      	ldr	r3, [pc, #580]	@ (800561c <_printf_float+0x2d0>)
 80053d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053da:	bf8c      	ite	hi
 80053dc:	4690      	movhi	r8, r2
 80053de:	4698      	movls	r8, r3
 80053e0:	2303      	movs	r3, #3
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	f02b 0304 	bic.w	r3, fp, #4
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	f04f 0900 	mov.w	r9, #0
 80053ee:	9700      	str	r7, [sp, #0]
 80053f0:	4633      	mov	r3, r6
 80053f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80053f4:	4621      	mov	r1, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 f9d2 	bl	80057a0 <_printf_common>
 80053fc:	3001      	adds	r0, #1
 80053fe:	f040 808d 	bne.w	800551c <_printf_float+0x1d0>
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	b00d      	add	sp, #52	@ 0x34
 8005408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	4642      	mov	r2, r8
 800540e:	464b      	mov	r3, r9
 8005410:	4640      	mov	r0, r8
 8005412:	4649      	mov	r1, r9
 8005414:	f7fb fb8a 	bl	8000b2c <__aeabi_dcmpun>
 8005418:	b140      	cbz	r0, 800542c <_printf_float+0xe0>
 800541a:	464b      	mov	r3, r9
 800541c:	2b00      	cmp	r3, #0
 800541e:	bfbc      	itt	lt
 8005420:	232d      	movlt	r3, #45	@ 0x2d
 8005422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005426:	4a7e      	ldr	r2, [pc, #504]	@ (8005620 <_printf_float+0x2d4>)
 8005428:	4b7e      	ldr	r3, [pc, #504]	@ (8005624 <_printf_float+0x2d8>)
 800542a:	e7d4      	b.n	80053d6 <_printf_float+0x8a>
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005432:	9206      	str	r2, [sp, #24]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	d13b      	bne.n	80054b0 <_printf_float+0x164>
 8005438:	2306      	movs	r3, #6
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005440:	2300      	movs	r3, #0
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	9303      	str	r3, [sp, #12]
 8005446:	ab0a      	add	r3, sp, #40	@ 0x28
 8005448:	e9cd a301 	strd	sl, r3, [sp, #4]
 800544c:	ab09      	add	r3, sp, #36	@ 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	6861      	ldr	r1, [r4, #4]
 8005452:	ec49 8b10 	vmov	d0, r8, r9
 8005456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800545a:	4628      	mov	r0, r5
 800545c:	f7ff fed6 	bl	800520c <__cvt>
 8005460:	9b06      	ldr	r3, [sp, #24]
 8005462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005464:	2b47      	cmp	r3, #71	@ 0x47
 8005466:	4680      	mov	r8, r0
 8005468:	d129      	bne.n	80054be <_printf_float+0x172>
 800546a:	1cc8      	adds	r0, r1, #3
 800546c:	db02      	blt.n	8005474 <_printf_float+0x128>
 800546e:	6863      	ldr	r3, [r4, #4]
 8005470:	4299      	cmp	r1, r3
 8005472:	dd41      	ble.n	80054f8 <_printf_float+0x1ac>
 8005474:	f1aa 0a02 	sub.w	sl, sl, #2
 8005478:	fa5f fa8a 	uxtb.w	sl, sl
 800547c:	3901      	subs	r1, #1
 800547e:	4652      	mov	r2, sl
 8005480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005484:	9109      	str	r1, [sp, #36]	@ 0x24
 8005486:	f7ff ff26 	bl	80052d6 <__exponent>
 800548a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800548c:	1813      	adds	r3, r2, r0
 800548e:	2a01      	cmp	r2, #1
 8005490:	4681      	mov	r9, r0
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	dc02      	bgt.n	800549c <_printf_float+0x150>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	07d2      	lsls	r2, r2, #31
 800549a:	d501      	bpl.n	80054a0 <_printf_float+0x154>
 800549c:	3301      	adds	r3, #1
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0a2      	beq.n	80053ee <_printf_float+0xa2>
 80054a8:	232d      	movs	r3, #45	@ 0x2d
 80054aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ae:	e79e      	b.n	80053ee <_printf_float+0xa2>
 80054b0:	9a06      	ldr	r2, [sp, #24]
 80054b2:	2a47      	cmp	r2, #71	@ 0x47
 80054b4:	d1c2      	bne.n	800543c <_printf_float+0xf0>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1c0      	bne.n	800543c <_printf_float+0xf0>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7bd      	b.n	800543a <_printf_float+0xee>
 80054be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054c2:	d9db      	bls.n	800547c <_printf_float+0x130>
 80054c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054c8:	d118      	bne.n	80054fc <_printf_float+0x1b0>
 80054ca:	2900      	cmp	r1, #0
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	dd0b      	ble.n	80054e8 <_printf_float+0x19c>
 80054d0:	6121      	str	r1, [r4, #16]
 80054d2:	b913      	cbnz	r3, 80054da <_printf_float+0x18e>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	07d0      	lsls	r0, r2, #31
 80054d8:	d502      	bpl.n	80054e0 <_printf_float+0x194>
 80054da:	3301      	adds	r3, #1
 80054dc:	440b      	add	r3, r1
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054e2:	f04f 0900 	mov.w	r9, #0
 80054e6:	e7db      	b.n	80054a0 <_printf_float+0x154>
 80054e8:	b913      	cbnz	r3, 80054f0 <_printf_float+0x1a4>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	07d2      	lsls	r2, r2, #31
 80054ee:	d501      	bpl.n	80054f4 <_printf_float+0x1a8>
 80054f0:	3302      	adds	r3, #2
 80054f2:	e7f4      	b.n	80054de <_printf_float+0x192>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e7f2      	b.n	80054de <_printf_float+0x192>
 80054f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054fe:	4299      	cmp	r1, r3
 8005500:	db05      	blt.n	800550e <_printf_float+0x1c2>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	6121      	str	r1, [r4, #16]
 8005506:	07d8      	lsls	r0, r3, #31
 8005508:	d5ea      	bpl.n	80054e0 <_printf_float+0x194>
 800550a:	1c4b      	adds	r3, r1, #1
 800550c:	e7e7      	b.n	80054de <_printf_float+0x192>
 800550e:	2900      	cmp	r1, #0
 8005510:	bfd4      	ite	le
 8005512:	f1c1 0202 	rsble	r2, r1, #2
 8005516:	2201      	movgt	r2, #1
 8005518:	4413      	add	r3, r2
 800551a:	e7e0      	b.n	80054de <_printf_float+0x192>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	055a      	lsls	r2, r3, #21
 8005520:	d407      	bmi.n	8005532 <_printf_float+0x1e6>
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	4642      	mov	r2, r8
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	d12b      	bne.n	8005588 <_printf_float+0x23c>
 8005530:	e767      	b.n	8005402 <_printf_float+0xb6>
 8005532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005536:	f240 80dd 	bls.w	80056f4 <_printf_float+0x3a8>
 800553a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800553e:	2200      	movs	r2, #0
 8005540:	2300      	movs	r3, #0
 8005542:	f7fb fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005546:	2800      	cmp	r0, #0
 8005548:	d033      	beq.n	80055b2 <_printf_float+0x266>
 800554a:	4a37      	ldr	r2, [pc, #220]	@ (8005628 <_printf_float+0x2dc>)
 800554c:	2301      	movs	r3, #1
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	f43f af54 	beq.w	8005402 <_printf_float+0xb6>
 800555a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800555e:	4543      	cmp	r3, r8
 8005560:	db02      	blt.n	8005568 <_printf_float+0x21c>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	07d8      	lsls	r0, r3, #31
 8005566:	d50f      	bpl.n	8005588 <_printf_float+0x23c>
 8005568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556c:	4631      	mov	r1, r6
 800556e:	4628      	mov	r0, r5
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	f43f af45 	beq.w	8005402 <_printf_float+0xb6>
 8005578:	f04f 0900 	mov.w	r9, #0
 800557c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005580:	f104 0a1a 	add.w	sl, r4, #26
 8005584:	45c8      	cmp	r8, r9
 8005586:	dc09      	bgt.n	800559c <_printf_float+0x250>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	079b      	lsls	r3, r3, #30
 800558c:	f100 8103 	bmi.w	8005796 <_printf_float+0x44a>
 8005590:	68e0      	ldr	r0, [r4, #12]
 8005592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005594:	4298      	cmp	r0, r3
 8005596:	bfb8      	it	lt
 8005598:	4618      	movlt	r0, r3
 800559a:	e734      	b.n	8005406 <_printf_float+0xba>
 800559c:	2301      	movs	r3, #1
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f af2b 	beq.w	8005402 <_printf_float+0xb6>
 80055ac:	f109 0901 	add.w	r9, r9, #1
 80055b0:	e7e8      	b.n	8005584 <_printf_float+0x238>
 80055b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dc39      	bgt.n	800562c <_printf_float+0x2e0>
 80055b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005628 <_printf_float+0x2dc>)
 80055ba:	2301      	movs	r3, #1
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af1d 	beq.w	8005402 <_printf_float+0xb6>
 80055c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80055cc:	ea59 0303 	orrs.w	r3, r9, r3
 80055d0:	d102      	bne.n	80055d8 <_printf_float+0x28c>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	07d9      	lsls	r1, r3, #31
 80055d6:	d5d7      	bpl.n	8005588 <_printf_float+0x23c>
 80055d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f af0d 	beq.w	8005402 <_printf_float+0xb6>
 80055e8:	f04f 0a00 	mov.w	sl, #0
 80055ec:	f104 0b1a 	add.w	fp, r4, #26
 80055f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f2:	425b      	negs	r3, r3
 80055f4:	4553      	cmp	r3, sl
 80055f6:	dc01      	bgt.n	80055fc <_printf_float+0x2b0>
 80055f8:	464b      	mov	r3, r9
 80055fa:	e793      	b.n	8005524 <_printf_float+0x1d8>
 80055fc:	2301      	movs	r3, #1
 80055fe:	465a      	mov	r2, fp
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f aefb 	beq.w	8005402 <_printf_float+0xb6>
 800560c:	f10a 0a01 	add.w	sl, sl, #1
 8005610:	e7ee      	b.n	80055f0 <_printf_float+0x2a4>
 8005612:	bf00      	nop
 8005614:	7fefffff 	.word	0x7fefffff
 8005618:	08008018 	.word	0x08008018
 800561c:	08008014 	.word	0x08008014
 8005620:	08008020 	.word	0x08008020
 8005624:	0800801c 	.word	0x0800801c
 8005628:	08008024 	.word	0x08008024
 800562c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800562e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005632:	4553      	cmp	r3, sl
 8005634:	bfa8      	it	ge
 8005636:	4653      	movge	r3, sl
 8005638:	2b00      	cmp	r3, #0
 800563a:	4699      	mov	r9, r3
 800563c:	dc36      	bgt.n	80056ac <_printf_float+0x360>
 800563e:	f04f 0b00 	mov.w	fp, #0
 8005642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005646:	f104 021a 	add.w	r2, r4, #26
 800564a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800564c:	9306      	str	r3, [sp, #24]
 800564e:	eba3 0309 	sub.w	r3, r3, r9
 8005652:	455b      	cmp	r3, fp
 8005654:	dc31      	bgt.n	80056ba <_printf_float+0x36e>
 8005656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005658:	459a      	cmp	sl, r3
 800565a:	dc3a      	bgt.n	80056d2 <_printf_float+0x386>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	07da      	lsls	r2, r3, #31
 8005660:	d437      	bmi.n	80056d2 <_printf_float+0x386>
 8005662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005664:	ebaa 0903 	sub.w	r9, sl, r3
 8005668:	9b06      	ldr	r3, [sp, #24]
 800566a:	ebaa 0303 	sub.w	r3, sl, r3
 800566e:	4599      	cmp	r9, r3
 8005670:	bfa8      	it	ge
 8005672:	4699      	movge	r9, r3
 8005674:	f1b9 0f00 	cmp.w	r9, #0
 8005678:	dc33      	bgt.n	80056e2 <_printf_float+0x396>
 800567a:	f04f 0800 	mov.w	r8, #0
 800567e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005682:	f104 0b1a 	add.w	fp, r4, #26
 8005686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005688:	ebaa 0303 	sub.w	r3, sl, r3
 800568c:	eba3 0309 	sub.w	r3, r3, r9
 8005690:	4543      	cmp	r3, r8
 8005692:	f77f af79 	ble.w	8005588 <_printf_float+0x23c>
 8005696:	2301      	movs	r3, #1
 8005698:	465a      	mov	r2, fp
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f aeae 	beq.w	8005402 <_printf_float+0xb6>
 80056a6:	f108 0801 	add.w	r8, r8, #1
 80056aa:	e7ec      	b.n	8005686 <_printf_float+0x33a>
 80056ac:	4642      	mov	r2, r8
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	d1c2      	bne.n	800563e <_printf_float+0x2f2>
 80056b8:	e6a3      	b.n	8005402 <_printf_float+0xb6>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	9206      	str	r2, [sp, #24]
 80056c2:	47b8      	blx	r7
 80056c4:	3001      	adds	r0, #1
 80056c6:	f43f ae9c 	beq.w	8005402 <_printf_float+0xb6>
 80056ca:	9a06      	ldr	r2, [sp, #24]
 80056cc:	f10b 0b01 	add.w	fp, fp, #1
 80056d0:	e7bb      	b.n	800564a <_printf_float+0x2fe>
 80056d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	d1c0      	bne.n	8005662 <_printf_float+0x316>
 80056e0:	e68f      	b.n	8005402 <_printf_float+0xb6>
 80056e2:	9a06      	ldr	r2, [sp, #24]
 80056e4:	464b      	mov	r3, r9
 80056e6:	4442      	add	r2, r8
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	d1c3      	bne.n	800567a <_printf_float+0x32e>
 80056f2:	e686      	b.n	8005402 <_printf_float+0xb6>
 80056f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056f8:	f1ba 0f01 	cmp.w	sl, #1
 80056fc:	dc01      	bgt.n	8005702 <_printf_float+0x3b6>
 80056fe:	07db      	lsls	r3, r3, #31
 8005700:	d536      	bpl.n	8005770 <_printf_float+0x424>
 8005702:	2301      	movs	r3, #1
 8005704:	4642      	mov	r2, r8
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae78 	beq.w	8005402 <_printf_float+0xb6>
 8005712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f ae70 	beq.w	8005402 <_printf_float+0xb6>
 8005722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005726:	2200      	movs	r2, #0
 8005728:	2300      	movs	r3, #0
 800572a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800572e:	f7fb f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005732:	b9c0      	cbnz	r0, 8005766 <_printf_float+0x41a>
 8005734:	4653      	mov	r3, sl
 8005736:	f108 0201 	add.w	r2, r8, #1
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	d10c      	bne.n	800575e <_printf_float+0x412>
 8005744:	e65d      	b.n	8005402 <_printf_float+0xb6>
 8005746:	2301      	movs	r3, #1
 8005748:	465a      	mov	r2, fp
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f ae56 	beq.w	8005402 <_printf_float+0xb6>
 8005756:	f108 0801 	add.w	r8, r8, #1
 800575a:	45d0      	cmp	r8, sl
 800575c:	dbf3      	blt.n	8005746 <_printf_float+0x3fa>
 800575e:	464b      	mov	r3, r9
 8005760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005764:	e6df      	b.n	8005526 <_printf_float+0x1da>
 8005766:	f04f 0800 	mov.w	r8, #0
 800576a:	f104 0b1a 	add.w	fp, r4, #26
 800576e:	e7f4      	b.n	800575a <_printf_float+0x40e>
 8005770:	2301      	movs	r3, #1
 8005772:	4642      	mov	r2, r8
 8005774:	e7e1      	b.n	800573a <_printf_float+0x3ee>
 8005776:	2301      	movs	r3, #1
 8005778:	464a      	mov	r2, r9
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	f43f ae3e 	beq.w	8005402 <_printf_float+0xb6>
 8005786:	f108 0801 	add.w	r8, r8, #1
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800578e:	1a5b      	subs	r3, r3, r1
 8005790:	4543      	cmp	r3, r8
 8005792:	dcf0      	bgt.n	8005776 <_printf_float+0x42a>
 8005794:	e6fc      	b.n	8005590 <_printf_float+0x244>
 8005796:	f04f 0800 	mov.w	r8, #0
 800579a:	f104 0919 	add.w	r9, r4, #25
 800579e:	e7f4      	b.n	800578a <_printf_float+0x43e>

080057a0 <_printf_common>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	4616      	mov	r6, r2
 80057a6:	4698      	mov	r8, r3
 80057a8:	688a      	ldr	r2, [r1, #8]
 80057aa:	690b      	ldr	r3, [r1, #16]
 80057ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057b0:	4293      	cmp	r3, r2
 80057b2:	bfb8      	it	lt
 80057b4:	4613      	movlt	r3, r2
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057bc:	4607      	mov	r7, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	b10a      	cbz	r2, 80057c6 <_printf_common+0x26>
 80057c2:	3301      	adds	r3, #1
 80057c4:	6033      	str	r3, [r6, #0]
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	0699      	lsls	r1, r3, #26
 80057ca:	bf42      	ittt	mi
 80057cc:	6833      	ldrmi	r3, [r6, #0]
 80057ce:	3302      	addmi	r3, #2
 80057d0:	6033      	strmi	r3, [r6, #0]
 80057d2:	6825      	ldr	r5, [r4, #0]
 80057d4:	f015 0506 	ands.w	r5, r5, #6
 80057d8:	d106      	bne.n	80057e8 <_printf_common+0x48>
 80057da:	f104 0a19 	add.w	sl, r4, #25
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	6832      	ldr	r2, [r6, #0]
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	dc26      	bgt.n	8005836 <_printf_common+0x96>
 80057e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	3b00      	subs	r3, #0
 80057f0:	bf18      	it	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	0692      	lsls	r2, r2, #26
 80057f6:	d42b      	bmi.n	8005850 <_printf_common+0xb0>
 80057f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057fc:	4641      	mov	r1, r8
 80057fe:	4638      	mov	r0, r7
 8005800:	47c8      	blx	r9
 8005802:	3001      	adds	r0, #1
 8005804:	d01e      	beq.n	8005844 <_printf_common+0xa4>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	6922      	ldr	r2, [r4, #16]
 800580a:	f003 0306 	and.w	r3, r3, #6
 800580e:	2b04      	cmp	r3, #4
 8005810:	bf02      	ittt	eq
 8005812:	68e5      	ldreq	r5, [r4, #12]
 8005814:	6833      	ldreq	r3, [r6, #0]
 8005816:	1aed      	subeq	r5, r5, r3
 8005818:	68a3      	ldr	r3, [r4, #8]
 800581a:	bf0c      	ite	eq
 800581c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005820:	2500      	movne	r5, #0
 8005822:	4293      	cmp	r3, r2
 8005824:	bfc4      	itt	gt
 8005826:	1a9b      	subgt	r3, r3, r2
 8005828:	18ed      	addgt	r5, r5, r3
 800582a:	2600      	movs	r6, #0
 800582c:	341a      	adds	r4, #26
 800582e:	42b5      	cmp	r5, r6
 8005830:	d11a      	bne.n	8005868 <_printf_common+0xc8>
 8005832:	2000      	movs	r0, #0
 8005834:	e008      	b.n	8005848 <_printf_common+0xa8>
 8005836:	2301      	movs	r3, #1
 8005838:	4652      	mov	r2, sl
 800583a:	4641      	mov	r1, r8
 800583c:	4638      	mov	r0, r7
 800583e:	47c8      	blx	r9
 8005840:	3001      	adds	r0, #1
 8005842:	d103      	bne.n	800584c <_printf_common+0xac>
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584c:	3501      	adds	r5, #1
 800584e:	e7c6      	b.n	80057de <_printf_common+0x3e>
 8005850:	18e1      	adds	r1, r4, r3
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	2030      	movs	r0, #48	@ 0x30
 8005856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800585a:	4422      	add	r2, r4
 800585c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005864:	3302      	adds	r3, #2
 8005866:	e7c7      	b.n	80057f8 <_printf_common+0x58>
 8005868:	2301      	movs	r3, #1
 800586a:	4622      	mov	r2, r4
 800586c:	4641      	mov	r1, r8
 800586e:	4638      	mov	r0, r7
 8005870:	47c8      	blx	r9
 8005872:	3001      	adds	r0, #1
 8005874:	d0e6      	beq.n	8005844 <_printf_common+0xa4>
 8005876:	3601      	adds	r6, #1
 8005878:	e7d9      	b.n	800582e <_printf_common+0x8e>
	...

0800587c <_printf_i>:
 800587c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005880:	7e0f      	ldrb	r7, [r1, #24]
 8005882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005884:	2f78      	cmp	r7, #120	@ 0x78
 8005886:	4691      	mov	r9, r2
 8005888:	4680      	mov	r8, r0
 800588a:	460c      	mov	r4, r1
 800588c:	469a      	mov	sl, r3
 800588e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005892:	d807      	bhi.n	80058a4 <_printf_i+0x28>
 8005894:	2f62      	cmp	r7, #98	@ 0x62
 8005896:	d80a      	bhi.n	80058ae <_printf_i+0x32>
 8005898:	2f00      	cmp	r7, #0
 800589a:	f000 80d1 	beq.w	8005a40 <_printf_i+0x1c4>
 800589e:	2f58      	cmp	r7, #88	@ 0x58
 80058a0:	f000 80b8 	beq.w	8005a14 <_printf_i+0x198>
 80058a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058ac:	e03a      	b.n	8005924 <_printf_i+0xa8>
 80058ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058b2:	2b15      	cmp	r3, #21
 80058b4:	d8f6      	bhi.n	80058a4 <_printf_i+0x28>
 80058b6:	a101      	add	r1, pc, #4	@ (adr r1, 80058bc <_printf_i+0x40>)
 80058b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058bc:	08005915 	.word	0x08005915
 80058c0:	08005929 	.word	0x08005929
 80058c4:	080058a5 	.word	0x080058a5
 80058c8:	080058a5 	.word	0x080058a5
 80058cc:	080058a5 	.word	0x080058a5
 80058d0:	080058a5 	.word	0x080058a5
 80058d4:	08005929 	.word	0x08005929
 80058d8:	080058a5 	.word	0x080058a5
 80058dc:	080058a5 	.word	0x080058a5
 80058e0:	080058a5 	.word	0x080058a5
 80058e4:	080058a5 	.word	0x080058a5
 80058e8:	08005a27 	.word	0x08005a27
 80058ec:	08005953 	.word	0x08005953
 80058f0:	080059e1 	.word	0x080059e1
 80058f4:	080058a5 	.word	0x080058a5
 80058f8:	080058a5 	.word	0x080058a5
 80058fc:	08005a49 	.word	0x08005a49
 8005900:	080058a5 	.word	0x080058a5
 8005904:	08005953 	.word	0x08005953
 8005908:	080058a5 	.word	0x080058a5
 800590c:	080058a5 	.word	0x080058a5
 8005910:	080059e9 	.word	0x080059e9
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6032      	str	r2, [r6, #0]
 800591c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005924:	2301      	movs	r3, #1
 8005926:	e09c      	b.n	8005a62 <_printf_i+0x1e6>
 8005928:	6833      	ldr	r3, [r6, #0]
 800592a:	6820      	ldr	r0, [r4, #0]
 800592c:	1d19      	adds	r1, r3, #4
 800592e:	6031      	str	r1, [r6, #0]
 8005930:	0606      	lsls	r6, r0, #24
 8005932:	d501      	bpl.n	8005938 <_printf_i+0xbc>
 8005934:	681d      	ldr	r5, [r3, #0]
 8005936:	e003      	b.n	8005940 <_printf_i+0xc4>
 8005938:	0645      	lsls	r5, r0, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0xb8>
 800593c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005940:	2d00      	cmp	r5, #0
 8005942:	da03      	bge.n	800594c <_printf_i+0xd0>
 8005944:	232d      	movs	r3, #45	@ 0x2d
 8005946:	426d      	negs	r5, r5
 8005948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800594c:	4858      	ldr	r0, [pc, #352]	@ (8005ab0 <_printf_i+0x234>)
 800594e:	230a      	movs	r3, #10
 8005950:	e011      	b.n	8005976 <_printf_i+0xfa>
 8005952:	6821      	ldr	r1, [r4, #0]
 8005954:	6833      	ldr	r3, [r6, #0]
 8005956:	0608      	lsls	r0, r1, #24
 8005958:	f853 5b04 	ldr.w	r5, [r3], #4
 800595c:	d402      	bmi.n	8005964 <_printf_i+0xe8>
 800595e:	0649      	lsls	r1, r1, #25
 8005960:	bf48      	it	mi
 8005962:	b2ad      	uxthmi	r5, r5
 8005964:	2f6f      	cmp	r7, #111	@ 0x6f
 8005966:	4852      	ldr	r0, [pc, #328]	@ (8005ab0 <_printf_i+0x234>)
 8005968:	6033      	str	r3, [r6, #0]
 800596a:	bf14      	ite	ne
 800596c:	230a      	movne	r3, #10
 800596e:	2308      	moveq	r3, #8
 8005970:	2100      	movs	r1, #0
 8005972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005976:	6866      	ldr	r6, [r4, #4]
 8005978:	60a6      	str	r6, [r4, #8]
 800597a:	2e00      	cmp	r6, #0
 800597c:	db05      	blt.n	800598a <_printf_i+0x10e>
 800597e:	6821      	ldr	r1, [r4, #0]
 8005980:	432e      	orrs	r6, r5
 8005982:	f021 0104 	bic.w	r1, r1, #4
 8005986:	6021      	str	r1, [r4, #0]
 8005988:	d04b      	beq.n	8005a22 <_printf_i+0x1a6>
 800598a:	4616      	mov	r6, r2
 800598c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005990:	fb03 5711 	mls	r7, r3, r1, r5
 8005994:	5dc7      	ldrb	r7, [r0, r7]
 8005996:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800599a:	462f      	mov	r7, r5
 800599c:	42bb      	cmp	r3, r7
 800599e:	460d      	mov	r5, r1
 80059a0:	d9f4      	bls.n	800598c <_printf_i+0x110>
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d10b      	bne.n	80059be <_printf_i+0x142>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	07df      	lsls	r7, r3, #31
 80059aa:	d508      	bpl.n	80059be <_printf_i+0x142>
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	6861      	ldr	r1, [r4, #4]
 80059b0:	4299      	cmp	r1, r3
 80059b2:	bfde      	ittt	le
 80059b4:	2330      	movle	r3, #48	@ 0x30
 80059b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059be:	1b92      	subs	r2, r2, r6
 80059c0:	6122      	str	r2, [r4, #16]
 80059c2:	f8cd a000 	str.w	sl, [sp]
 80059c6:	464b      	mov	r3, r9
 80059c8:	aa03      	add	r2, sp, #12
 80059ca:	4621      	mov	r1, r4
 80059cc:	4640      	mov	r0, r8
 80059ce:	f7ff fee7 	bl	80057a0 <_printf_common>
 80059d2:	3001      	adds	r0, #1
 80059d4:	d14a      	bne.n	8005a6c <_printf_i+0x1f0>
 80059d6:	f04f 30ff 	mov.w	r0, #4294967295
 80059da:	b004      	add	sp, #16
 80059dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	f043 0320 	orr.w	r3, r3, #32
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	4832      	ldr	r0, [pc, #200]	@ (8005ab4 <_printf_i+0x238>)
 80059ea:	2778      	movs	r7, #120	@ 0x78
 80059ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	6831      	ldr	r1, [r6, #0]
 80059f4:	061f      	lsls	r7, r3, #24
 80059f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80059fa:	d402      	bmi.n	8005a02 <_printf_i+0x186>
 80059fc:	065f      	lsls	r7, r3, #25
 80059fe:	bf48      	it	mi
 8005a00:	b2ad      	uxthmi	r5, r5
 8005a02:	6031      	str	r1, [r6, #0]
 8005a04:	07d9      	lsls	r1, r3, #31
 8005a06:	bf44      	itt	mi
 8005a08:	f043 0320 	orrmi.w	r3, r3, #32
 8005a0c:	6023      	strmi	r3, [r4, #0]
 8005a0e:	b11d      	cbz	r5, 8005a18 <_printf_i+0x19c>
 8005a10:	2310      	movs	r3, #16
 8005a12:	e7ad      	b.n	8005970 <_printf_i+0xf4>
 8005a14:	4826      	ldr	r0, [pc, #152]	@ (8005ab0 <_printf_i+0x234>)
 8005a16:	e7e9      	b.n	80059ec <_printf_i+0x170>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	f023 0320 	bic.w	r3, r3, #32
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	e7f6      	b.n	8005a10 <_printf_i+0x194>
 8005a22:	4616      	mov	r6, r2
 8005a24:	e7bd      	b.n	80059a2 <_printf_i+0x126>
 8005a26:	6833      	ldr	r3, [r6, #0]
 8005a28:	6825      	ldr	r5, [r4, #0]
 8005a2a:	6961      	ldr	r1, [r4, #20]
 8005a2c:	1d18      	adds	r0, r3, #4
 8005a2e:	6030      	str	r0, [r6, #0]
 8005a30:	062e      	lsls	r6, r5, #24
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	d501      	bpl.n	8005a3a <_printf_i+0x1be>
 8005a36:	6019      	str	r1, [r3, #0]
 8005a38:	e002      	b.n	8005a40 <_printf_i+0x1c4>
 8005a3a:	0668      	lsls	r0, r5, #25
 8005a3c:	d5fb      	bpl.n	8005a36 <_printf_i+0x1ba>
 8005a3e:	8019      	strh	r1, [r3, #0]
 8005a40:	2300      	movs	r3, #0
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	4616      	mov	r6, r2
 8005a46:	e7bc      	b.n	80059c2 <_printf_i+0x146>
 8005a48:	6833      	ldr	r3, [r6, #0]
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	6032      	str	r2, [r6, #0]
 8005a4e:	681e      	ldr	r6, [r3, #0]
 8005a50:	6862      	ldr	r2, [r4, #4]
 8005a52:	2100      	movs	r1, #0
 8005a54:	4630      	mov	r0, r6
 8005a56:	f7fa fbbb 	bl	80001d0 <memchr>
 8005a5a:	b108      	cbz	r0, 8005a60 <_printf_i+0x1e4>
 8005a5c:	1b80      	subs	r0, r0, r6
 8005a5e:	6060      	str	r0, [r4, #4]
 8005a60:	6863      	ldr	r3, [r4, #4]
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	2300      	movs	r3, #0
 8005a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a6a:	e7aa      	b.n	80059c2 <_printf_i+0x146>
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	4632      	mov	r2, r6
 8005a70:	4649      	mov	r1, r9
 8005a72:	4640      	mov	r0, r8
 8005a74:	47d0      	blx	sl
 8005a76:	3001      	adds	r0, #1
 8005a78:	d0ad      	beq.n	80059d6 <_printf_i+0x15a>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	079b      	lsls	r3, r3, #30
 8005a7e:	d413      	bmi.n	8005aa8 <_printf_i+0x22c>
 8005a80:	68e0      	ldr	r0, [r4, #12]
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	4298      	cmp	r0, r3
 8005a86:	bfb8      	it	lt
 8005a88:	4618      	movlt	r0, r3
 8005a8a:	e7a6      	b.n	80059da <_printf_i+0x15e>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4632      	mov	r2, r6
 8005a90:	4649      	mov	r1, r9
 8005a92:	4640      	mov	r0, r8
 8005a94:	47d0      	blx	sl
 8005a96:	3001      	adds	r0, #1
 8005a98:	d09d      	beq.n	80059d6 <_printf_i+0x15a>
 8005a9a:	3501      	adds	r5, #1
 8005a9c:	68e3      	ldr	r3, [r4, #12]
 8005a9e:	9903      	ldr	r1, [sp, #12]
 8005aa0:	1a5b      	subs	r3, r3, r1
 8005aa2:	42ab      	cmp	r3, r5
 8005aa4:	dcf2      	bgt.n	8005a8c <_printf_i+0x210>
 8005aa6:	e7eb      	b.n	8005a80 <_printf_i+0x204>
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	f104 0619 	add.w	r6, r4, #25
 8005aae:	e7f5      	b.n	8005a9c <_printf_i+0x220>
 8005ab0:	08008026 	.word	0x08008026
 8005ab4:	08008037 	.word	0x08008037

08005ab8 <std>:
 8005ab8:	2300      	movs	r3, #0
 8005aba:	b510      	push	{r4, lr}
 8005abc:	4604      	mov	r4, r0
 8005abe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ac6:	6083      	str	r3, [r0, #8]
 8005ac8:	8181      	strh	r1, [r0, #12]
 8005aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8005acc:	81c2      	strh	r2, [r0, #14]
 8005ace:	6183      	str	r3, [r0, #24]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	305c      	adds	r0, #92	@ 0x5c
 8005ad6:	f000 f92a 	bl	8005d2e <memset>
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <std+0x58>)
 8005adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ade:	4b0d      	ldr	r3, [pc, #52]	@ (8005b14 <std+0x5c>)
 8005ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <std+0x60>)
 8005ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <std+0x64>)
 8005ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <std+0x68>)
 8005aec:	6224      	str	r4, [r4, #32]
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d006      	beq.n	8005b00 <std+0x48>
 8005af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005af6:	4294      	cmp	r4, r2
 8005af8:	d002      	beq.n	8005b00 <std+0x48>
 8005afa:	33d0      	adds	r3, #208	@ 0xd0
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d105      	bne.n	8005b0c <std+0x54>
 8005b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b08:	f000 b98e 	b.w	8005e28 <__retarget_lock_init_recursive>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	bf00      	nop
 8005b10:	08005ca9 	.word	0x08005ca9
 8005b14:	08005ccb 	.word	0x08005ccb
 8005b18:	08005d03 	.word	0x08005d03
 8005b1c:	08005d27 	.word	0x08005d27
 8005b20:	200003e8 	.word	0x200003e8

08005b24 <stdio_exit_handler>:
 8005b24:	4a02      	ldr	r2, [pc, #8]	@ (8005b30 <stdio_exit_handler+0xc>)
 8005b26:	4903      	ldr	r1, [pc, #12]	@ (8005b34 <stdio_exit_handler+0x10>)
 8005b28:	4803      	ldr	r0, [pc, #12]	@ (8005b38 <stdio_exit_handler+0x14>)
 8005b2a:	f000 b869 	b.w	8005c00 <_fwalk_sglue>
 8005b2e:	bf00      	nop
 8005b30:	2000001c 	.word	0x2000001c
 8005b34:	0800778d 	.word	0x0800778d
 8005b38:	2000002c 	.word	0x2000002c

08005b3c <cleanup_stdio>:
 8005b3c:	6841      	ldr	r1, [r0, #4]
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b70 <cleanup_stdio+0x34>)
 8005b40:	4299      	cmp	r1, r3
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	d001      	beq.n	8005b4c <cleanup_stdio+0x10>
 8005b48:	f001 fe20 	bl	800778c <_fflush_r>
 8005b4c:	68a1      	ldr	r1, [r4, #8]
 8005b4e:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <cleanup_stdio+0x38>)
 8005b50:	4299      	cmp	r1, r3
 8005b52:	d002      	beq.n	8005b5a <cleanup_stdio+0x1e>
 8005b54:	4620      	mov	r0, r4
 8005b56:	f001 fe19 	bl	800778c <_fflush_r>
 8005b5a:	68e1      	ldr	r1, [r4, #12]
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <cleanup_stdio+0x3c>)
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	d004      	beq.n	8005b6c <cleanup_stdio+0x30>
 8005b62:	4620      	mov	r0, r4
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	f001 be10 	b.w	800778c <_fflush_r>
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	bf00      	nop
 8005b70:	200003e8 	.word	0x200003e8
 8005b74:	20000450 	.word	0x20000450
 8005b78:	200004b8 	.word	0x200004b8

08005b7c <global_stdio_init.part.0>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <global_stdio_init.part.0+0x30>)
 8005b80:	4c0b      	ldr	r4, [pc, #44]	@ (8005bb0 <global_stdio_init.part.0+0x34>)
 8005b82:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb4 <global_stdio_init.part.0+0x38>)
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	4620      	mov	r0, r4
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	f7ff ff94 	bl	8005ab8 <std>
 8005b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b94:	2201      	movs	r2, #1
 8005b96:	2109      	movs	r1, #9
 8005b98:	f7ff ff8e 	bl	8005ab8 <std>
 8005b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba6:	2112      	movs	r1, #18
 8005ba8:	f7ff bf86 	b.w	8005ab8 <std>
 8005bac:	20000520 	.word	0x20000520
 8005bb0:	200003e8 	.word	0x200003e8
 8005bb4:	08005b25 	.word	0x08005b25

08005bb8 <__sfp_lock_acquire>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	@ (8005bc0 <__sfp_lock_acquire+0x8>)
 8005bba:	f000 b936 	b.w	8005e2a <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	20000529 	.word	0x20000529

08005bc4 <__sfp_lock_release>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__sfp_lock_release+0x8>)
 8005bc6:	f000 b931 	b.w	8005e2c <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20000529 	.word	0x20000529

08005bd0 <__sinit>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	f7ff fff0 	bl	8005bb8 <__sfp_lock_acquire>
 8005bd8:	6a23      	ldr	r3, [r4, #32]
 8005bda:	b11b      	cbz	r3, 8005be4 <__sinit+0x14>
 8005bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be0:	f7ff bff0 	b.w	8005bc4 <__sfp_lock_release>
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <__sinit+0x28>)
 8005be6:	6223      	str	r3, [r4, #32]
 8005be8:	4b04      	ldr	r3, [pc, #16]	@ (8005bfc <__sinit+0x2c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f5      	bne.n	8005bdc <__sinit+0xc>
 8005bf0:	f7ff ffc4 	bl	8005b7c <global_stdio_init.part.0>
 8005bf4:	e7f2      	b.n	8005bdc <__sinit+0xc>
 8005bf6:	bf00      	nop
 8005bf8:	08005b3d 	.word	0x08005b3d
 8005bfc:	20000520 	.word	0x20000520

08005c00 <_fwalk_sglue>:
 8005c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	4607      	mov	r7, r0
 8005c06:	4688      	mov	r8, r1
 8005c08:	4614      	mov	r4, r2
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c10:	f1b9 0901 	subs.w	r9, r9, #1
 8005c14:	d505      	bpl.n	8005c22 <_fwalk_sglue+0x22>
 8005c16:	6824      	ldr	r4, [r4, #0]
 8005c18:	2c00      	cmp	r4, #0
 8005c1a:	d1f7      	bne.n	8005c0c <_fwalk_sglue+0xc>
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d907      	bls.n	8005c38 <_fwalk_sglue+0x38>
 8005c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	d003      	beq.n	8005c38 <_fwalk_sglue+0x38>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	4306      	orrs	r6, r0
 8005c38:	3568      	adds	r5, #104	@ 0x68
 8005c3a:	e7e9      	b.n	8005c10 <_fwalk_sglue+0x10>

08005c3c <sniprintf>:
 8005c3c:	b40c      	push	{r2, r3}
 8005c3e:	b530      	push	{r4, r5, lr}
 8005c40:	4b18      	ldr	r3, [pc, #96]	@ (8005ca4 <sniprintf+0x68>)
 8005c42:	1e0c      	subs	r4, r1, #0
 8005c44:	681d      	ldr	r5, [r3, #0]
 8005c46:	b09d      	sub	sp, #116	@ 0x74
 8005c48:	da08      	bge.n	8005c5c <sniprintf+0x20>
 8005c4a:	238b      	movs	r3, #139	@ 0x8b
 8005c4c:	602b      	str	r3, [r5, #0]
 8005c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c52:	b01d      	add	sp, #116	@ 0x74
 8005c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c58:	b002      	add	sp, #8
 8005c5a:	4770      	bx	lr
 8005c5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005c6a:	bf14      	ite	ne
 8005c6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c70:	4623      	moveq	r3, r4
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	9307      	str	r3, [sp, #28]
 8005c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c7a:	9002      	str	r0, [sp, #8]
 8005c7c:	9006      	str	r0, [sp, #24]
 8005c7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c84:	ab21      	add	r3, sp, #132	@ 0x84
 8005c86:	a902      	add	r1, sp, #8
 8005c88:	4628      	mov	r0, r5
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	f001 fbfe 	bl	800748c <_svfiprintf_r>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	bfbc      	itt	lt
 8005c94:	238b      	movlt	r3, #139	@ 0x8b
 8005c96:	602b      	strlt	r3, [r5, #0]
 8005c98:	2c00      	cmp	r4, #0
 8005c9a:	d0da      	beq.n	8005c52 <sniprintf+0x16>
 8005c9c:	9b02      	ldr	r3, [sp, #8]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e7d6      	b.n	8005c52 <sniprintf+0x16>
 8005ca4:	20000028 	.word	0x20000028

08005ca8 <__sread>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	460c      	mov	r4, r1
 8005cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb0:	f000 f86c 	bl	8005d8c <_read_r>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	bfab      	itete	ge
 8005cb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cba:	89a3      	ldrhlt	r3, [r4, #12]
 8005cbc:	181b      	addge	r3, r3, r0
 8005cbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cc2:	bfac      	ite	ge
 8005cc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cc6:	81a3      	strhlt	r3, [r4, #12]
 8005cc8:	bd10      	pop	{r4, pc}

08005cca <__swrite>:
 8005cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cce:	461f      	mov	r7, r3
 8005cd0:	898b      	ldrh	r3, [r1, #12]
 8005cd2:	05db      	lsls	r3, r3, #23
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	4616      	mov	r6, r2
 8005cda:	d505      	bpl.n	8005ce8 <__swrite+0x1e>
 8005cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f000 f840 	bl	8005d68 <_lseek_r>
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfe:	f000 b857 	b.w	8005db0 <_write_r>

08005d02 <__sseek>:
 8005d02:	b510      	push	{r4, lr}
 8005d04:	460c      	mov	r4, r1
 8005d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d0a:	f000 f82d 	bl	8005d68 <_lseek_r>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	bf15      	itete	ne
 8005d14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d1e:	81a3      	strheq	r3, [r4, #12]
 8005d20:	bf18      	it	ne
 8005d22:	81a3      	strhne	r3, [r4, #12]
 8005d24:	bd10      	pop	{r4, pc}

08005d26 <__sclose>:
 8005d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2a:	f000 b80d 	b.w	8005d48 <_close_r>

08005d2e <memset>:
 8005d2e:	4402      	add	r2, r0
 8005d30:	4603      	mov	r3, r0
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d100      	bne.n	8005d38 <memset+0xa>
 8005d36:	4770      	bx	lr
 8005d38:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3c:	e7f9      	b.n	8005d32 <memset+0x4>
	...

08005d40 <_localeconv_r>:
 8005d40:	4800      	ldr	r0, [pc, #0]	@ (8005d44 <_localeconv_r+0x4>)
 8005d42:	4770      	bx	lr
 8005d44:	20000168 	.word	0x20000168

08005d48 <_close_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d06      	ldr	r5, [pc, #24]	@ (8005d64 <_close_r+0x1c>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f7fb ff4c 	bl	8001bf0 <_close>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_close_r+0x1a>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_close_r+0x1a>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000524 	.word	0x20000524

08005d68 <_lseek_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d07      	ldr	r5, [pc, #28]	@ (8005d88 <_lseek_r+0x20>)
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4608      	mov	r0, r1
 8005d70:	4611      	mov	r1, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	602a      	str	r2, [r5, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f7fb ff61 	bl	8001c3e <_lseek>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_lseek_r+0x1e>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_lseek_r+0x1e>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000524 	.word	0x20000524

08005d8c <_read_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d07      	ldr	r5, [pc, #28]	@ (8005dac <_read_r+0x20>)
 8005d90:	4604      	mov	r4, r0
 8005d92:	4608      	mov	r0, r1
 8005d94:	4611      	mov	r1, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f7fb feef 	bl	8001b7e <_read>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_read_r+0x1e>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_read_r+0x1e>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	20000524 	.word	0x20000524

08005db0 <_write_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	@ (8005dd0 <_write_r+0x20>)
 8005db4:	4604      	mov	r4, r0
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fb fefa 	bl	8001bb8 <_write>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_write_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_write_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000524 	.word	0x20000524

08005dd4 <__errno>:
 8005dd4:	4b01      	ldr	r3, [pc, #4]	@ (8005ddc <__errno+0x8>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000028 	.word	0x20000028

08005de0 <__libc_init_array>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4d0d      	ldr	r5, [pc, #52]	@ (8005e18 <__libc_init_array+0x38>)
 8005de4:	4c0d      	ldr	r4, [pc, #52]	@ (8005e1c <__libc_init_array+0x3c>)
 8005de6:	1b64      	subs	r4, r4, r5
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	2600      	movs	r6, #0
 8005dec:	42a6      	cmp	r6, r4
 8005dee:	d109      	bne.n	8005e04 <__libc_init_array+0x24>
 8005df0:	4d0b      	ldr	r5, [pc, #44]	@ (8005e20 <__libc_init_array+0x40>)
 8005df2:	4c0c      	ldr	r4, [pc, #48]	@ (8005e24 <__libc_init_array+0x44>)
 8005df4:	f002 f868 	bl	8007ec8 <_init>
 8005df8:	1b64      	subs	r4, r4, r5
 8005dfa:	10a4      	asrs	r4, r4, #2
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	d105      	bne.n	8005e0e <__libc_init_array+0x2e>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e08:	4798      	blx	r3
 8005e0a:	3601      	adds	r6, #1
 8005e0c:	e7ee      	b.n	8005dec <__libc_init_array+0xc>
 8005e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e12:	4798      	blx	r3
 8005e14:	3601      	adds	r6, #1
 8005e16:	e7f2      	b.n	8005dfe <__libc_init_array+0x1e>
 8005e18:	08008394 	.word	0x08008394
 8005e1c:	08008394 	.word	0x08008394
 8005e20:	08008394 	.word	0x08008394
 8005e24:	08008398 	.word	0x08008398

08005e28 <__retarget_lock_init_recursive>:
 8005e28:	4770      	bx	lr

08005e2a <__retarget_lock_acquire_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <__retarget_lock_release_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <quorem>:
 8005e2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e32:	6903      	ldr	r3, [r0, #16]
 8005e34:	690c      	ldr	r4, [r1, #16]
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	4607      	mov	r7, r0
 8005e3a:	db7e      	blt.n	8005f3a <quorem+0x10c>
 8005e3c:	3c01      	subs	r4, #1
 8005e3e:	f101 0814 	add.w	r8, r1, #20
 8005e42:	00a3      	lsls	r3, r4, #2
 8005e44:	f100 0514 	add.w	r5, r0, #20
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e60:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e64:	d32e      	bcc.n	8005ec4 <quorem+0x96>
 8005e66:	f04f 0a00 	mov.w	sl, #0
 8005e6a:	46c4      	mov	ip, r8
 8005e6c:	46ae      	mov	lr, r5
 8005e6e:	46d3      	mov	fp, sl
 8005e70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e74:	b298      	uxth	r0, r3
 8005e76:	fb06 a000 	mla	r0, r6, r0, sl
 8005e7a:	0c02      	lsrs	r2, r0, #16
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	fb06 2303 	mla	r3, r6, r3, r2
 8005e82:	f8de 2000 	ldr.w	r2, [lr]
 8005e86:	b280      	uxth	r0, r0
 8005e88:	b292      	uxth	r2, r2
 8005e8a:	1a12      	subs	r2, r2, r0
 8005e8c:	445a      	add	r2, fp
 8005e8e:	f8de 0000 	ldr.w	r0, [lr]
 8005e92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ea0:	b292      	uxth	r2, r2
 8005ea2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ea6:	45e1      	cmp	r9, ip
 8005ea8:	f84e 2b04 	str.w	r2, [lr], #4
 8005eac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005eb0:	d2de      	bcs.n	8005e70 <quorem+0x42>
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	58eb      	ldr	r3, [r5, r3]
 8005eb6:	b92b      	cbnz	r3, 8005ec4 <quorem+0x96>
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	3b04      	subs	r3, #4
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	d32f      	bcc.n	8005f22 <quorem+0xf4>
 8005ec2:	613c      	str	r4, [r7, #16]
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f001 f97d 	bl	80071c4 <__mcmp>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	db25      	blt.n	8005f1a <quorem+0xec>
 8005ece:	4629      	mov	r1, r5
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ed6:	f8d1 c000 	ldr.w	ip, [r1]
 8005eda:	fa1f fe82 	uxth.w	lr, r2
 8005ede:	fa1f f38c 	uxth.w	r3, ip
 8005ee2:	eba3 030e 	sub.w	r3, r3, lr
 8005ee6:	4403      	add	r3, r0
 8005ee8:	0c12      	lsrs	r2, r2, #16
 8005eea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005eee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ef8:	45c1      	cmp	r9, r8
 8005efa:	f841 3b04 	str.w	r3, [r1], #4
 8005efe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f02:	d2e6      	bcs.n	8005ed2 <quorem+0xa4>
 8005f04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f0c:	b922      	cbnz	r2, 8005f18 <quorem+0xea>
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	429d      	cmp	r5, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	d30b      	bcc.n	8005f2e <quorem+0x100>
 8005f16:	613c      	str	r4, [r7, #16]
 8005f18:	3601      	adds	r6, #1
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	b003      	add	sp, #12
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	3b04      	subs	r3, #4
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	d1cb      	bne.n	8005ec2 <quorem+0x94>
 8005f2a:	3c01      	subs	r4, #1
 8005f2c:	e7c6      	b.n	8005ebc <quorem+0x8e>
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	d1ef      	bne.n	8005f16 <quorem+0xe8>
 8005f36:	3c01      	subs	r4, #1
 8005f38:	e7ea      	b.n	8005f10 <quorem+0xe2>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e7ee      	b.n	8005f1c <quorem+0xee>
	...

08005f40 <_dtoa_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	69c7      	ldr	r7, [r0, #28]
 8005f46:	b097      	sub	sp, #92	@ 0x5c
 8005f48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005f4c:	ec55 4b10 	vmov	r4, r5, d0
 8005f50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005f52:	9107      	str	r1, [sp, #28]
 8005f54:	4681      	mov	r9, r0
 8005f56:	920c      	str	r2, [sp, #48]	@ 0x30
 8005f58:	9311      	str	r3, [sp, #68]	@ 0x44
 8005f5a:	b97f      	cbnz	r7, 8005f7c <_dtoa_r+0x3c>
 8005f5c:	2010      	movs	r0, #16
 8005f5e:	f000 fe09 	bl	8006b74 <malloc>
 8005f62:	4602      	mov	r2, r0
 8005f64:	f8c9 001c 	str.w	r0, [r9, #28]
 8005f68:	b920      	cbnz	r0, 8005f74 <_dtoa_r+0x34>
 8005f6a:	4ba9      	ldr	r3, [pc, #676]	@ (8006210 <_dtoa_r+0x2d0>)
 8005f6c:	21ef      	movs	r1, #239	@ 0xef
 8005f6e:	48a9      	ldr	r0, [pc, #676]	@ (8006214 <_dtoa_r+0x2d4>)
 8005f70:	f001 fc6c 	bl	800784c <__assert_func>
 8005f74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f78:	6007      	str	r7, [r0, #0]
 8005f7a:	60c7      	str	r7, [r0, #12]
 8005f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f80:	6819      	ldr	r1, [r3, #0]
 8005f82:	b159      	cbz	r1, 8005f9c <_dtoa_r+0x5c>
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	604a      	str	r2, [r1, #4]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4093      	lsls	r3, r2
 8005f8c:	608b      	str	r3, [r1, #8]
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f000 fee6 	bl	8006d60 <_Bfree>
 8005f94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	1e2b      	subs	r3, r5, #0
 8005f9e:	bfb9      	ittee	lt
 8005fa0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005fa4:	9305      	strlt	r3, [sp, #20]
 8005fa6:	2300      	movge	r3, #0
 8005fa8:	6033      	strge	r3, [r6, #0]
 8005faa:	9f05      	ldr	r7, [sp, #20]
 8005fac:	4b9a      	ldr	r3, [pc, #616]	@ (8006218 <_dtoa_r+0x2d8>)
 8005fae:	bfbc      	itt	lt
 8005fb0:	2201      	movlt	r2, #1
 8005fb2:	6032      	strlt	r2, [r6, #0]
 8005fb4:	43bb      	bics	r3, r7
 8005fb6:	d112      	bne.n	8005fde <_dtoa_r+0x9e>
 8005fb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005fba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fc4:	4323      	orrs	r3, r4
 8005fc6:	f000 855a 	beq.w	8006a7e <_dtoa_r+0xb3e>
 8005fca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fcc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800622c <_dtoa_r+0x2ec>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 855c 	beq.w	8006a8e <_dtoa_r+0xb4e>
 8005fd6:	f10a 0303 	add.w	r3, sl, #3
 8005fda:	f000 bd56 	b.w	8006a8a <_dtoa_r+0xb4a>
 8005fde:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	ec51 0b17 	vmov	r0, r1, d7
 8005fe8:	2300      	movs	r3, #0
 8005fea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005fee:	f7fa fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ff2:	4680      	mov	r8, r0
 8005ff4:	b158      	cbz	r0, 800600e <_dtoa_r+0xce>
 8005ff6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ffe:	b113      	cbz	r3, 8006006 <_dtoa_r+0xc6>
 8006000:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006002:	4b86      	ldr	r3, [pc, #536]	@ (800621c <_dtoa_r+0x2dc>)
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006230 <_dtoa_r+0x2f0>
 800600a:	f000 bd40 	b.w	8006a8e <_dtoa_r+0xb4e>
 800600e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006012:	aa14      	add	r2, sp, #80	@ 0x50
 8006014:	a915      	add	r1, sp, #84	@ 0x54
 8006016:	4648      	mov	r0, r9
 8006018:	f001 f984 	bl	8007324 <__d2b>
 800601c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006020:	9002      	str	r0, [sp, #8]
 8006022:	2e00      	cmp	r6, #0
 8006024:	d078      	beq.n	8006118 <_dtoa_r+0x1d8>
 8006026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006028:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800602c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006034:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006038:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800603c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006040:	4619      	mov	r1, r3
 8006042:	2200      	movs	r2, #0
 8006044:	4b76      	ldr	r3, [pc, #472]	@ (8006220 <_dtoa_r+0x2e0>)
 8006046:	f7fa f91f 	bl	8000288 <__aeabi_dsub>
 800604a:	a36b      	add	r3, pc, #428	@ (adr r3, 80061f8 <_dtoa_r+0x2b8>)
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f7fa fad2 	bl	80005f8 <__aeabi_dmul>
 8006054:	a36a      	add	r3, pc, #424	@ (adr r3, 8006200 <_dtoa_r+0x2c0>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f917 	bl	800028c <__adddf3>
 800605e:	4604      	mov	r4, r0
 8006060:	4630      	mov	r0, r6
 8006062:	460d      	mov	r5, r1
 8006064:	f7fa fa5e 	bl	8000524 <__aeabi_i2d>
 8006068:	a367      	add	r3, pc, #412	@ (adr r3, 8006208 <_dtoa_r+0x2c8>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fac3 	bl	80005f8 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa f907 	bl	800028c <__adddf3>
 800607e:	4604      	mov	r4, r0
 8006080:	460d      	mov	r5, r1
 8006082:	f7fa fd69 	bl	8000b58 <__aeabi_d2iz>
 8006086:	2200      	movs	r2, #0
 8006088:	4607      	mov	r7, r0
 800608a:	2300      	movs	r3, #0
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	f7fa fd24 	bl	8000adc <__aeabi_dcmplt>
 8006094:	b140      	cbz	r0, 80060a8 <_dtoa_r+0x168>
 8006096:	4638      	mov	r0, r7
 8006098:	f7fa fa44 	bl	8000524 <__aeabi_i2d>
 800609c:	4622      	mov	r2, r4
 800609e:	462b      	mov	r3, r5
 80060a0:	f7fa fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a4:	b900      	cbnz	r0, 80060a8 <_dtoa_r+0x168>
 80060a6:	3f01      	subs	r7, #1
 80060a8:	2f16      	cmp	r7, #22
 80060aa:	d852      	bhi.n	8006152 <_dtoa_r+0x212>
 80060ac:	4b5d      	ldr	r3, [pc, #372]	@ (8006224 <_dtoa_r+0x2e4>)
 80060ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060ba:	f7fa fd0f 	bl	8000adc <__aeabi_dcmplt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d049      	beq.n	8006156 <_dtoa_r+0x216>
 80060c2:	3f01      	subs	r7, #1
 80060c4:	2300      	movs	r3, #0
 80060c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80060c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060ca:	1b9b      	subs	r3, r3, r6
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	bf45      	ittet	mi
 80060d0:	f1c3 0301 	rsbmi	r3, r3, #1
 80060d4:	9300      	strmi	r3, [sp, #0]
 80060d6:	2300      	movpl	r3, #0
 80060d8:	2300      	movmi	r3, #0
 80060da:	9206      	str	r2, [sp, #24]
 80060dc:	bf54      	ite	pl
 80060de:	9300      	strpl	r3, [sp, #0]
 80060e0:	9306      	strmi	r3, [sp, #24]
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	db39      	blt.n	800615a <_dtoa_r+0x21a>
 80060e6:	9b06      	ldr	r3, [sp, #24]
 80060e8:	970d      	str	r7, [sp, #52]	@ 0x34
 80060ea:	443b      	add	r3, r7
 80060ec:	9306      	str	r3, [sp, #24]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9308      	str	r3, [sp, #32]
 80060f2:	9b07      	ldr	r3, [sp, #28]
 80060f4:	2b09      	cmp	r3, #9
 80060f6:	d863      	bhi.n	80061c0 <_dtoa_r+0x280>
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	bfc4      	itt	gt
 80060fc:	3b04      	subgt	r3, #4
 80060fe:	9307      	strgt	r3, [sp, #28]
 8006100:	9b07      	ldr	r3, [sp, #28]
 8006102:	f1a3 0302 	sub.w	r3, r3, #2
 8006106:	bfcc      	ite	gt
 8006108:	2400      	movgt	r4, #0
 800610a:	2401      	movle	r4, #1
 800610c:	2b03      	cmp	r3, #3
 800610e:	d863      	bhi.n	80061d8 <_dtoa_r+0x298>
 8006110:	e8df f003 	tbb	[pc, r3]
 8006114:	2b375452 	.word	0x2b375452
 8006118:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800611c:	441e      	add	r6, r3
 800611e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006122:	2b20      	cmp	r3, #32
 8006124:	bfc1      	itttt	gt
 8006126:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800612a:	409f      	lslgt	r7, r3
 800612c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006130:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006134:	bfd6      	itet	le
 8006136:	f1c3 0320 	rsble	r3, r3, #32
 800613a:	ea47 0003 	orrgt.w	r0, r7, r3
 800613e:	fa04 f003 	lslle.w	r0, r4, r3
 8006142:	f7fa f9df 	bl	8000504 <__aeabi_ui2d>
 8006146:	2201      	movs	r2, #1
 8006148:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800614c:	3e01      	subs	r6, #1
 800614e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006150:	e776      	b.n	8006040 <_dtoa_r+0x100>
 8006152:	2301      	movs	r3, #1
 8006154:	e7b7      	b.n	80060c6 <_dtoa_r+0x186>
 8006156:	9010      	str	r0, [sp, #64]	@ 0x40
 8006158:	e7b6      	b.n	80060c8 <_dtoa_r+0x188>
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	1bdb      	subs	r3, r3, r7
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	427b      	negs	r3, r7
 8006162:	9308      	str	r3, [sp, #32]
 8006164:	2300      	movs	r3, #0
 8006166:	930d      	str	r3, [sp, #52]	@ 0x34
 8006168:	e7c3      	b.n	80060f2 <_dtoa_r+0x1b2>
 800616a:	2301      	movs	r3, #1
 800616c:	9309      	str	r3, [sp, #36]	@ 0x24
 800616e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006170:	eb07 0b03 	add.w	fp, r7, r3
 8006174:	f10b 0301 	add.w	r3, fp, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	9303      	str	r3, [sp, #12]
 800617c:	bfb8      	it	lt
 800617e:	2301      	movlt	r3, #1
 8006180:	e006      	b.n	8006190 <_dtoa_r+0x250>
 8006182:	2301      	movs	r3, #1
 8006184:	9309      	str	r3, [sp, #36]	@ 0x24
 8006186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	dd28      	ble.n	80061de <_dtoa_r+0x29e>
 800618c:	469b      	mov	fp, r3
 800618e:	9303      	str	r3, [sp, #12]
 8006190:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006194:	2100      	movs	r1, #0
 8006196:	2204      	movs	r2, #4
 8006198:	f102 0514 	add.w	r5, r2, #20
 800619c:	429d      	cmp	r5, r3
 800619e:	d926      	bls.n	80061ee <_dtoa_r+0x2ae>
 80061a0:	6041      	str	r1, [r0, #4]
 80061a2:	4648      	mov	r0, r9
 80061a4:	f000 fd9c 	bl	8006ce0 <_Balloc>
 80061a8:	4682      	mov	sl, r0
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d142      	bne.n	8006234 <_dtoa_r+0x2f4>
 80061ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006228 <_dtoa_r+0x2e8>)
 80061b0:	4602      	mov	r2, r0
 80061b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80061b6:	e6da      	b.n	8005f6e <_dtoa_r+0x2e>
 80061b8:	2300      	movs	r3, #0
 80061ba:	e7e3      	b.n	8006184 <_dtoa_r+0x244>
 80061bc:	2300      	movs	r3, #0
 80061be:	e7d5      	b.n	800616c <_dtoa_r+0x22c>
 80061c0:	2401      	movs	r4, #1
 80061c2:	2300      	movs	r3, #0
 80061c4:	9307      	str	r3, [sp, #28]
 80061c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80061c8:	f04f 3bff 	mov.w	fp, #4294967295
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80061d2:	2312      	movs	r3, #18
 80061d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80061d6:	e7db      	b.n	8006190 <_dtoa_r+0x250>
 80061d8:	2301      	movs	r3, #1
 80061da:	9309      	str	r3, [sp, #36]	@ 0x24
 80061dc:	e7f4      	b.n	80061c8 <_dtoa_r+0x288>
 80061de:	f04f 0b01 	mov.w	fp, #1
 80061e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80061e6:	465b      	mov	r3, fp
 80061e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80061ec:	e7d0      	b.n	8006190 <_dtoa_r+0x250>
 80061ee:	3101      	adds	r1, #1
 80061f0:	0052      	lsls	r2, r2, #1
 80061f2:	e7d1      	b.n	8006198 <_dtoa_r+0x258>
 80061f4:	f3af 8000 	nop.w
 80061f8:	636f4361 	.word	0x636f4361
 80061fc:	3fd287a7 	.word	0x3fd287a7
 8006200:	8b60c8b3 	.word	0x8b60c8b3
 8006204:	3fc68a28 	.word	0x3fc68a28
 8006208:	509f79fb 	.word	0x509f79fb
 800620c:	3fd34413 	.word	0x3fd34413
 8006210:	08008055 	.word	0x08008055
 8006214:	0800806c 	.word	0x0800806c
 8006218:	7ff00000 	.word	0x7ff00000
 800621c:	08008025 	.word	0x08008025
 8006220:	3ff80000 	.word	0x3ff80000
 8006224:	080081c0 	.word	0x080081c0
 8006228:	080080c4 	.word	0x080080c4
 800622c:	08008051 	.word	0x08008051
 8006230:	08008024 	.word	0x08008024
 8006234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006238:	6018      	str	r0, [r3, #0]
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	2b0e      	cmp	r3, #14
 800623e:	f200 80a1 	bhi.w	8006384 <_dtoa_r+0x444>
 8006242:	2c00      	cmp	r4, #0
 8006244:	f000 809e 	beq.w	8006384 <_dtoa_r+0x444>
 8006248:	2f00      	cmp	r7, #0
 800624a:	dd33      	ble.n	80062b4 <_dtoa_r+0x374>
 800624c:	4b9c      	ldr	r3, [pc, #624]	@ (80064c0 <_dtoa_r+0x580>)
 800624e:	f007 020f 	and.w	r2, r7, #15
 8006252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006256:	ed93 7b00 	vldr	d7, [r3]
 800625a:	05f8      	lsls	r0, r7, #23
 800625c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006260:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006264:	d516      	bpl.n	8006294 <_dtoa_r+0x354>
 8006266:	4b97      	ldr	r3, [pc, #604]	@ (80064c4 <_dtoa_r+0x584>)
 8006268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800626c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006270:	f7fa faec 	bl	800084c <__aeabi_ddiv>
 8006274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006278:	f004 040f 	and.w	r4, r4, #15
 800627c:	2603      	movs	r6, #3
 800627e:	4d91      	ldr	r5, [pc, #580]	@ (80064c4 <_dtoa_r+0x584>)
 8006280:	b954      	cbnz	r4, 8006298 <_dtoa_r+0x358>
 8006282:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800628a:	f7fa fadf 	bl	800084c <__aeabi_ddiv>
 800628e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006292:	e028      	b.n	80062e6 <_dtoa_r+0x3a6>
 8006294:	2602      	movs	r6, #2
 8006296:	e7f2      	b.n	800627e <_dtoa_r+0x33e>
 8006298:	07e1      	lsls	r1, r4, #31
 800629a:	d508      	bpl.n	80062ae <_dtoa_r+0x36e>
 800629c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80062a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062a4:	f7fa f9a8 	bl	80005f8 <__aeabi_dmul>
 80062a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80062ac:	3601      	adds	r6, #1
 80062ae:	1064      	asrs	r4, r4, #1
 80062b0:	3508      	adds	r5, #8
 80062b2:	e7e5      	b.n	8006280 <_dtoa_r+0x340>
 80062b4:	f000 80af 	beq.w	8006416 <_dtoa_r+0x4d6>
 80062b8:	427c      	negs	r4, r7
 80062ba:	4b81      	ldr	r3, [pc, #516]	@ (80064c0 <_dtoa_r+0x580>)
 80062bc:	4d81      	ldr	r5, [pc, #516]	@ (80064c4 <_dtoa_r+0x584>)
 80062be:	f004 020f 	and.w	r2, r4, #15
 80062c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062ce:	f7fa f993 	bl	80005f8 <__aeabi_dmul>
 80062d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062d6:	1124      	asrs	r4, r4, #4
 80062d8:	2300      	movs	r3, #0
 80062da:	2602      	movs	r6, #2
 80062dc:	2c00      	cmp	r4, #0
 80062de:	f040 808f 	bne.w	8006400 <_dtoa_r+0x4c0>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1d3      	bne.n	800628e <_dtoa_r+0x34e>
 80062e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8094 	beq.w	800641a <_dtoa_r+0x4da>
 80062f2:	4b75      	ldr	r3, [pc, #468]	@ (80064c8 <_dtoa_r+0x588>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7fa fbef 	bl	8000adc <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	f000 808b 	beq.w	800641a <_dtoa_r+0x4da>
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8087 	beq.w	800641a <_dtoa_r+0x4da>
 800630c:	f1bb 0f00 	cmp.w	fp, #0
 8006310:	dd34      	ble.n	800637c <_dtoa_r+0x43c>
 8006312:	4620      	mov	r0, r4
 8006314:	4b6d      	ldr	r3, [pc, #436]	@ (80064cc <_dtoa_r+0x58c>)
 8006316:	2200      	movs	r2, #0
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa f96d 	bl	80005f8 <__aeabi_dmul>
 800631e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006322:	f107 38ff 	add.w	r8, r7, #4294967295
 8006326:	3601      	adds	r6, #1
 8006328:	465c      	mov	r4, fp
 800632a:	4630      	mov	r0, r6
 800632c:	f7fa f8fa 	bl	8000524 <__aeabi_i2d>
 8006330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006334:	f7fa f960 	bl	80005f8 <__aeabi_dmul>
 8006338:	4b65      	ldr	r3, [pc, #404]	@ (80064d0 <_dtoa_r+0x590>)
 800633a:	2200      	movs	r2, #0
 800633c:	f7f9 ffa6 	bl	800028c <__adddf3>
 8006340:	4605      	mov	r5, r0
 8006342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006346:	2c00      	cmp	r4, #0
 8006348:	d16a      	bne.n	8006420 <_dtoa_r+0x4e0>
 800634a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800634e:	4b61      	ldr	r3, [pc, #388]	@ (80064d4 <_dtoa_r+0x594>)
 8006350:	2200      	movs	r2, #0
 8006352:	f7f9 ff99 	bl	8000288 <__aeabi_dsub>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800635e:	462a      	mov	r2, r5
 8006360:	4633      	mov	r3, r6
 8006362:	f7fa fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 8006366:	2800      	cmp	r0, #0
 8006368:	f040 8298 	bne.w	800689c <_dtoa_r+0x95c>
 800636c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006370:	462a      	mov	r2, r5
 8006372:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006376:	f7fa fbb1 	bl	8000adc <__aeabi_dcmplt>
 800637a:	bb38      	cbnz	r0, 80063cc <_dtoa_r+0x48c>
 800637c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006380:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006384:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	f2c0 8157 	blt.w	800663a <_dtoa_r+0x6fa>
 800638c:	2f0e      	cmp	r7, #14
 800638e:	f300 8154 	bgt.w	800663a <_dtoa_r+0x6fa>
 8006392:	4b4b      	ldr	r3, [pc, #300]	@ (80064c0 <_dtoa_r+0x580>)
 8006394:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006398:	ed93 7b00 	vldr	d7, [r3]
 800639c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800639e:	2b00      	cmp	r3, #0
 80063a0:	ed8d 7b00 	vstr	d7, [sp]
 80063a4:	f280 80e5 	bge.w	8006572 <_dtoa_r+0x632>
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f300 80e1 	bgt.w	8006572 <_dtoa_r+0x632>
 80063b0:	d10c      	bne.n	80063cc <_dtoa_r+0x48c>
 80063b2:	4b48      	ldr	r3, [pc, #288]	@ (80064d4 <_dtoa_r+0x594>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	ec51 0b17 	vmov	r0, r1, d7
 80063ba:	f7fa f91d 	bl	80005f8 <__aeabi_dmul>
 80063be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c2:	f7fa fb9f 	bl	8000b04 <__aeabi_dcmpge>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f000 8266 	beq.w	8006898 <_dtoa_r+0x958>
 80063cc:	2400      	movs	r4, #0
 80063ce:	4625      	mov	r5, r4
 80063d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063d2:	4656      	mov	r6, sl
 80063d4:	ea6f 0803 	mvn.w	r8, r3
 80063d8:	2700      	movs	r7, #0
 80063da:	4621      	mov	r1, r4
 80063dc:	4648      	mov	r0, r9
 80063de:	f000 fcbf 	bl	8006d60 <_Bfree>
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	f000 80bd 	beq.w	8006562 <_dtoa_r+0x622>
 80063e8:	b12f      	cbz	r7, 80063f6 <_dtoa_r+0x4b6>
 80063ea:	42af      	cmp	r7, r5
 80063ec:	d003      	beq.n	80063f6 <_dtoa_r+0x4b6>
 80063ee:	4639      	mov	r1, r7
 80063f0:	4648      	mov	r0, r9
 80063f2:	f000 fcb5 	bl	8006d60 <_Bfree>
 80063f6:	4629      	mov	r1, r5
 80063f8:	4648      	mov	r0, r9
 80063fa:	f000 fcb1 	bl	8006d60 <_Bfree>
 80063fe:	e0b0      	b.n	8006562 <_dtoa_r+0x622>
 8006400:	07e2      	lsls	r2, r4, #31
 8006402:	d505      	bpl.n	8006410 <_dtoa_r+0x4d0>
 8006404:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006408:	f7fa f8f6 	bl	80005f8 <__aeabi_dmul>
 800640c:	3601      	adds	r6, #1
 800640e:	2301      	movs	r3, #1
 8006410:	1064      	asrs	r4, r4, #1
 8006412:	3508      	adds	r5, #8
 8006414:	e762      	b.n	80062dc <_dtoa_r+0x39c>
 8006416:	2602      	movs	r6, #2
 8006418:	e765      	b.n	80062e6 <_dtoa_r+0x3a6>
 800641a:	9c03      	ldr	r4, [sp, #12]
 800641c:	46b8      	mov	r8, r7
 800641e:	e784      	b.n	800632a <_dtoa_r+0x3ea>
 8006420:	4b27      	ldr	r3, [pc, #156]	@ (80064c0 <_dtoa_r+0x580>)
 8006422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800642c:	4454      	add	r4, sl
 800642e:	2900      	cmp	r1, #0
 8006430:	d054      	beq.n	80064dc <_dtoa_r+0x59c>
 8006432:	4929      	ldr	r1, [pc, #164]	@ (80064d8 <_dtoa_r+0x598>)
 8006434:	2000      	movs	r0, #0
 8006436:	f7fa fa09 	bl	800084c <__aeabi_ddiv>
 800643a:	4633      	mov	r3, r6
 800643c:	462a      	mov	r2, r5
 800643e:	f7f9 ff23 	bl	8000288 <__aeabi_dsub>
 8006442:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006446:	4656      	mov	r6, sl
 8006448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644c:	f7fa fb84 	bl	8000b58 <__aeabi_d2iz>
 8006450:	4605      	mov	r5, r0
 8006452:	f7fa f867 	bl	8000524 <__aeabi_i2d>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800645e:	f7f9 ff13 	bl	8000288 <__aeabi_dsub>
 8006462:	3530      	adds	r5, #48	@ 0x30
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800646c:	f806 5b01 	strb.w	r5, [r6], #1
 8006470:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006474:	f7fa fb32 	bl	8000adc <__aeabi_dcmplt>
 8006478:	2800      	cmp	r0, #0
 800647a:	d172      	bne.n	8006562 <_dtoa_r+0x622>
 800647c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006480:	4911      	ldr	r1, [pc, #68]	@ (80064c8 <_dtoa_r+0x588>)
 8006482:	2000      	movs	r0, #0
 8006484:	f7f9 ff00 	bl	8000288 <__aeabi_dsub>
 8006488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800648c:	f7fa fb26 	bl	8000adc <__aeabi_dcmplt>
 8006490:	2800      	cmp	r0, #0
 8006492:	f040 80b4 	bne.w	80065fe <_dtoa_r+0x6be>
 8006496:	42a6      	cmp	r6, r4
 8006498:	f43f af70 	beq.w	800637c <_dtoa_r+0x43c>
 800649c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80064a0:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <_dtoa_r+0x58c>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	4b08      	ldr	r3, [pc, #32]	@ (80064cc <_dtoa_r+0x58c>)
 80064aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80064ae:	2200      	movs	r2, #0
 80064b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b4:	f7fa f8a0 	bl	80005f8 <__aeabi_dmul>
 80064b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064bc:	e7c4      	b.n	8006448 <_dtoa_r+0x508>
 80064be:	bf00      	nop
 80064c0:	080081c0 	.word	0x080081c0
 80064c4:	08008198 	.word	0x08008198
 80064c8:	3ff00000 	.word	0x3ff00000
 80064cc:	40240000 	.word	0x40240000
 80064d0:	401c0000 	.word	0x401c0000
 80064d4:	40140000 	.word	0x40140000
 80064d8:	3fe00000 	.word	0x3fe00000
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	f7fa f88a 	bl	80005f8 <__aeabi_dmul>
 80064e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80064e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80064ea:	4656      	mov	r6, sl
 80064ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f0:	f7fa fb32 	bl	8000b58 <__aeabi_d2iz>
 80064f4:	4605      	mov	r5, r0
 80064f6:	f7fa f815 	bl	8000524 <__aeabi_i2d>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006502:	f7f9 fec1 	bl	8000288 <__aeabi_dsub>
 8006506:	3530      	adds	r5, #48	@ 0x30
 8006508:	f806 5b01 	strb.w	r5, [r6], #1
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	42a6      	cmp	r6, r4
 8006512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	d124      	bne.n	8006566 <_dtoa_r+0x626>
 800651c:	4baf      	ldr	r3, [pc, #700]	@ (80067dc <_dtoa_r+0x89c>)
 800651e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006522:	f7f9 feb3 	bl	800028c <__adddf3>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800652e:	f7fa faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8006532:	2800      	cmp	r0, #0
 8006534:	d163      	bne.n	80065fe <_dtoa_r+0x6be>
 8006536:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800653a:	49a8      	ldr	r1, [pc, #672]	@ (80067dc <_dtoa_r+0x89c>)
 800653c:	2000      	movs	r0, #0
 800653e:	f7f9 fea3 	bl	8000288 <__aeabi_dsub>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654a:	f7fa fac7 	bl	8000adc <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f43f af14 	beq.w	800637c <_dtoa_r+0x43c>
 8006554:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006556:	1e73      	subs	r3, r6, #1
 8006558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800655a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800655e:	2b30      	cmp	r3, #48	@ 0x30
 8006560:	d0f8      	beq.n	8006554 <_dtoa_r+0x614>
 8006562:	4647      	mov	r7, r8
 8006564:	e03b      	b.n	80065de <_dtoa_r+0x69e>
 8006566:	4b9e      	ldr	r3, [pc, #632]	@ (80067e0 <_dtoa_r+0x8a0>)
 8006568:	f7fa f846 	bl	80005f8 <__aeabi_dmul>
 800656c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006570:	e7bc      	b.n	80064ec <_dtoa_r+0x5ac>
 8006572:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006576:	4656      	mov	r6, sl
 8006578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7fa f964 	bl	800084c <__aeabi_ddiv>
 8006584:	f7fa fae8 	bl	8000b58 <__aeabi_d2iz>
 8006588:	4680      	mov	r8, r0
 800658a:	f7f9 ffcb 	bl	8000524 <__aeabi_i2d>
 800658e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006592:	f7fa f831 	bl	80005f8 <__aeabi_dmul>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065a2:	f7f9 fe71 	bl	8000288 <__aeabi_dsub>
 80065a6:	f806 4b01 	strb.w	r4, [r6], #1
 80065aa:	9d03      	ldr	r5, [sp, #12]
 80065ac:	eba6 040a 	sub.w	r4, r6, sl
 80065b0:	42a5      	cmp	r5, r4
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	d133      	bne.n	8006620 <_dtoa_r+0x6e0>
 80065b8:	f7f9 fe68 	bl	800028c <__adddf3>
 80065bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c0:	4604      	mov	r4, r0
 80065c2:	460d      	mov	r5, r1
 80065c4:	f7fa faa8 	bl	8000b18 <__aeabi_dcmpgt>
 80065c8:	b9c0      	cbnz	r0, 80065fc <_dtoa_r+0x6bc>
 80065ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	f7fa fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d6:	b110      	cbz	r0, 80065de <_dtoa_r+0x69e>
 80065d8:	f018 0f01 	tst.w	r8, #1
 80065dc:	d10e      	bne.n	80065fc <_dtoa_r+0x6bc>
 80065de:	9902      	ldr	r1, [sp, #8]
 80065e0:	4648      	mov	r0, r9
 80065e2:	f000 fbbd 	bl	8006d60 <_Bfree>
 80065e6:	2300      	movs	r3, #0
 80065e8:	7033      	strb	r3, [r6, #0]
 80065ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065ec:	3701      	adds	r7, #1
 80065ee:	601f      	str	r7, [r3, #0]
 80065f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 824b 	beq.w	8006a8e <_dtoa_r+0xb4e>
 80065f8:	601e      	str	r6, [r3, #0]
 80065fa:	e248      	b.n	8006a8e <_dtoa_r+0xb4e>
 80065fc:	46b8      	mov	r8, r7
 80065fe:	4633      	mov	r3, r6
 8006600:	461e      	mov	r6, r3
 8006602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006606:	2a39      	cmp	r2, #57	@ 0x39
 8006608:	d106      	bne.n	8006618 <_dtoa_r+0x6d8>
 800660a:	459a      	cmp	sl, r3
 800660c:	d1f8      	bne.n	8006600 <_dtoa_r+0x6c0>
 800660e:	2230      	movs	r2, #48	@ 0x30
 8006610:	f108 0801 	add.w	r8, r8, #1
 8006614:	f88a 2000 	strb.w	r2, [sl]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	3201      	adds	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e7a0      	b.n	8006562 <_dtoa_r+0x622>
 8006620:	4b6f      	ldr	r3, [pc, #444]	@ (80067e0 <_dtoa_r+0x8a0>)
 8006622:	2200      	movs	r2, #0
 8006624:	f7f9 ffe8 	bl	80005f8 <__aeabi_dmul>
 8006628:	2200      	movs	r2, #0
 800662a:	2300      	movs	r3, #0
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	f7fa fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006634:	2800      	cmp	r0, #0
 8006636:	d09f      	beq.n	8006578 <_dtoa_r+0x638>
 8006638:	e7d1      	b.n	80065de <_dtoa_r+0x69e>
 800663a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800663c:	2a00      	cmp	r2, #0
 800663e:	f000 80ea 	beq.w	8006816 <_dtoa_r+0x8d6>
 8006642:	9a07      	ldr	r2, [sp, #28]
 8006644:	2a01      	cmp	r2, #1
 8006646:	f300 80cd 	bgt.w	80067e4 <_dtoa_r+0x8a4>
 800664a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800664c:	2a00      	cmp	r2, #0
 800664e:	f000 80c1 	beq.w	80067d4 <_dtoa_r+0x894>
 8006652:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006656:	9c08      	ldr	r4, [sp, #32]
 8006658:	9e00      	ldr	r6, [sp, #0]
 800665a:	9a00      	ldr	r2, [sp, #0]
 800665c:	441a      	add	r2, r3
 800665e:	9200      	str	r2, [sp, #0]
 8006660:	9a06      	ldr	r2, [sp, #24]
 8006662:	2101      	movs	r1, #1
 8006664:	441a      	add	r2, r3
 8006666:	4648      	mov	r0, r9
 8006668:	9206      	str	r2, [sp, #24]
 800666a:	f000 fc2d 	bl	8006ec8 <__i2b>
 800666e:	4605      	mov	r5, r0
 8006670:	b166      	cbz	r6, 800668c <_dtoa_r+0x74c>
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	dd09      	ble.n	800668c <_dtoa_r+0x74c>
 8006678:	42b3      	cmp	r3, r6
 800667a:	9a00      	ldr	r2, [sp, #0]
 800667c:	bfa8      	it	ge
 800667e:	4633      	movge	r3, r6
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	9200      	str	r2, [sp, #0]
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	1af6      	subs	r6, r6, r3
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	b30b      	cbz	r3, 80066d4 <_dtoa_r+0x794>
 8006690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80c6 	beq.w	8006824 <_dtoa_r+0x8e4>
 8006698:	2c00      	cmp	r4, #0
 800669a:	f000 80c0 	beq.w	800681e <_dtoa_r+0x8de>
 800669e:	4629      	mov	r1, r5
 80066a0:	4622      	mov	r2, r4
 80066a2:	4648      	mov	r0, r9
 80066a4:	f000 fcc8 	bl	8007038 <__pow5mult>
 80066a8:	9a02      	ldr	r2, [sp, #8]
 80066aa:	4601      	mov	r1, r0
 80066ac:	4605      	mov	r5, r0
 80066ae:	4648      	mov	r0, r9
 80066b0:	f000 fc20 	bl	8006ef4 <__multiply>
 80066b4:	9902      	ldr	r1, [sp, #8]
 80066b6:	4680      	mov	r8, r0
 80066b8:	4648      	mov	r0, r9
 80066ba:	f000 fb51 	bl	8006d60 <_Bfree>
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	1b1b      	subs	r3, r3, r4
 80066c2:	9308      	str	r3, [sp, #32]
 80066c4:	f000 80b1 	beq.w	800682a <_dtoa_r+0x8ea>
 80066c8:	9a08      	ldr	r2, [sp, #32]
 80066ca:	4641      	mov	r1, r8
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 fcb3 	bl	8007038 <__pow5mult>
 80066d2:	9002      	str	r0, [sp, #8]
 80066d4:	2101      	movs	r1, #1
 80066d6:	4648      	mov	r0, r9
 80066d8:	f000 fbf6 	bl	8006ec8 <__i2b>
 80066dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066de:	4604      	mov	r4, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 81d8 	beq.w	8006a96 <_dtoa_r+0xb56>
 80066e6:	461a      	mov	r2, r3
 80066e8:	4601      	mov	r1, r0
 80066ea:	4648      	mov	r0, r9
 80066ec:	f000 fca4 	bl	8007038 <__pow5mult>
 80066f0:	9b07      	ldr	r3, [sp, #28]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	4604      	mov	r4, r0
 80066f6:	f300 809f 	bgt.w	8006838 <_dtoa_r+0x8f8>
 80066fa:	9b04      	ldr	r3, [sp, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 8097 	bne.w	8006830 <_dtoa_r+0x8f0>
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 8093 	bne.w	8006834 <_dtoa_r+0x8f4>
 800670e:	9b05      	ldr	r3, [sp, #20]
 8006710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006714:	0d1b      	lsrs	r3, r3, #20
 8006716:	051b      	lsls	r3, r3, #20
 8006718:	b133      	cbz	r3, 8006728 <_dtoa_r+0x7e8>
 800671a:	9b00      	ldr	r3, [sp, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	9b06      	ldr	r3, [sp, #24]
 8006722:	3301      	adds	r3, #1
 8006724:	9306      	str	r3, [sp, #24]
 8006726:	2301      	movs	r3, #1
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 81b8 	beq.w	8006aa2 <_dtoa_r+0xb62>
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006738:	6918      	ldr	r0, [r3, #16]
 800673a:	f000 fb79 	bl	8006e30 <__hi0bits>
 800673e:	f1c0 0020 	rsb	r0, r0, #32
 8006742:	9b06      	ldr	r3, [sp, #24]
 8006744:	4418      	add	r0, r3
 8006746:	f010 001f 	ands.w	r0, r0, #31
 800674a:	f000 8082 	beq.w	8006852 <_dtoa_r+0x912>
 800674e:	f1c0 0320 	rsb	r3, r0, #32
 8006752:	2b04      	cmp	r3, #4
 8006754:	dd73      	ble.n	800683e <_dtoa_r+0x8fe>
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	f1c0 001c 	rsb	r0, r0, #28
 800675c:	4403      	add	r3, r0
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	9b06      	ldr	r3, [sp, #24]
 8006762:	4403      	add	r3, r0
 8006764:	4406      	add	r6, r0
 8006766:	9306      	str	r3, [sp, #24]
 8006768:	9b00      	ldr	r3, [sp, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	dd05      	ble.n	800677a <_dtoa_r+0x83a>
 800676e:	9902      	ldr	r1, [sp, #8]
 8006770:	461a      	mov	r2, r3
 8006772:	4648      	mov	r0, r9
 8006774:	f000 fcba 	bl	80070ec <__lshift>
 8006778:	9002      	str	r0, [sp, #8]
 800677a:	9b06      	ldr	r3, [sp, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	dd05      	ble.n	800678c <_dtoa_r+0x84c>
 8006780:	4621      	mov	r1, r4
 8006782:	461a      	mov	r2, r3
 8006784:	4648      	mov	r0, r9
 8006786:	f000 fcb1 	bl	80070ec <__lshift>
 800678a:	4604      	mov	r4, r0
 800678c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d061      	beq.n	8006856 <_dtoa_r+0x916>
 8006792:	9802      	ldr	r0, [sp, #8]
 8006794:	4621      	mov	r1, r4
 8006796:	f000 fd15 	bl	80071c4 <__mcmp>
 800679a:	2800      	cmp	r0, #0
 800679c:	da5b      	bge.n	8006856 <_dtoa_r+0x916>
 800679e:	2300      	movs	r3, #0
 80067a0:	9902      	ldr	r1, [sp, #8]
 80067a2:	220a      	movs	r2, #10
 80067a4:	4648      	mov	r0, r9
 80067a6:	f000 fafd 	bl	8006da4 <__multadd>
 80067aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ac:	9002      	str	r0, [sp, #8]
 80067ae:	f107 38ff 	add.w	r8, r7, #4294967295
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8177 	beq.w	8006aa6 <_dtoa_r+0xb66>
 80067b8:	4629      	mov	r1, r5
 80067ba:	2300      	movs	r3, #0
 80067bc:	220a      	movs	r2, #10
 80067be:	4648      	mov	r0, r9
 80067c0:	f000 faf0 	bl	8006da4 <__multadd>
 80067c4:	f1bb 0f00 	cmp.w	fp, #0
 80067c8:	4605      	mov	r5, r0
 80067ca:	dc6f      	bgt.n	80068ac <_dtoa_r+0x96c>
 80067cc:	9b07      	ldr	r3, [sp, #28]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	dc49      	bgt.n	8006866 <_dtoa_r+0x926>
 80067d2:	e06b      	b.n	80068ac <_dtoa_r+0x96c>
 80067d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80067da:	e73c      	b.n	8006656 <_dtoa_r+0x716>
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	40240000 	.word	0x40240000
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	1e5c      	subs	r4, r3, #1
 80067e8:	9b08      	ldr	r3, [sp, #32]
 80067ea:	42a3      	cmp	r3, r4
 80067ec:	db09      	blt.n	8006802 <_dtoa_r+0x8c2>
 80067ee:	1b1c      	subs	r4, r3, r4
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f6bf af30 	bge.w	8006658 <_dtoa_r+0x718>
 80067f8:	9b00      	ldr	r3, [sp, #0]
 80067fa:	9a03      	ldr	r2, [sp, #12]
 80067fc:	1a9e      	subs	r6, r3, r2
 80067fe:	2300      	movs	r3, #0
 8006800:	e72b      	b.n	800665a <_dtoa_r+0x71a>
 8006802:	9b08      	ldr	r3, [sp, #32]
 8006804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006806:	9408      	str	r4, [sp, #32]
 8006808:	1ae3      	subs	r3, r4, r3
 800680a:	441a      	add	r2, r3
 800680c:	9e00      	ldr	r6, [sp, #0]
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	920d      	str	r2, [sp, #52]	@ 0x34
 8006812:	2400      	movs	r4, #0
 8006814:	e721      	b.n	800665a <_dtoa_r+0x71a>
 8006816:	9c08      	ldr	r4, [sp, #32]
 8006818:	9e00      	ldr	r6, [sp, #0]
 800681a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800681c:	e728      	b.n	8006670 <_dtoa_r+0x730>
 800681e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006822:	e751      	b.n	80066c8 <_dtoa_r+0x788>
 8006824:	9a08      	ldr	r2, [sp, #32]
 8006826:	9902      	ldr	r1, [sp, #8]
 8006828:	e750      	b.n	80066cc <_dtoa_r+0x78c>
 800682a:	f8cd 8008 	str.w	r8, [sp, #8]
 800682e:	e751      	b.n	80066d4 <_dtoa_r+0x794>
 8006830:	2300      	movs	r3, #0
 8006832:	e779      	b.n	8006728 <_dtoa_r+0x7e8>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	e777      	b.n	8006728 <_dtoa_r+0x7e8>
 8006838:	2300      	movs	r3, #0
 800683a:	9308      	str	r3, [sp, #32]
 800683c:	e779      	b.n	8006732 <_dtoa_r+0x7f2>
 800683e:	d093      	beq.n	8006768 <_dtoa_r+0x828>
 8006840:	9a00      	ldr	r2, [sp, #0]
 8006842:	331c      	adds	r3, #28
 8006844:	441a      	add	r2, r3
 8006846:	9200      	str	r2, [sp, #0]
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	441a      	add	r2, r3
 800684c:	441e      	add	r6, r3
 800684e:	9206      	str	r2, [sp, #24]
 8006850:	e78a      	b.n	8006768 <_dtoa_r+0x828>
 8006852:	4603      	mov	r3, r0
 8006854:	e7f4      	b.n	8006840 <_dtoa_r+0x900>
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	46b8      	mov	r8, r7
 800685c:	dc20      	bgt.n	80068a0 <_dtoa_r+0x960>
 800685e:	469b      	mov	fp, r3
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	2b02      	cmp	r3, #2
 8006864:	dd1e      	ble.n	80068a4 <_dtoa_r+0x964>
 8006866:	f1bb 0f00 	cmp.w	fp, #0
 800686a:	f47f adb1 	bne.w	80063d0 <_dtoa_r+0x490>
 800686e:	4621      	mov	r1, r4
 8006870:	465b      	mov	r3, fp
 8006872:	2205      	movs	r2, #5
 8006874:	4648      	mov	r0, r9
 8006876:	f000 fa95 	bl	8006da4 <__multadd>
 800687a:	4601      	mov	r1, r0
 800687c:	4604      	mov	r4, r0
 800687e:	9802      	ldr	r0, [sp, #8]
 8006880:	f000 fca0 	bl	80071c4 <__mcmp>
 8006884:	2800      	cmp	r0, #0
 8006886:	f77f ada3 	ble.w	80063d0 <_dtoa_r+0x490>
 800688a:	4656      	mov	r6, sl
 800688c:	2331      	movs	r3, #49	@ 0x31
 800688e:	f806 3b01 	strb.w	r3, [r6], #1
 8006892:	f108 0801 	add.w	r8, r8, #1
 8006896:	e59f      	b.n	80063d8 <_dtoa_r+0x498>
 8006898:	9c03      	ldr	r4, [sp, #12]
 800689a:	46b8      	mov	r8, r7
 800689c:	4625      	mov	r5, r4
 800689e:	e7f4      	b.n	800688a <_dtoa_r+0x94a>
 80068a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80068a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8101 	beq.w	8006aae <_dtoa_r+0xb6e>
 80068ac:	2e00      	cmp	r6, #0
 80068ae:	dd05      	ble.n	80068bc <_dtoa_r+0x97c>
 80068b0:	4629      	mov	r1, r5
 80068b2:	4632      	mov	r2, r6
 80068b4:	4648      	mov	r0, r9
 80068b6:	f000 fc19 	bl	80070ec <__lshift>
 80068ba:	4605      	mov	r5, r0
 80068bc:	9b08      	ldr	r3, [sp, #32]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d05c      	beq.n	800697c <_dtoa_r+0xa3c>
 80068c2:	6869      	ldr	r1, [r5, #4]
 80068c4:	4648      	mov	r0, r9
 80068c6:	f000 fa0b 	bl	8006ce0 <_Balloc>
 80068ca:	4606      	mov	r6, r0
 80068cc:	b928      	cbnz	r0, 80068da <_dtoa_r+0x99a>
 80068ce:	4b82      	ldr	r3, [pc, #520]	@ (8006ad8 <_dtoa_r+0xb98>)
 80068d0:	4602      	mov	r2, r0
 80068d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068d6:	f7ff bb4a 	b.w	8005f6e <_dtoa_r+0x2e>
 80068da:	692a      	ldr	r2, [r5, #16]
 80068dc:	3202      	adds	r2, #2
 80068de:	0092      	lsls	r2, r2, #2
 80068e0:	f105 010c 	add.w	r1, r5, #12
 80068e4:	300c      	adds	r0, #12
 80068e6:	f000 ffa3 	bl	8007830 <memcpy>
 80068ea:	2201      	movs	r2, #1
 80068ec:	4631      	mov	r1, r6
 80068ee:	4648      	mov	r0, r9
 80068f0:	f000 fbfc 	bl	80070ec <__lshift>
 80068f4:	f10a 0301 	add.w	r3, sl, #1
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	eb0a 030b 	add.w	r3, sl, fp
 80068fe:	9308      	str	r3, [sp, #32]
 8006900:	9b04      	ldr	r3, [sp, #16]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	462f      	mov	r7, r5
 8006908:	9306      	str	r3, [sp, #24]
 800690a:	4605      	mov	r5, r0
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	9802      	ldr	r0, [sp, #8]
 8006910:	4621      	mov	r1, r4
 8006912:	f103 3bff 	add.w	fp, r3, #4294967295
 8006916:	f7ff fa8a 	bl	8005e2e <quorem>
 800691a:	4603      	mov	r3, r0
 800691c:	3330      	adds	r3, #48	@ 0x30
 800691e:	9003      	str	r0, [sp, #12]
 8006920:	4639      	mov	r1, r7
 8006922:	9802      	ldr	r0, [sp, #8]
 8006924:	9309      	str	r3, [sp, #36]	@ 0x24
 8006926:	f000 fc4d 	bl	80071c4 <__mcmp>
 800692a:	462a      	mov	r2, r5
 800692c:	9004      	str	r0, [sp, #16]
 800692e:	4621      	mov	r1, r4
 8006930:	4648      	mov	r0, r9
 8006932:	f000 fc63 	bl	80071fc <__mdiff>
 8006936:	68c2      	ldr	r2, [r0, #12]
 8006938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693a:	4606      	mov	r6, r0
 800693c:	bb02      	cbnz	r2, 8006980 <_dtoa_r+0xa40>
 800693e:	4601      	mov	r1, r0
 8006940:	9802      	ldr	r0, [sp, #8]
 8006942:	f000 fc3f 	bl	80071c4 <__mcmp>
 8006946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006948:	4602      	mov	r2, r0
 800694a:	4631      	mov	r1, r6
 800694c:	4648      	mov	r0, r9
 800694e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006950:	9309      	str	r3, [sp, #36]	@ 0x24
 8006952:	f000 fa05 	bl	8006d60 <_Bfree>
 8006956:	9b07      	ldr	r3, [sp, #28]
 8006958:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800695a:	9e00      	ldr	r6, [sp, #0]
 800695c:	ea42 0103 	orr.w	r1, r2, r3
 8006960:	9b06      	ldr	r3, [sp, #24]
 8006962:	4319      	orrs	r1, r3
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	d10d      	bne.n	8006984 <_dtoa_r+0xa44>
 8006968:	2b39      	cmp	r3, #57	@ 0x39
 800696a:	d027      	beq.n	80069bc <_dtoa_r+0xa7c>
 800696c:	9a04      	ldr	r2, [sp, #16]
 800696e:	2a00      	cmp	r2, #0
 8006970:	dd01      	ble.n	8006976 <_dtoa_r+0xa36>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	3331      	adds	r3, #49	@ 0x31
 8006976:	f88b 3000 	strb.w	r3, [fp]
 800697a:	e52e      	b.n	80063da <_dtoa_r+0x49a>
 800697c:	4628      	mov	r0, r5
 800697e:	e7b9      	b.n	80068f4 <_dtoa_r+0x9b4>
 8006980:	2201      	movs	r2, #1
 8006982:	e7e2      	b.n	800694a <_dtoa_r+0xa0a>
 8006984:	9904      	ldr	r1, [sp, #16]
 8006986:	2900      	cmp	r1, #0
 8006988:	db04      	blt.n	8006994 <_dtoa_r+0xa54>
 800698a:	9807      	ldr	r0, [sp, #28]
 800698c:	4301      	orrs	r1, r0
 800698e:	9806      	ldr	r0, [sp, #24]
 8006990:	4301      	orrs	r1, r0
 8006992:	d120      	bne.n	80069d6 <_dtoa_r+0xa96>
 8006994:	2a00      	cmp	r2, #0
 8006996:	ddee      	ble.n	8006976 <_dtoa_r+0xa36>
 8006998:	9902      	ldr	r1, [sp, #8]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	4648      	mov	r0, r9
 80069a0:	f000 fba4 	bl	80070ec <__lshift>
 80069a4:	4621      	mov	r1, r4
 80069a6:	9002      	str	r0, [sp, #8]
 80069a8:	f000 fc0c 	bl	80071c4 <__mcmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	9b00      	ldr	r3, [sp, #0]
 80069b0:	dc02      	bgt.n	80069b8 <_dtoa_r+0xa78>
 80069b2:	d1e0      	bne.n	8006976 <_dtoa_r+0xa36>
 80069b4:	07da      	lsls	r2, r3, #31
 80069b6:	d5de      	bpl.n	8006976 <_dtoa_r+0xa36>
 80069b8:	2b39      	cmp	r3, #57	@ 0x39
 80069ba:	d1da      	bne.n	8006972 <_dtoa_r+0xa32>
 80069bc:	2339      	movs	r3, #57	@ 0x39
 80069be:	f88b 3000 	strb.w	r3, [fp]
 80069c2:	4633      	mov	r3, r6
 80069c4:	461e      	mov	r6, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80069cc:	2a39      	cmp	r2, #57	@ 0x39
 80069ce:	d04e      	beq.n	8006a6e <_dtoa_r+0xb2e>
 80069d0:	3201      	adds	r2, #1
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e501      	b.n	80063da <_dtoa_r+0x49a>
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	dd03      	ble.n	80069e2 <_dtoa_r+0xaa2>
 80069da:	2b39      	cmp	r3, #57	@ 0x39
 80069dc:	d0ee      	beq.n	80069bc <_dtoa_r+0xa7c>
 80069de:	3301      	adds	r3, #1
 80069e0:	e7c9      	b.n	8006976 <_dtoa_r+0xa36>
 80069e2:	9a00      	ldr	r2, [sp, #0]
 80069e4:	9908      	ldr	r1, [sp, #32]
 80069e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80069ea:	428a      	cmp	r2, r1
 80069ec:	d028      	beq.n	8006a40 <_dtoa_r+0xb00>
 80069ee:	9902      	ldr	r1, [sp, #8]
 80069f0:	2300      	movs	r3, #0
 80069f2:	220a      	movs	r2, #10
 80069f4:	4648      	mov	r0, r9
 80069f6:	f000 f9d5 	bl	8006da4 <__multadd>
 80069fa:	42af      	cmp	r7, r5
 80069fc:	9002      	str	r0, [sp, #8]
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	f04f 020a 	mov.w	r2, #10
 8006a06:	4639      	mov	r1, r7
 8006a08:	4648      	mov	r0, r9
 8006a0a:	d107      	bne.n	8006a1c <_dtoa_r+0xadc>
 8006a0c:	f000 f9ca 	bl	8006da4 <__multadd>
 8006a10:	4607      	mov	r7, r0
 8006a12:	4605      	mov	r5, r0
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	3301      	adds	r3, #1
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	e777      	b.n	800690c <_dtoa_r+0x9cc>
 8006a1c:	f000 f9c2 	bl	8006da4 <__multadd>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4607      	mov	r7, r0
 8006a24:	2300      	movs	r3, #0
 8006a26:	220a      	movs	r2, #10
 8006a28:	4648      	mov	r0, r9
 8006a2a:	f000 f9bb 	bl	8006da4 <__multadd>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	e7f0      	b.n	8006a14 <_dtoa_r+0xad4>
 8006a32:	f1bb 0f00 	cmp.w	fp, #0
 8006a36:	bfcc      	ite	gt
 8006a38:	465e      	movgt	r6, fp
 8006a3a:	2601      	movle	r6, #1
 8006a3c:	4456      	add	r6, sl
 8006a3e:	2700      	movs	r7, #0
 8006a40:	9902      	ldr	r1, [sp, #8]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2201      	movs	r2, #1
 8006a46:	4648      	mov	r0, r9
 8006a48:	f000 fb50 	bl	80070ec <__lshift>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	9002      	str	r0, [sp, #8]
 8006a50:	f000 fbb8 	bl	80071c4 <__mcmp>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dcb4      	bgt.n	80069c2 <_dtoa_r+0xa82>
 8006a58:	d102      	bne.n	8006a60 <_dtoa_r+0xb20>
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	07db      	lsls	r3, r3, #31
 8006a5e:	d4b0      	bmi.n	80069c2 <_dtoa_r+0xa82>
 8006a60:	4633      	mov	r3, r6
 8006a62:	461e      	mov	r6, r3
 8006a64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a68:	2a30      	cmp	r2, #48	@ 0x30
 8006a6a:	d0fa      	beq.n	8006a62 <_dtoa_r+0xb22>
 8006a6c:	e4b5      	b.n	80063da <_dtoa_r+0x49a>
 8006a6e:	459a      	cmp	sl, r3
 8006a70:	d1a8      	bne.n	80069c4 <_dtoa_r+0xa84>
 8006a72:	2331      	movs	r3, #49	@ 0x31
 8006a74:	f108 0801 	add.w	r8, r8, #1
 8006a78:	f88a 3000 	strb.w	r3, [sl]
 8006a7c:	e4ad      	b.n	80063da <_dtoa_r+0x49a>
 8006a7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006adc <_dtoa_r+0xb9c>
 8006a84:	b11b      	cbz	r3, 8006a8e <_dtoa_r+0xb4e>
 8006a86:	f10a 0308 	add.w	r3, sl, #8
 8006a8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	4650      	mov	r0, sl
 8006a90:	b017      	add	sp, #92	@ 0x5c
 8006a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a96:	9b07      	ldr	r3, [sp, #28]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	f77f ae2e 	ble.w	80066fa <_dtoa_r+0x7ba>
 8006a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	e64d      	b.n	8006742 <_dtoa_r+0x802>
 8006aa6:	f1bb 0f00 	cmp.w	fp, #0
 8006aaa:	f77f aed9 	ble.w	8006860 <_dtoa_r+0x920>
 8006aae:	4656      	mov	r6, sl
 8006ab0:	9802      	ldr	r0, [sp, #8]
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	f7ff f9bb 	bl	8005e2e <quorem>
 8006ab8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006abc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ac0:	eba6 020a 	sub.w	r2, r6, sl
 8006ac4:	4593      	cmp	fp, r2
 8006ac6:	ddb4      	ble.n	8006a32 <_dtoa_r+0xaf2>
 8006ac8:	9902      	ldr	r1, [sp, #8]
 8006aca:	2300      	movs	r3, #0
 8006acc:	220a      	movs	r2, #10
 8006ace:	4648      	mov	r0, r9
 8006ad0:	f000 f968 	bl	8006da4 <__multadd>
 8006ad4:	9002      	str	r0, [sp, #8]
 8006ad6:	e7eb      	b.n	8006ab0 <_dtoa_r+0xb70>
 8006ad8:	080080c4 	.word	0x080080c4
 8006adc:	08008048 	.word	0x08008048

08006ae0 <_free_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	2900      	cmp	r1, #0
 8006ae6:	d041      	beq.n	8006b6c <_free_r+0x8c>
 8006ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aec:	1f0c      	subs	r4, r1, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfb8      	it	lt
 8006af2:	18e4      	addlt	r4, r4, r3
 8006af4:	f000 f8e8 	bl	8006cc8 <__malloc_lock>
 8006af8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b70 <_free_r+0x90>)
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	b933      	cbnz	r3, 8006b0c <_free_r+0x2c>
 8006afe:	6063      	str	r3, [r4, #4]
 8006b00:	6014      	str	r4, [r2, #0]
 8006b02:	4628      	mov	r0, r5
 8006b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b08:	f000 b8e4 	b.w	8006cd4 <__malloc_unlock>
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	d908      	bls.n	8006b22 <_free_r+0x42>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	1821      	adds	r1, r4, r0
 8006b14:	428b      	cmp	r3, r1
 8006b16:	bf01      	itttt	eq
 8006b18:	6819      	ldreq	r1, [r3, #0]
 8006b1a:	685b      	ldreq	r3, [r3, #4]
 8006b1c:	1809      	addeq	r1, r1, r0
 8006b1e:	6021      	streq	r1, [r4, #0]
 8006b20:	e7ed      	b.n	8006afe <_free_r+0x1e>
 8006b22:	461a      	mov	r2, r3
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	b10b      	cbz	r3, 8006b2c <_free_r+0x4c>
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	d9fa      	bls.n	8006b22 <_free_r+0x42>
 8006b2c:	6811      	ldr	r1, [r2, #0]
 8006b2e:	1850      	adds	r0, r2, r1
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d10b      	bne.n	8006b4c <_free_r+0x6c>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	4401      	add	r1, r0
 8006b38:	1850      	adds	r0, r2, r1
 8006b3a:	4283      	cmp	r3, r0
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	d1e0      	bne.n	8006b02 <_free_r+0x22>
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	6053      	str	r3, [r2, #4]
 8006b46:	4408      	add	r0, r1
 8006b48:	6010      	str	r0, [r2, #0]
 8006b4a:	e7da      	b.n	8006b02 <_free_r+0x22>
 8006b4c:	d902      	bls.n	8006b54 <_free_r+0x74>
 8006b4e:	230c      	movs	r3, #12
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	e7d6      	b.n	8006b02 <_free_r+0x22>
 8006b54:	6820      	ldr	r0, [r4, #0]
 8006b56:	1821      	adds	r1, r4, r0
 8006b58:	428b      	cmp	r3, r1
 8006b5a:	bf04      	itt	eq
 8006b5c:	6819      	ldreq	r1, [r3, #0]
 8006b5e:	685b      	ldreq	r3, [r3, #4]
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	bf04      	itt	eq
 8006b64:	1809      	addeq	r1, r1, r0
 8006b66:	6021      	streq	r1, [r4, #0]
 8006b68:	6054      	str	r4, [r2, #4]
 8006b6a:	e7ca      	b.n	8006b02 <_free_r+0x22>
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000530 	.word	0x20000530

08006b74 <malloc>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	@ (8006b80 <malloc+0xc>)
 8006b76:	4601      	mov	r1, r0
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	f000 b825 	b.w	8006bc8 <_malloc_r>
 8006b7e:	bf00      	nop
 8006b80:	20000028 	.word	0x20000028

08006b84 <sbrk_aligned>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	4e0f      	ldr	r6, [pc, #60]	@ (8006bc4 <sbrk_aligned+0x40>)
 8006b88:	460c      	mov	r4, r1
 8006b8a:	6831      	ldr	r1, [r6, #0]
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	b911      	cbnz	r1, 8006b96 <sbrk_aligned+0x12>
 8006b90:	f000 fe3e 	bl	8007810 <_sbrk_r>
 8006b94:	6030      	str	r0, [r6, #0]
 8006b96:	4621      	mov	r1, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 fe39 	bl	8007810 <_sbrk_r>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d103      	bne.n	8006baa <sbrk_aligned+0x26>
 8006ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	bd70      	pop	{r4, r5, r6, pc}
 8006baa:	1cc4      	adds	r4, r0, #3
 8006bac:	f024 0403 	bic.w	r4, r4, #3
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d0f8      	beq.n	8006ba6 <sbrk_aligned+0x22>
 8006bb4:	1a21      	subs	r1, r4, r0
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fe2a 	bl	8007810 <_sbrk_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1f2      	bne.n	8006ba6 <sbrk_aligned+0x22>
 8006bc0:	e7ef      	b.n	8006ba2 <sbrk_aligned+0x1e>
 8006bc2:	bf00      	nop
 8006bc4:	2000052c 	.word	0x2000052c

08006bc8 <_malloc_r>:
 8006bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bcc:	1ccd      	adds	r5, r1, #3
 8006bce:	f025 0503 	bic.w	r5, r5, #3
 8006bd2:	3508      	adds	r5, #8
 8006bd4:	2d0c      	cmp	r5, #12
 8006bd6:	bf38      	it	cc
 8006bd8:	250c      	movcc	r5, #12
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	4606      	mov	r6, r0
 8006bde:	db01      	blt.n	8006be4 <_malloc_r+0x1c>
 8006be0:	42a9      	cmp	r1, r5
 8006be2:	d904      	bls.n	8006bee <_malloc_r+0x26>
 8006be4:	230c      	movs	r3, #12
 8006be6:	6033      	str	r3, [r6, #0]
 8006be8:	2000      	movs	r0, #0
 8006bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cc4 <_malloc_r+0xfc>
 8006bf2:	f000 f869 	bl	8006cc8 <__malloc_lock>
 8006bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfa:	461c      	mov	r4, r3
 8006bfc:	bb44      	cbnz	r4, 8006c50 <_malloc_r+0x88>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff ffbf 	bl	8006b84 <sbrk_aligned>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	4604      	mov	r4, r0
 8006c0a:	d158      	bne.n	8006cbe <_malloc_r+0xf6>
 8006c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c10:	4627      	mov	r7, r4
 8006c12:	2f00      	cmp	r7, #0
 8006c14:	d143      	bne.n	8006c9e <_malloc_r+0xd6>
 8006c16:	2c00      	cmp	r4, #0
 8006c18:	d04b      	beq.n	8006cb2 <_malloc_r+0xea>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	4630      	mov	r0, r6
 8006c20:	eb04 0903 	add.w	r9, r4, r3
 8006c24:	f000 fdf4 	bl	8007810 <_sbrk_r>
 8006c28:	4581      	cmp	r9, r0
 8006c2a:	d142      	bne.n	8006cb2 <_malloc_r+0xea>
 8006c2c:	6821      	ldr	r1, [r4, #0]
 8006c2e:	1a6d      	subs	r5, r5, r1
 8006c30:	4629      	mov	r1, r5
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff ffa6 	bl	8006b84 <sbrk_aligned>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d03a      	beq.n	8006cb2 <_malloc_r+0xea>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	442b      	add	r3, r5
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	f8d8 3000 	ldr.w	r3, [r8]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	bb62      	cbnz	r2, 8006ca4 <_malloc_r+0xdc>
 8006c4a:	f8c8 7000 	str.w	r7, [r8]
 8006c4e:	e00f      	b.n	8006c70 <_malloc_r+0xa8>
 8006c50:	6822      	ldr	r2, [r4, #0]
 8006c52:	1b52      	subs	r2, r2, r5
 8006c54:	d420      	bmi.n	8006c98 <_malloc_r+0xd0>
 8006c56:	2a0b      	cmp	r2, #11
 8006c58:	d917      	bls.n	8006c8a <_malloc_r+0xc2>
 8006c5a:	1961      	adds	r1, r4, r5
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	6025      	str	r5, [r4, #0]
 8006c60:	bf18      	it	ne
 8006c62:	6059      	strne	r1, [r3, #4]
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	bf08      	it	eq
 8006c68:	f8c8 1000 	streq.w	r1, [r8]
 8006c6c:	5162      	str	r2, [r4, r5]
 8006c6e:	604b      	str	r3, [r1, #4]
 8006c70:	4630      	mov	r0, r6
 8006c72:	f000 f82f 	bl	8006cd4 <__malloc_unlock>
 8006c76:	f104 000b 	add.w	r0, r4, #11
 8006c7a:	1d23      	adds	r3, r4, #4
 8006c7c:	f020 0007 	bic.w	r0, r0, #7
 8006c80:	1ac2      	subs	r2, r0, r3
 8006c82:	bf1c      	itt	ne
 8006c84:	1a1b      	subne	r3, r3, r0
 8006c86:	50a3      	strne	r3, [r4, r2]
 8006c88:	e7af      	b.n	8006bea <_malloc_r+0x22>
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	42a3      	cmp	r3, r4
 8006c8e:	bf0c      	ite	eq
 8006c90:	f8c8 2000 	streq.w	r2, [r8]
 8006c94:	605a      	strne	r2, [r3, #4]
 8006c96:	e7eb      	b.n	8006c70 <_malloc_r+0xa8>
 8006c98:	4623      	mov	r3, r4
 8006c9a:	6864      	ldr	r4, [r4, #4]
 8006c9c:	e7ae      	b.n	8006bfc <_malloc_r+0x34>
 8006c9e:	463c      	mov	r4, r7
 8006ca0:	687f      	ldr	r7, [r7, #4]
 8006ca2:	e7b6      	b.n	8006c12 <_malloc_r+0x4a>
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	d1fb      	bne.n	8006ca4 <_malloc_r+0xdc>
 8006cac:	2300      	movs	r3, #0
 8006cae:	6053      	str	r3, [r2, #4]
 8006cb0:	e7de      	b.n	8006c70 <_malloc_r+0xa8>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	6033      	str	r3, [r6, #0]
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f000 f80c 	bl	8006cd4 <__malloc_unlock>
 8006cbc:	e794      	b.n	8006be8 <_malloc_r+0x20>
 8006cbe:	6005      	str	r5, [r0, #0]
 8006cc0:	e7d6      	b.n	8006c70 <_malloc_r+0xa8>
 8006cc2:	bf00      	nop
 8006cc4:	20000530 	.word	0x20000530

08006cc8 <__malloc_lock>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	@ (8006cd0 <__malloc_lock+0x8>)
 8006cca:	f7ff b8ae 	b.w	8005e2a <__retarget_lock_acquire_recursive>
 8006cce:	bf00      	nop
 8006cd0:	20000528 	.word	0x20000528

08006cd4 <__malloc_unlock>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	@ (8006cdc <__malloc_unlock+0x8>)
 8006cd6:	f7ff b8a9 	b.w	8005e2c <__retarget_lock_release_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20000528 	.word	0x20000528

08006ce0 <_Balloc>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	69c6      	ldr	r6, [r0, #28]
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	460d      	mov	r5, r1
 8006ce8:	b976      	cbnz	r6, 8006d08 <_Balloc+0x28>
 8006cea:	2010      	movs	r0, #16
 8006cec:	f7ff ff42 	bl	8006b74 <malloc>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	61e0      	str	r0, [r4, #28]
 8006cf4:	b920      	cbnz	r0, 8006d00 <_Balloc+0x20>
 8006cf6:	4b18      	ldr	r3, [pc, #96]	@ (8006d58 <_Balloc+0x78>)
 8006cf8:	4818      	ldr	r0, [pc, #96]	@ (8006d5c <_Balloc+0x7c>)
 8006cfa:	216b      	movs	r1, #107	@ 0x6b
 8006cfc:	f000 fda6 	bl	800784c <__assert_func>
 8006d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d04:	6006      	str	r6, [r0, #0]
 8006d06:	60c6      	str	r6, [r0, #12]
 8006d08:	69e6      	ldr	r6, [r4, #28]
 8006d0a:	68f3      	ldr	r3, [r6, #12]
 8006d0c:	b183      	cbz	r3, 8006d30 <_Balloc+0x50>
 8006d0e:	69e3      	ldr	r3, [r4, #28]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d16:	b9b8      	cbnz	r0, 8006d48 <_Balloc+0x68>
 8006d18:	2101      	movs	r1, #1
 8006d1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006d1e:	1d72      	adds	r2, r6, #5
 8006d20:	0092      	lsls	r2, r2, #2
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fdb0 	bl	8007888 <_calloc_r>
 8006d28:	b160      	cbz	r0, 8006d44 <_Balloc+0x64>
 8006d2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d2e:	e00e      	b.n	8006d4e <_Balloc+0x6e>
 8006d30:	2221      	movs	r2, #33	@ 0x21
 8006d32:	2104      	movs	r1, #4
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fda7 	bl	8007888 <_calloc_r>
 8006d3a:	69e3      	ldr	r3, [r4, #28]
 8006d3c:	60f0      	str	r0, [r6, #12]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e4      	bne.n	8006d0e <_Balloc+0x2e>
 8006d44:	2000      	movs	r0, #0
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	6802      	ldr	r2, [r0, #0]
 8006d4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d54:	e7f7      	b.n	8006d46 <_Balloc+0x66>
 8006d56:	bf00      	nop
 8006d58:	08008055 	.word	0x08008055
 8006d5c:	080080d5 	.word	0x080080d5

08006d60 <_Bfree>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	69c6      	ldr	r6, [r0, #28]
 8006d64:	4605      	mov	r5, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b976      	cbnz	r6, 8006d88 <_Bfree+0x28>
 8006d6a:	2010      	movs	r0, #16
 8006d6c:	f7ff ff02 	bl	8006b74 <malloc>
 8006d70:	4602      	mov	r2, r0
 8006d72:	61e8      	str	r0, [r5, #28]
 8006d74:	b920      	cbnz	r0, 8006d80 <_Bfree+0x20>
 8006d76:	4b09      	ldr	r3, [pc, #36]	@ (8006d9c <_Bfree+0x3c>)
 8006d78:	4809      	ldr	r0, [pc, #36]	@ (8006da0 <_Bfree+0x40>)
 8006d7a:	218f      	movs	r1, #143	@ 0x8f
 8006d7c:	f000 fd66 	bl	800784c <__assert_func>
 8006d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d84:	6006      	str	r6, [r0, #0]
 8006d86:	60c6      	str	r6, [r0, #12]
 8006d88:	b13c      	cbz	r4, 8006d9a <_Bfree+0x3a>
 8006d8a:	69eb      	ldr	r3, [r5, #28]
 8006d8c:	6862      	ldr	r2, [r4, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d94:	6021      	str	r1, [r4, #0]
 8006d96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	08008055 	.word	0x08008055
 8006da0:	080080d5 	.word	0x080080d5

08006da4 <__multadd>:
 8006da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da8:	690d      	ldr	r5, [r1, #16]
 8006daa:	4607      	mov	r7, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	461e      	mov	r6, r3
 8006db0:	f101 0c14 	add.w	ip, r1, #20
 8006db4:	2000      	movs	r0, #0
 8006db6:	f8dc 3000 	ldr.w	r3, [ip]
 8006dba:	b299      	uxth	r1, r3
 8006dbc:	fb02 6101 	mla	r1, r2, r1, r6
 8006dc0:	0c1e      	lsrs	r6, r3, #16
 8006dc2:	0c0b      	lsrs	r3, r1, #16
 8006dc4:	fb02 3306 	mla	r3, r2, r6, r3
 8006dc8:	b289      	uxth	r1, r1
 8006dca:	3001      	adds	r0, #1
 8006dcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dd0:	4285      	cmp	r5, r0
 8006dd2:	f84c 1b04 	str.w	r1, [ip], #4
 8006dd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dda:	dcec      	bgt.n	8006db6 <__multadd+0x12>
 8006ddc:	b30e      	cbz	r6, 8006e22 <__multadd+0x7e>
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dc19      	bgt.n	8006e18 <__multadd+0x74>
 8006de4:	6861      	ldr	r1, [r4, #4]
 8006de6:	4638      	mov	r0, r7
 8006de8:	3101      	adds	r1, #1
 8006dea:	f7ff ff79 	bl	8006ce0 <_Balloc>
 8006dee:	4680      	mov	r8, r0
 8006df0:	b928      	cbnz	r0, 8006dfe <__multadd+0x5a>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e28 <__multadd+0x84>)
 8006df6:	480d      	ldr	r0, [pc, #52]	@ (8006e2c <__multadd+0x88>)
 8006df8:	21ba      	movs	r1, #186	@ 0xba
 8006dfa:	f000 fd27 	bl	800784c <__assert_func>
 8006dfe:	6922      	ldr	r2, [r4, #16]
 8006e00:	3202      	adds	r2, #2
 8006e02:	f104 010c 	add.w	r1, r4, #12
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	300c      	adds	r0, #12
 8006e0a:	f000 fd11 	bl	8007830 <memcpy>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ffa5 	bl	8006d60 <_Bfree>
 8006e16:	4644      	mov	r4, r8
 8006e18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	615e      	str	r6, [r3, #20]
 8006e20:	6125      	str	r5, [r4, #16]
 8006e22:	4620      	mov	r0, r4
 8006e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e28:	080080c4 	.word	0x080080c4
 8006e2c:	080080d5 	.word	0x080080d5

08006e30 <__hi0bits>:
 8006e30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e34:	4603      	mov	r3, r0
 8006e36:	bf36      	itet	cc
 8006e38:	0403      	lslcc	r3, r0, #16
 8006e3a:	2000      	movcs	r0, #0
 8006e3c:	2010      	movcc	r0, #16
 8006e3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e42:	bf3c      	itt	cc
 8006e44:	021b      	lslcc	r3, r3, #8
 8006e46:	3008      	addcc	r0, #8
 8006e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e4c:	bf3c      	itt	cc
 8006e4e:	011b      	lslcc	r3, r3, #4
 8006e50:	3004      	addcc	r0, #4
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e56:	bf3c      	itt	cc
 8006e58:	009b      	lslcc	r3, r3, #2
 8006e5a:	3002      	addcc	r0, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	db05      	blt.n	8006e6c <__hi0bits+0x3c>
 8006e60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e64:	f100 0001 	add.w	r0, r0, #1
 8006e68:	bf08      	it	eq
 8006e6a:	2020      	moveq	r0, #32
 8006e6c:	4770      	bx	lr

08006e6e <__lo0bits>:
 8006e6e:	6803      	ldr	r3, [r0, #0]
 8006e70:	4602      	mov	r2, r0
 8006e72:	f013 0007 	ands.w	r0, r3, #7
 8006e76:	d00b      	beq.n	8006e90 <__lo0bits+0x22>
 8006e78:	07d9      	lsls	r1, r3, #31
 8006e7a:	d421      	bmi.n	8006ec0 <__lo0bits+0x52>
 8006e7c:	0798      	lsls	r0, r3, #30
 8006e7e:	bf49      	itett	mi
 8006e80:	085b      	lsrmi	r3, r3, #1
 8006e82:	089b      	lsrpl	r3, r3, #2
 8006e84:	2001      	movmi	r0, #1
 8006e86:	6013      	strmi	r3, [r2, #0]
 8006e88:	bf5c      	itt	pl
 8006e8a:	6013      	strpl	r3, [r2, #0]
 8006e8c:	2002      	movpl	r0, #2
 8006e8e:	4770      	bx	lr
 8006e90:	b299      	uxth	r1, r3
 8006e92:	b909      	cbnz	r1, 8006e98 <__lo0bits+0x2a>
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	2010      	movs	r0, #16
 8006e98:	b2d9      	uxtb	r1, r3
 8006e9a:	b909      	cbnz	r1, 8006ea0 <__lo0bits+0x32>
 8006e9c:	3008      	adds	r0, #8
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	0719      	lsls	r1, r3, #28
 8006ea2:	bf04      	itt	eq
 8006ea4:	091b      	lsreq	r3, r3, #4
 8006ea6:	3004      	addeq	r0, #4
 8006ea8:	0799      	lsls	r1, r3, #30
 8006eaa:	bf04      	itt	eq
 8006eac:	089b      	lsreq	r3, r3, #2
 8006eae:	3002      	addeq	r0, #2
 8006eb0:	07d9      	lsls	r1, r3, #31
 8006eb2:	d403      	bmi.n	8006ebc <__lo0bits+0x4e>
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	f100 0001 	add.w	r0, r0, #1
 8006eba:	d003      	beq.n	8006ec4 <__lo0bits+0x56>
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4770      	bx	lr
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4770      	bx	lr
 8006ec4:	2020      	movs	r0, #32
 8006ec6:	4770      	bx	lr

08006ec8 <__i2b>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	2101      	movs	r1, #1
 8006ece:	f7ff ff07 	bl	8006ce0 <_Balloc>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	b928      	cbnz	r0, 8006ee2 <__i2b+0x1a>
 8006ed6:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <__i2b+0x24>)
 8006ed8:	4805      	ldr	r0, [pc, #20]	@ (8006ef0 <__i2b+0x28>)
 8006eda:	f240 1145 	movw	r1, #325	@ 0x145
 8006ede:	f000 fcb5 	bl	800784c <__assert_func>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	6144      	str	r4, [r0, #20]
 8006ee6:	6103      	str	r3, [r0, #16]
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	bf00      	nop
 8006eec:	080080c4 	.word	0x080080c4
 8006ef0:	080080d5 	.word	0x080080d5

08006ef4 <__multiply>:
 8006ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef8:	4617      	mov	r7, r2
 8006efa:	690a      	ldr	r2, [r1, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bfa8      	it	ge
 8006f02:	463b      	movge	r3, r7
 8006f04:	4689      	mov	r9, r1
 8006f06:	bfa4      	itt	ge
 8006f08:	460f      	movge	r7, r1
 8006f0a:	4699      	movge	r9, r3
 8006f0c:	693d      	ldr	r5, [r7, #16]
 8006f0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	eb05 060a 	add.w	r6, r5, sl
 8006f1a:	42b3      	cmp	r3, r6
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	bfb8      	it	lt
 8006f20:	3101      	addlt	r1, #1
 8006f22:	f7ff fedd 	bl	8006ce0 <_Balloc>
 8006f26:	b930      	cbnz	r0, 8006f36 <__multiply+0x42>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	4b41      	ldr	r3, [pc, #260]	@ (8007030 <__multiply+0x13c>)
 8006f2c:	4841      	ldr	r0, [pc, #260]	@ (8007034 <__multiply+0x140>)
 8006f2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f32:	f000 fc8b 	bl	800784c <__assert_func>
 8006f36:	f100 0414 	add.w	r4, r0, #20
 8006f3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006f3e:	4623      	mov	r3, r4
 8006f40:	2200      	movs	r2, #0
 8006f42:	4573      	cmp	r3, lr
 8006f44:	d320      	bcc.n	8006f88 <__multiply+0x94>
 8006f46:	f107 0814 	add.w	r8, r7, #20
 8006f4a:	f109 0114 	add.w	r1, r9, #20
 8006f4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006f52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006f56:	9302      	str	r3, [sp, #8]
 8006f58:	1beb      	subs	r3, r5, r7
 8006f5a:	3b15      	subs	r3, #21
 8006f5c:	f023 0303 	bic.w	r3, r3, #3
 8006f60:	3304      	adds	r3, #4
 8006f62:	3715      	adds	r7, #21
 8006f64:	42bd      	cmp	r5, r7
 8006f66:	bf38      	it	cc
 8006f68:	2304      	movcc	r3, #4
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	9b02      	ldr	r3, [sp, #8]
 8006f6e:	9103      	str	r1, [sp, #12]
 8006f70:	428b      	cmp	r3, r1
 8006f72:	d80c      	bhi.n	8006f8e <__multiply+0x9a>
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	dd03      	ble.n	8006f80 <__multiply+0x8c>
 8006f78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d055      	beq.n	800702c <__multiply+0x138>
 8006f80:	6106      	str	r6, [r0, #16]
 8006f82:	b005      	add	sp, #20
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	f843 2b04 	str.w	r2, [r3], #4
 8006f8c:	e7d9      	b.n	8006f42 <__multiply+0x4e>
 8006f8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f92:	f1ba 0f00 	cmp.w	sl, #0
 8006f96:	d01f      	beq.n	8006fd8 <__multiply+0xe4>
 8006f98:	46c4      	mov	ip, r8
 8006f9a:	46a1      	mov	r9, r4
 8006f9c:	2700      	movs	r7, #0
 8006f9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fa2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fa6:	fa1f fb82 	uxth.w	fp, r2
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fb0:	443b      	add	r3, r7
 8006fb2:	f8d9 7000 	ldr.w	r7, [r9]
 8006fb6:	0c12      	lsrs	r2, r2, #16
 8006fb8:	0c3f      	lsrs	r7, r7, #16
 8006fba:	fb0a 7202 	mla	r2, sl, r2, r7
 8006fbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fc8:	4565      	cmp	r5, ip
 8006fca:	f849 3b04 	str.w	r3, [r9], #4
 8006fce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006fd2:	d8e4      	bhi.n	8006f9e <__multiply+0xaa>
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	50e7      	str	r7, [r4, r3]
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006fde:	3104      	adds	r1, #4
 8006fe0:	f1b9 0f00 	cmp.w	r9, #0
 8006fe4:	d020      	beq.n	8007028 <__multiply+0x134>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	4647      	mov	r7, r8
 8006fea:	46a4      	mov	ip, r4
 8006fec:	f04f 0a00 	mov.w	sl, #0
 8006ff0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ff4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ff8:	fb09 220b 	mla	r2, r9, fp, r2
 8006ffc:	4452      	add	r2, sl
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007004:	f84c 3b04 	str.w	r3, [ip], #4
 8007008:	f857 3b04 	ldr.w	r3, [r7], #4
 800700c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007010:	f8bc 3000 	ldrh.w	r3, [ip]
 8007014:	fb09 330a 	mla	r3, r9, sl, r3
 8007018:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800701c:	42bd      	cmp	r5, r7
 800701e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007022:	d8e5      	bhi.n	8006ff0 <__multiply+0xfc>
 8007024:	9a01      	ldr	r2, [sp, #4]
 8007026:	50a3      	str	r3, [r4, r2]
 8007028:	3404      	adds	r4, #4
 800702a:	e79f      	b.n	8006f6c <__multiply+0x78>
 800702c:	3e01      	subs	r6, #1
 800702e:	e7a1      	b.n	8006f74 <__multiply+0x80>
 8007030:	080080c4 	.word	0x080080c4
 8007034:	080080d5 	.word	0x080080d5

08007038 <__pow5mult>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	4615      	mov	r5, r2
 800703e:	f012 0203 	ands.w	r2, r2, #3
 8007042:	4607      	mov	r7, r0
 8007044:	460e      	mov	r6, r1
 8007046:	d007      	beq.n	8007058 <__pow5mult+0x20>
 8007048:	4c25      	ldr	r4, [pc, #148]	@ (80070e0 <__pow5mult+0xa8>)
 800704a:	3a01      	subs	r2, #1
 800704c:	2300      	movs	r3, #0
 800704e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007052:	f7ff fea7 	bl	8006da4 <__multadd>
 8007056:	4606      	mov	r6, r0
 8007058:	10ad      	asrs	r5, r5, #2
 800705a:	d03d      	beq.n	80070d8 <__pow5mult+0xa0>
 800705c:	69fc      	ldr	r4, [r7, #28]
 800705e:	b97c      	cbnz	r4, 8007080 <__pow5mult+0x48>
 8007060:	2010      	movs	r0, #16
 8007062:	f7ff fd87 	bl	8006b74 <malloc>
 8007066:	4602      	mov	r2, r0
 8007068:	61f8      	str	r0, [r7, #28]
 800706a:	b928      	cbnz	r0, 8007078 <__pow5mult+0x40>
 800706c:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <__pow5mult+0xac>)
 800706e:	481e      	ldr	r0, [pc, #120]	@ (80070e8 <__pow5mult+0xb0>)
 8007070:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007074:	f000 fbea 	bl	800784c <__assert_func>
 8007078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800707c:	6004      	str	r4, [r0, #0]
 800707e:	60c4      	str	r4, [r0, #12]
 8007080:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007088:	b94c      	cbnz	r4, 800709e <__pow5mult+0x66>
 800708a:	f240 2171 	movw	r1, #625	@ 0x271
 800708e:	4638      	mov	r0, r7
 8007090:	f7ff ff1a 	bl	8006ec8 <__i2b>
 8007094:	2300      	movs	r3, #0
 8007096:	f8c8 0008 	str.w	r0, [r8, #8]
 800709a:	4604      	mov	r4, r0
 800709c:	6003      	str	r3, [r0, #0]
 800709e:	f04f 0900 	mov.w	r9, #0
 80070a2:	07eb      	lsls	r3, r5, #31
 80070a4:	d50a      	bpl.n	80070bc <__pow5mult+0x84>
 80070a6:	4631      	mov	r1, r6
 80070a8:	4622      	mov	r2, r4
 80070aa:	4638      	mov	r0, r7
 80070ac:	f7ff ff22 	bl	8006ef4 <__multiply>
 80070b0:	4631      	mov	r1, r6
 80070b2:	4680      	mov	r8, r0
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff fe53 	bl	8006d60 <_Bfree>
 80070ba:	4646      	mov	r6, r8
 80070bc:	106d      	asrs	r5, r5, #1
 80070be:	d00b      	beq.n	80070d8 <__pow5mult+0xa0>
 80070c0:	6820      	ldr	r0, [r4, #0]
 80070c2:	b938      	cbnz	r0, 80070d4 <__pow5mult+0x9c>
 80070c4:	4622      	mov	r2, r4
 80070c6:	4621      	mov	r1, r4
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff ff13 	bl	8006ef4 <__multiply>
 80070ce:	6020      	str	r0, [r4, #0]
 80070d0:	f8c0 9000 	str.w	r9, [r0]
 80070d4:	4604      	mov	r4, r0
 80070d6:	e7e4      	b.n	80070a2 <__pow5mult+0x6a>
 80070d8:	4630      	mov	r0, r6
 80070da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070de:	bf00      	nop
 80070e0:	08008188 	.word	0x08008188
 80070e4:	08008055 	.word	0x08008055
 80070e8:	080080d5 	.word	0x080080d5

080070ec <__lshift>:
 80070ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	460c      	mov	r4, r1
 80070f2:	6849      	ldr	r1, [r1, #4]
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070fa:	68a3      	ldr	r3, [r4, #8]
 80070fc:	4607      	mov	r7, r0
 80070fe:	4691      	mov	r9, r2
 8007100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007104:	f108 0601 	add.w	r6, r8, #1
 8007108:	42b3      	cmp	r3, r6
 800710a:	db0b      	blt.n	8007124 <__lshift+0x38>
 800710c:	4638      	mov	r0, r7
 800710e:	f7ff fde7 	bl	8006ce0 <_Balloc>
 8007112:	4605      	mov	r5, r0
 8007114:	b948      	cbnz	r0, 800712a <__lshift+0x3e>
 8007116:	4602      	mov	r2, r0
 8007118:	4b28      	ldr	r3, [pc, #160]	@ (80071bc <__lshift+0xd0>)
 800711a:	4829      	ldr	r0, [pc, #164]	@ (80071c0 <__lshift+0xd4>)
 800711c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007120:	f000 fb94 	bl	800784c <__assert_func>
 8007124:	3101      	adds	r1, #1
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	e7ee      	b.n	8007108 <__lshift+0x1c>
 800712a:	2300      	movs	r3, #0
 800712c:	f100 0114 	add.w	r1, r0, #20
 8007130:	f100 0210 	add.w	r2, r0, #16
 8007134:	4618      	mov	r0, r3
 8007136:	4553      	cmp	r3, sl
 8007138:	db33      	blt.n	80071a2 <__lshift+0xb6>
 800713a:	6920      	ldr	r0, [r4, #16]
 800713c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007140:	f104 0314 	add.w	r3, r4, #20
 8007144:	f019 091f 	ands.w	r9, r9, #31
 8007148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800714c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007150:	d02b      	beq.n	80071aa <__lshift+0xbe>
 8007152:	f1c9 0e20 	rsb	lr, r9, #32
 8007156:	468a      	mov	sl, r1
 8007158:	2200      	movs	r2, #0
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	fa00 f009 	lsl.w	r0, r0, r9
 8007160:	4310      	orrs	r0, r2
 8007162:	f84a 0b04 	str.w	r0, [sl], #4
 8007166:	f853 2b04 	ldr.w	r2, [r3], #4
 800716a:	459c      	cmp	ip, r3
 800716c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007170:	d8f3      	bhi.n	800715a <__lshift+0x6e>
 8007172:	ebac 0304 	sub.w	r3, ip, r4
 8007176:	3b15      	subs	r3, #21
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	3304      	adds	r3, #4
 800717e:	f104 0015 	add.w	r0, r4, #21
 8007182:	4560      	cmp	r0, ip
 8007184:	bf88      	it	hi
 8007186:	2304      	movhi	r3, #4
 8007188:	50ca      	str	r2, [r1, r3]
 800718a:	b10a      	cbz	r2, 8007190 <__lshift+0xa4>
 800718c:	f108 0602 	add.w	r6, r8, #2
 8007190:	3e01      	subs	r6, #1
 8007192:	4638      	mov	r0, r7
 8007194:	612e      	str	r6, [r5, #16]
 8007196:	4621      	mov	r1, r4
 8007198:	f7ff fde2 	bl	8006d60 <_Bfree>
 800719c:	4628      	mov	r0, r5
 800719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80071a6:	3301      	adds	r3, #1
 80071a8:	e7c5      	b.n	8007136 <__lshift+0x4a>
 80071aa:	3904      	subs	r1, #4
 80071ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80071b4:	459c      	cmp	ip, r3
 80071b6:	d8f9      	bhi.n	80071ac <__lshift+0xc0>
 80071b8:	e7ea      	b.n	8007190 <__lshift+0xa4>
 80071ba:	bf00      	nop
 80071bc:	080080c4 	.word	0x080080c4
 80071c0:	080080d5 	.word	0x080080d5

080071c4 <__mcmp>:
 80071c4:	690a      	ldr	r2, [r1, #16]
 80071c6:	4603      	mov	r3, r0
 80071c8:	6900      	ldr	r0, [r0, #16]
 80071ca:	1a80      	subs	r0, r0, r2
 80071cc:	b530      	push	{r4, r5, lr}
 80071ce:	d10e      	bne.n	80071ee <__mcmp+0x2a>
 80071d0:	3314      	adds	r3, #20
 80071d2:	3114      	adds	r1, #20
 80071d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071e4:	4295      	cmp	r5, r2
 80071e6:	d003      	beq.n	80071f0 <__mcmp+0x2c>
 80071e8:	d205      	bcs.n	80071f6 <__mcmp+0x32>
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	bd30      	pop	{r4, r5, pc}
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	d3f3      	bcc.n	80071dc <__mcmp+0x18>
 80071f4:	e7fb      	b.n	80071ee <__mcmp+0x2a>
 80071f6:	2001      	movs	r0, #1
 80071f8:	e7f9      	b.n	80071ee <__mcmp+0x2a>
	...

080071fc <__mdiff>:
 80071fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007200:	4689      	mov	r9, r1
 8007202:	4606      	mov	r6, r0
 8007204:	4611      	mov	r1, r2
 8007206:	4648      	mov	r0, r9
 8007208:	4614      	mov	r4, r2
 800720a:	f7ff ffdb 	bl	80071c4 <__mcmp>
 800720e:	1e05      	subs	r5, r0, #0
 8007210:	d112      	bne.n	8007238 <__mdiff+0x3c>
 8007212:	4629      	mov	r1, r5
 8007214:	4630      	mov	r0, r6
 8007216:	f7ff fd63 	bl	8006ce0 <_Balloc>
 800721a:	4602      	mov	r2, r0
 800721c:	b928      	cbnz	r0, 800722a <__mdiff+0x2e>
 800721e:	4b3f      	ldr	r3, [pc, #252]	@ (800731c <__mdiff+0x120>)
 8007220:	f240 2137 	movw	r1, #567	@ 0x237
 8007224:	483e      	ldr	r0, [pc, #248]	@ (8007320 <__mdiff+0x124>)
 8007226:	f000 fb11 	bl	800784c <__assert_func>
 800722a:	2301      	movs	r3, #1
 800722c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007230:	4610      	mov	r0, r2
 8007232:	b003      	add	sp, #12
 8007234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007238:	bfbc      	itt	lt
 800723a:	464b      	movlt	r3, r9
 800723c:	46a1      	movlt	r9, r4
 800723e:	4630      	mov	r0, r6
 8007240:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007244:	bfba      	itte	lt
 8007246:	461c      	movlt	r4, r3
 8007248:	2501      	movlt	r5, #1
 800724a:	2500      	movge	r5, #0
 800724c:	f7ff fd48 	bl	8006ce0 <_Balloc>
 8007250:	4602      	mov	r2, r0
 8007252:	b918      	cbnz	r0, 800725c <__mdiff+0x60>
 8007254:	4b31      	ldr	r3, [pc, #196]	@ (800731c <__mdiff+0x120>)
 8007256:	f240 2145 	movw	r1, #581	@ 0x245
 800725a:	e7e3      	b.n	8007224 <__mdiff+0x28>
 800725c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007260:	6926      	ldr	r6, [r4, #16]
 8007262:	60c5      	str	r5, [r0, #12]
 8007264:	f109 0310 	add.w	r3, r9, #16
 8007268:	f109 0514 	add.w	r5, r9, #20
 800726c:	f104 0e14 	add.w	lr, r4, #20
 8007270:	f100 0b14 	add.w	fp, r0, #20
 8007274:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007278:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	46d9      	mov	r9, fp
 8007280:	f04f 0c00 	mov.w	ip, #0
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	f85e 0b04 	ldr.w	r0, [lr], #4
 800728a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	fa1f f38a 	uxth.w	r3, sl
 8007294:	4619      	mov	r1, r3
 8007296:	b283      	uxth	r3, r0
 8007298:	1acb      	subs	r3, r1, r3
 800729a:	0c00      	lsrs	r0, r0, #16
 800729c:	4463      	add	r3, ip
 800729e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072ac:	4576      	cmp	r6, lr
 80072ae:	f849 3b04 	str.w	r3, [r9], #4
 80072b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072b6:	d8e5      	bhi.n	8007284 <__mdiff+0x88>
 80072b8:	1b33      	subs	r3, r6, r4
 80072ba:	3b15      	subs	r3, #21
 80072bc:	f023 0303 	bic.w	r3, r3, #3
 80072c0:	3415      	adds	r4, #21
 80072c2:	3304      	adds	r3, #4
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	bf38      	it	cc
 80072c8:	2304      	movcc	r3, #4
 80072ca:	441d      	add	r5, r3
 80072cc:	445b      	add	r3, fp
 80072ce:	461e      	mov	r6, r3
 80072d0:	462c      	mov	r4, r5
 80072d2:	4544      	cmp	r4, r8
 80072d4:	d30e      	bcc.n	80072f4 <__mdiff+0xf8>
 80072d6:	f108 0103 	add.w	r1, r8, #3
 80072da:	1b49      	subs	r1, r1, r5
 80072dc:	f021 0103 	bic.w	r1, r1, #3
 80072e0:	3d03      	subs	r5, #3
 80072e2:	45a8      	cmp	r8, r5
 80072e4:	bf38      	it	cc
 80072e6:	2100      	movcc	r1, #0
 80072e8:	440b      	add	r3, r1
 80072ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072ee:	b191      	cbz	r1, 8007316 <__mdiff+0x11a>
 80072f0:	6117      	str	r7, [r2, #16]
 80072f2:	e79d      	b.n	8007230 <__mdiff+0x34>
 80072f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80072f8:	46e6      	mov	lr, ip
 80072fa:	0c08      	lsrs	r0, r1, #16
 80072fc:	fa1c fc81 	uxtah	ip, ip, r1
 8007300:	4471      	add	r1, lr
 8007302:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007306:	b289      	uxth	r1, r1
 8007308:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800730c:	f846 1b04 	str.w	r1, [r6], #4
 8007310:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007314:	e7dd      	b.n	80072d2 <__mdiff+0xd6>
 8007316:	3f01      	subs	r7, #1
 8007318:	e7e7      	b.n	80072ea <__mdiff+0xee>
 800731a:	bf00      	nop
 800731c:	080080c4 	.word	0x080080c4
 8007320:	080080d5 	.word	0x080080d5

08007324 <__d2b>:
 8007324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007328:	460f      	mov	r7, r1
 800732a:	2101      	movs	r1, #1
 800732c:	ec59 8b10 	vmov	r8, r9, d0
 8007330:	4616      	mov	r6, r2
 8007332:	f7ff fcd5 	bl	8006ce0 <_Balloc>
 8007336:	4604      	mov	r4, r0
 8007338:	b930      	cbnz	r0, 8007348 <__d2b+0x24>
 800733a:	4602      	mov	r2, r0
 800733c:	4b23      	ldr	r3, [pc, #140]	@ (80073cc <__d2b+0xa8>)
 800733e:	4824      	ldr	r0, [pc, #144]	@ (80073d0 <__d2b+0xac>)
 8007340:	f240 310f 	movw	r1, #783	@ 0x30f
 8007344:	f000 fa82 	bl	800784c <__assert_func>
 8007348:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800734c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007350:	b10d      	cbz	r5, 8007356 <__d2b+0x32>
 8007352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	f1b8 0300 	subs.w	r3, r8, #0
 800735c:	d023      	beq.n	80073a6 <__d2b+0x82>
 800735e:	4668      	mov	r0, sp
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	f7ff fd84 	bl	8006e6e <__lo0bits>
 8007366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800736a:	b1d0      	cbz	r0, 80073a2 <__d2b+0x7e>
 800736c:	f1c0 0320 	rsb	r3, r0, #32
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	430b      	orrs	r3, r1
 8007376:	40c2      	lsrs	r2, r0
 8007378:	6163      	str	r3, [r4, #20]
 800737a:	9201      	str	r2, [sp, #4]
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	61a3      	str	r3, [r4, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf0c      	ite	eq
 8007384:	2201      	moveq	r2, #1
 8007386:	2202      	movne	r2, #2
 8007388:	6122      	str	r2, [r4, #16]
 800738a:	b1a5      	cbz	r5, 80073b6 <__d2b+0x92>
 800738c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007390:	4405      	add	r5, r0
 8007392:	603d      	str	r5, [r7, #0]
 8007394:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007398:	6030      	str	r0, [r6, #0]
 800739a:	4620      	mov	r0, r4
 800739c:	b003      	add	sp, #12
 800739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a2:	6161      	str	r1, [r4, #20]
 80073a4:	e7ea      	b.n	800737c <__d2b+0x58>
 80073a6:	a801      	add	r0, sp, #4
 80073a8:	f7ff fd61 	bl	8006e6e <__lo0bits>
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	6163      	str	r3, [r4, #20]
 80073b0:	3020      	adds	r0, #32
 80073b2:	2201      	movs	r2, #1
 80073b4:	e7e8      	b.n	8007388 <__d2b+0x64>
 80073b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073be:	6038      	str	r0, [r7, #0]
 80073c0:	6918      	ldr	r0, [r3, #16]
 80073c2:	f7ff fd35 	bl	8006e30 <__hi0bits>
 80073c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073ca:	e7e5      	b.n	8007398 <__d2b+0x74>
 80073cc:	080080c4 	.word	0x080080c4
 80073d0:	080080d5 	.word	0x080080d5

080073d4 <__ssputs_r>:
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	688e      	ldr	r6, [r1, #8]
 80073da:	461f      	mov	r7, r3
 80073dc:	42be      	cmp	r6, r7
 80073de:	680b      	ldr	r3, [r1, #0]
 80073e0:	4682      	mov	sl, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4690      	mov	r8, r2
 80073e6:	d82d      	bhi.n	8007444 <__ssputs_r+0x70>
 80073e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073f0:	d026      	beq.n	8007440 <__ssputs_r+0x6c>
 80073f2:	6965      	ldr	r5, [r4, #20]
 80073f4:	6909      	ldr	r1, [r1, #16]
 80073f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073fa:	eba3 0901 	sub.w	r9, r3, r1
 80073fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007402:	1c7b      	adds	r3, r7, #1
 8007404:	444b      	add	r3, r9
 8007406:	106d      	asrs	r5, r5, #1
 8007408:	429d      	cmp	r5, r3
 800740a:	bf38      	it	cc
 800740c:	461d      	movcc	r5, r3
 800740e:	0553      	lsls	r3, r2, #21
 8007410:	d527      	bpl.n	8007462 <__ssputs_r+0x8e>
 8007412:	4629      	mov	r1, r5
 8007414:	f7ff fbd8 	bl	8006bc8 <_malloc_r>
 8007418:	4606      	mov	r6, r0
 800741a:	b360      	cbz	r0, 8007476 <__ssputs_r+0xa2>
 800741c:	6921      	ldr	r1, [r4, #16]
 800741e:	464a      	mov	r2, r9
 8007420:	f000 fa06 	bl	8007830 <memcpy>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	6126      	str	r6, [r4, #16]
 8007432:	6165      	str	r5, [r4, #20]
 8007434:	444e      	add	r6, r9
 8007436:	eba5 0509 	sub.w	r5, r5, r9
 800743a:	6026      	str	r6, [r4, #0]
 800743c:	60a5      	str	r5, [r4, #8]
 800743e:	463e      	mov	r6, r7
 8007440:	42be      	cmp	r6, r7
 8007442:	d900      	bls.n	8007446 <__ssputs_r+0x72>
 8007444:	463e      	mov	r6, r7
 8007446:	6820      	ldr	r0, [r4, #0]
 8007448:	4632      	mov	r2, r6
 800744a:	4641      	mov	r1, r8
 800744c:	f000 f9c6 	bl	80077dc <memmove>
 8007450:	68a3      	ldr	r3, [r4, #8]
 8007452:	1b9b      	subs	r3, r3, r6
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	4433      	add	r3, r6
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	2000      	movs	r0, #0
 800745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007462:	462a      	mov	r2, r5
 8007464:	f000 fa36 	bl	80078d4 <_realloc_r>
 8007468:	4606      	mov	r6, r0
 800746a:	2800      	cmp	r0, #0
 800746c:	d1e0      	bne.n	8007430 <__ssputs_r+0x5c>
 800746e:	6921      	ldr	r1, [r4, #16]
 8007470:	4650      	mov	r0, sl
 8007472:	f7ff fb35 	bl	8006ae0 <_free_r>
 8007476:	230c      	movs	r3, #12
 8007478:	f8ca 3000 	str.w	r3, [sl]
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e7e9      	b.n	800745e <__ssputs_r+0x8a>
	...

0800748c <_svfiprintf_r>:
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4698      	mov	r8, r3
 8007492:	898b      	ldrh	r3, [r1, #12]
 8007494:	061b      	lsls	r3, r3, #24
 8007496:	b09d      	sub	sp, #116	@ 0x74
 8007498:	4607      	mov	r7, r0
 800749a:	460d      	mov	r5, r1
 800749c:	4614      	mov	r4, r2
 800749e:	d510      	bpl.n	80074c2 <_svfiprintf_r+0x36>
 80074a0:	690b      	ldr	r3, [r1, #16]
 80074a2:	b973      	cbnz	r3, 80074c2 <_svfiprintf_r+0x36>
 80074a4:	2140      	movs	r1, #64	@ 0x40
 80074a6:	f7ff fb8f 	bl	8006bc8 <_malloc_r>
 80074aa:	6028      	str	r0, [r5, #0]
 80074ac:	6128      	str	r0, [r5, #16]
 80074ae:	b930      	cbnz	r0, 80074be <_svfiprintf_r+0x32>
 80074b0:	230c      	movs	r3, #12
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	b01d      	add	sp, #116	@ 0x74
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074be:	2340      	movs	r3, #64	@ 0x40
 80074c0:	616b      	str	r3, [r5, #20]
 80074c2:	2300      	movs	r3, #0
 80074c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c6:	2320      	movs	r3, #32
 80074c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d0:	2330      	movs	r3, #48	@ 0x30
 80074d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007670 <_svfiprintf_r+0x1e4>
 80074d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074da:	f04f 0901 	mov.w	r9, #1
 80074de:	4623      	mov	r3, r4
 80074e0:	469a      	mov	sl, r3
 80074e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e6:	b10a      	cbz	r2, 80074ec <_svfiprintf_r+0x60>
 80074e8:	2a25      	cmp	r2, #37	@ 0x25
 80074ea:	d1f9      	bne.n	80074e0 <_svfiprintf_r+0x54>
 80074ec:	ebba 0b04 	subs.w	fp, sl, r4
 80074f0:	d00b      	beq.n	800750a <_svfiprintf_r+0x7e>
 80074f2:	465b      	mov	r3, fp
 80074f4:	4622      	mov	r2, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7ff ff6b 	bl	80073d4 <__ssputs_r>
 80074fe:	3001      	adds	r0, #1
 8007500:	f000 80a7 	beq.w	8007652 <_svfiprintf_r+0x1c6>
 8007504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007506:	445a      	add	r2, fp
 8007508:	9209      	str	r2, [sp, #36]	@ 0x24
 800750a:	f89a 3000 	ldrb.w	r3, [sl]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 809f 	beq.w	8007652 <_svfiprintf_r+0x1c6>
 8007514:	2300      	movs	r3, #0
 8007516:	f04f 32ff 	mov.w	r2, #4294967295
 800751a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800751e:	f10a 0a01 	add.w	sl, sl, #1
 8007522:	9304      	str	r3, [sp, #16]
 8007524:	9307      	str	r3, [sp, #28]
 8007526:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800752a:	931a      	str	r3, [sp, #104]	@ 0x68
 800752c:	4654      	mov	r4, sl
 800752e:	2205      	movs	r2, #5
 8007530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007534:	484e      	ldr	r0, [pc, #312]	@ (8007670 <_svfiprintf_r+0x1e4>)
 8007536:	f7f8 fe4b 	bl	80001d0 <memchr>
 800753a:	9a04      	ldr	r2, [sp, #16]
 800753c:	b9d8      	cbnz	r0, 8007576 <_svfiprintf_r+0xea>
 800753e:	06d0      	lsls	r0, r2, #27
 8007540:	bf44      	itt	mi
 8007542:	2320      	movmi	r3, #32
 8007544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007548:	0711      	lsls	r1, r2, #28
 800754a:	bf44      	itt	mi
 800754c:	232b      	movmi	r3, #43	@ 0x2b
 800754e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007552:	f89a 3000 	ldrb.w	r3, [sl]
 8007556:	2b2a      	cmp	r3, #42	@ 0x2a
 8007558:	d015      	beq.n	8007586 <_svfiprintf_r+0xfa>
 800755a:	9a07      	ldr	r2, [sp, #28]
 800755c:	4654      	mov	r4, sl
 800755e:	2000      	movs	r0, #0
 8007560:	f04f 0c0a 	mov.w	ip, #10
 8007564:	4621      	mov	r1, r4
 8007566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800756a:	3b30      	subs	r3, #48	@ 0x30
 800756c:	2b09      	cmp	r3, #9
 800756e:	d94b      	bls.n	8007608 <_svfiprintf_r+0x17c>
 8007570:	b1b0      	cbz	r0, 80075a0 <_svfiprintf_r+0x114>
 8007572:	9207      	str	r2, [sp, #28]
 8007574:	e014      	b.n	80075a0 <_svfiprintf_r+0x114>
 8007576:	eba0 0308 	sub.w	r3, r0, r8
 800757a:	fa09 f303 	lsl.w	r3, r9, r3
 800757e:	4313      	orrs	r3, r2
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	46a2      	mov	sl, r4
 8007584:	e7d2      	b.n	800752c <_svfiprintf_r+0xa0>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	1d19      	adds	r1, r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	9103      	str	r1, [sp, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfbb      	ittet	lt
 8007592:	425b      	neglt	r3, r3
 8007594:	f042 0202 	orrlt.w	r2, r2, #2
 8007598:	9307      	strge	r3, [sp, #28]
 800759a:	9307      	strlt	r3, [sp, #28]
 800759c:	bfb8      	it	lt
 800759e:	9204      	strlt	r2, [sp, #16]
 80075a0:	7823      	ldrb	r3, [r4, #0]
 80075a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80075a4:	d10a      	bne.n	80075bc <_svfiprintf_r+0x130>
 80075a6:	7863      	ldrb	r3, [r4, #1]
 80075a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075aa:	d132      	bne.n	8007612 <_svfiprintf_r+0x186>
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	1d1a      	adds	r2, r3, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	9203      	str	r2, [sp, #12]
 80075b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075b8:	3402      	adds	r4, #2
 80075ba:	9305      	str	r3, [sp, #20]
 80075bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007680 <_svfiprintf_r+0x1f4>
 80075c0:	7821      	ldrb	r1, [r4, #0]
 80075c2:	2203      	movs	r2, #3
 80075c4:	4650      	mov	r0, sl
 80075c6:	f7f8 fe03 	bl	80001d0 <memchr>
 80075ca:	b138      	cbz	r0, 80075dc <_svfiprintf_r+0x150>
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	eba0 000a 	sub.w	r0, r0, sl
 80075d2:	2240      	movs	r2, #64	@ 0x40
 80075d4:	4082      	lsls	r2, r0
 80075d6:	4313      	orrs	r3, r2
 80075d8:	3401      	adds	r4, #1
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e0:	4824      	ldr	r0, [pc, #144]	@ (8007674 <_svfiprintf_r+0x1e8>)
 80075e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075e6:	2206      	movs	r2, #6
 80075e8:	f7f8 fdf2 	bl	80001d0 <memchr>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d036      	beq.n	800765e <_svfiprintf_r+0x1d2>
 80075f0:	4b21      	ldr	r3, [pc, #132]	@ (8007678 <_svfiprintf_r+0x1ec>)
 80075f2:	bb1b      	cbnz	r3, 800763c <_svfiprintf_r+0x1b0>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	3307      	adds	r3, #7
 80075f8:	f023 0307 	bic.w	r3, r3, #7
 80075fc:	3308      	adds	r3, #8
 80075fe:	9303      	str	r3, [sp, #12]
 8007600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007602:	4433      	add	r3, r6
 8007604:	9309      	str	r3, [sp, #36]	@ 0x24
 8007606:	e76a      	b.n	80074de <_svfiprintf_r+0x52>
 8007608:	fb0c 3202 	mla	r2, ip, r2, r3
 800760c:	460c      	mov	r4, r1
 800760e:	2001      	movs	r0, #1
 8007610:	e7a8      	b.n	8007564 <_svfiprintf_r+0xd8>
 8007612:	2300      	movs	r3, #0
 8007614:	3401      	adds	r4, #1
 8007616:	9305      	str	r3, [sp, #20]
 8007618:	4619      	mov	r1, r3
 800761a:	f04f 0c0a 	mov.w	ip, #10
 800761e:	4620      	mov	r0, r4
 8007620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007624:	3a30      	subs	r2, #48	@ 0x30
 8007626:	2a09      	cmp	r2, #9
 8007628:	d903      	bls.n	8007632 <_svfiprintf_r+0x1a6>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0c6      	beq.n	80075bc <_svfiprintf_r+0x130>
 800762e:	9105      	str	r1, [sp, #20]
 8007630:	e7c4      	b.n	80075bc <_svfiprintf_r+0x130>
 8007632:	fb0c 2101 	mla	r1, ip, r1, r2
 8007636:	4604      	mov	r4, r0
 8007638:	2301      	movs	r3, #1
 800763a:	e7f0      	b.n	800761e <_svfiprintf_r+0x192>
 800763c:	ab03      	add	r3, sp, #12
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	462a      	mov	r2, r5
 8007642:	4b0e      	ldr	r3, [pc, #56]	@ (800767c <_svfiprintf_r+0x1f0>)
 8007644:	a904      	add	r1, sp, #16
 8007646:	4638      	mov	r0, r7
 8007648:	f7fd fe80 	bl	800534c <_printf_float>
 800764c:	1c42      	adds	r2, r0, #1
 800764e:	4606      	mov	r6, r0
 8007650:	d1d6      	bne.n	8007600 <_svfiprintf_r+0x174>
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	065b      	lsls	r3, r3, #25
 8007656:	f53f af2d 	bmi.w	80074b4 <_svfiprintf_r+0x28>
 800765a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800765c:	e72c      	b.n	80074b8 <_svfiprintf_r+0x2c>
 800765e:	ab03      	add	r3, sp, #12
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462a      	mov	r2, r5
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <_svfiprintf_r+0x1f0>)
 8007666:	a904      	add	r1, sp, #16
 8007668:	4638      	mov	r0, r7
 800766a:	f7fe f907 	bl	800587c <_printf_i>
 800766e:	e7ed      	b.n	800764c <_svfiprintf_r+0x1c0>
 8007670:	0800812e 	.word	0x0800812e
 8007674:	08008138 	.word	0x08008138
 8007678:	0800534d 	.word	0x0800534d
 800767c:	080073d5 	.word	0x080073d5
 8007680:	08008134 	.word	0x08008134

08007684 <__sflush_r>:
 8007684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768c:	0716      	lsls	r6, r2, #28
 800768e:	4605      	mov	r5, r0
 8007690:	460c      	mov	r4, r1
 8007692:	d454      	bmi.n	800773e <__sflush_r+0xba>
 8007694:	684b      	ldr	r3, [r1, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dc02      	bgt.n	80076a0 <__sflush_r+0x1c>
 800769a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd48      	ble.n	8007732 <__sflush_r+0xae>
 80076a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076a2:	2e00      	cmp	r6, #0
 80076a4:	d045      	beq.n	8007732 <__sflush_r+0xae>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076ac:	682f      	ldr	r7, [r5, #0]
 80076ae:	6a21      	ldr	r1, [r4, #32]
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	d030      	beq.n	8007716 <__sflush_r+0x92>
 80076b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	0759      	lsls	r1, r3, #29
 80076ba:	d505      	bpl.n	80076c8 <__sflush_r+0x44>
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076c2:	b10b      	cbz	r3, 80076c8 <__sflush_r+0x44>
 80076c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076c6:	1ad2      	subs	r2, r2, r3
 80076c8:	2300      	movs	r3, #0
 80076ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076cc:	6a21      	ldr	r1, [r4, #32]
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b0      	blx	r6
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	d106      	bne.n	80076e6 <__sflush_r+0x62>
 80076d8:	6829      	ldr	r1, [r5, #0]
 80076da:	291d      	cmp	r1, #29
 80076dc:	d82b      	bhi.n	8007736 <__sflush_r+0xb2>
 80076de:	4a2a      	ldr	r2, [pc, #168]	@ (8007788 <__sflush_r+0x104>)
 80076e0:	40ca      	lsrs	r2, r1
 80076e2:	07d6      	lsls	r6, r2, #31
 80076e4:	d527      	bpl.n	8007736 <__sflush_r+0xb2>
 80076e6:	2200      	movs	r2, #0
 80076e8:	6062      	str	r2, [r4, #4]
 80076ea:	04d9      	lsls	r1, r3, #19
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	6022      	str	r2, [r4, #0]
 80076f0:	d504      	bpl.n	80076fc <__sflush_r+0x78>
 80076f2:	1c42      	adds	r2, r0, #1
 80076f4:	d101      	bne.n	80076fa <__sflush_r+0x76>
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	b903      	cbnz	r3, 80076fc <__sflush_r+0x78>
 80076fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80076fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076fe:	602f      	str	r7, [r5, #0]
 8007700:	b1b9      	cbz	r1, 8007732 <__sflush_r+0xae>
 8007702:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007706:	4299      	cmp	r1, r3
 8007708:	d002      	beq.n	8007710 <__sflush_r+0x8c>
 800770a:	4628      	mov	r0, r5
 800770c:	f7ff f9e8 	bl	8006ae0 <_free_r>
 8007710:	2300      	movs	r3, #0
 8007712:	6363      	str	r3, [r4, #52]	@ 0x34
 8007714:	e00d      	b.n	8007732 <__sflush_r+0xae>
 8007716:	2301      	movs	r3, #1
 8007718:	4628      	mov	r0, r5
 800771a:	47b0      	blx	r6
 800771c:	4602      	mov	r2, r0
 800771e:	1c50      	adds	r0, r2, #1
 8007720:	d1c9      	bne.n	80076b6 <__sflush_r+0x32>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0c6      	beq.n	80076b6 <__sflush_r+0x32>
 8007728:	2b1d      	cmp	r3, #29
 800772a:	d001      	beq.n	8007730 <__sflush_r+0xac>
 800772c:	2b16      	cmp	r3, #22
 800772e:	d11e      	bne.n	800776e <__sflush_r+0xea>
 8007730:	602f      	str	r7, [r5, #0]
 8007732:	2000      	movs	r0, #0
 8007734:	e022      	b.n	800777c <__sflush_r+0xf8>
 8007736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773a:	b21b      	sxth	r3, r3
 800773c:	e01b      	b.n	8007776 <__sflush_r+0xf2>
 800773e:	690f      	ldr	r7, [r1, #16]
 8007740:	2f00      	cmp	r7, #0
 8007742:	d0f6      	beq.n	8007732 <__sflush_r+0xae>
 8007744:	0793      	lsls	r3, r2, #30
 8007746:	680e      	ldr	r6, [r1, #0]
 8007748:	bf08      	it	eq
 800774a:	694b      	ldreq	r3, [r1, #20]
 800774c:	600f      	str	r7, [r1, #0]
 800774e:	bf18      	it	ne
 8007750:	2300      	movne	r3, #0
 8007752:	eba6 0807 	sub.w	r8, r6, r7
 8007756:	608b      	str	r3, [r1, #8]
 8007758:	f1b8 0f00 	cmp.w	r8, #0
 800775c:	dde9      	ble.n	8007732 <__sflush_r+0xae>
 800775e:	6a21      	ldr	r1, [r4, #32]
 8007760:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007762:	4643      	mov	r3, r8
 8007764:	463a      	mov	r2, r7
 8007766:	4628      	mov	r0, r5
 8007768:	47b0      	blx	r6
 800776a:	2800      	cmp	r0, #0
 800776c:	dc08      	bgt.n	8007780 <__sflush_r+0xfc>
 800776e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007776:	81a3      	strh	r3, [r4, #12]
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	4407      	add	r7, r0
 8007782:	eba8 0800 	sub.w	r8, r8, r0
 8007786:	e7e7      	b.n	8007758 <__sflush_r+0xd4>
 8007788:	20400001 	.word	0x20400001

0800778c <_fflush_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	690b      	ldr	r3, [r1, #16]
 8007790:	4605      	mov	r5, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b913      	cbnz	r3, 800779c <_fflush_r+0x10>
 8007796:	2500      	movs	r5, #0
 8007798:	4628      	mov	r0, r5
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	b118      	cbz	r0, 80077a6 <_fflush_r+0x1a>
 800779e:	6a03      	ldr	r3, [r0, #32]
 80077a0:	b90b      	cbnz	r3, 80077a6 <_fflush_r+0x1a>
 80077a2:	f7fe fa15 	bl	8005bd0 <__sinit>
 80077a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f3      	beq.n	8007796 <_fflush_r+0xa>
 80077ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077b0:	07d0      	lsls	r0, r2, #31
 80077b2:	d404      	bmi.n	80077be <_fflush_r+0x32>
 80077b4:	0599      	lsls	r1, r3, #22
 80077b6:	d402      	bmi.n	80077be <_fflush_r+0x32>
 80077b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ba:	f7fe fb36 	bl	8005e2a <__retarget_lock_acquire_recursive>
 80077be:	4628      	mov	r0, r5
 80077c0:	4621      	mov	r1, r4
 80077c2:	f7ff ff5f 	bl	8007684 <__sflush_r>
 80077c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077c8:	07da      	lsls	r2, r3, #31
 80077ca:	4605      	mov	r5, r0
 80077cc:	d4e4      	bmi.n	8007798 <_fflush_r+0xc>
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	059b      	lsls	r3, r3, #22
 80077d2:	d4e1      	bmi.n	8007798 <_fflush_r+0xc>
 80077d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077d6:	f7fe fb29 	bl	8005e2c <__retarget_lock_release_recursive>
 80077da:	e7dd      	b.n	8007798 <_fflush_r+0xc>

080077dc <memmove>:
 80077dc:	4288      	cmp	r0, r1
 80077de:	b510      	push	{r4, lr}
 80077e0:	eb01 0402 	add.w	r4, r1, r2
 80077e4:	d902      	bls.n	80077ec <memmove+0x10>
 80077e6:	4284      	cmp	r4, r0
 80077e8:	4623      	mov	r3, r4
 80077ea:	d807      	bhi.n	80077fc <memmove+0x20>
 80077ec:	1e43      	subs	r3, r0, #1
 80077ee:	42a1      	cmp	r1, r4
 80077f0:	d008      	beq.n	8007804 <memmove+0x28>
 80077f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077fa:	e7f8      	b.n	80077ee <memmove+0x12>
 80077fc:	4402      	add	r2, r0
 80077fe:	4601      	mov	r1, r0
 8007800:	428a      	cmp	r2, r1
 8007802:	d100      	bne.n	8007806 <memmove+0x2a>
 8007804:	bd10      	pop	{r4, pc}
 8007806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800780a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800780e:	e7f7      	b.n	8007800 <memmove+0x24>

08007810 <_sbrk_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d06      	ldr	r5, [pc, #24]	@ (800782c <_sbrk_r+0x1c>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	f7fa fa1c 	bl	8001c58 <_sbrk>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_sbrk_r+0x1a>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_sbrk_r+0x1a>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20000524 	.word	0x20000524

08007830 <memcpy>:
 8007830:	440a      	add	r2, r1
 8007832:	4291      	cmp	r1, r2
 8007834:	f100 33ff 	add.w	r3, r0, #4294967295
 8007838:	d100      	bne.n	800783c <memcpy+0xc>
 800783a:	4770      	bx	lr
 800783c:	b510      	push	{r4, lr}
 800783e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007846:	4291      	cmp	r1, r2
 8007848:	d1f9      	bne.n	800783e <memcpy+0xe>
 800784a:	bd10      	pop	{r4, pc}

0800784c <__assert_func>:
 800784c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800784e:	4614      	mov	r4, r2
 8007850:	461a      	mov	r2, r3
 8007852:	4b09      	ldr	r3, [pc, #36]	@ (8007878 <__assert_func+0x2c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4605      	mov	r5, r0
 8007858:	68d8      	ldr	r0, [r3, #12]
 800785a:	b14c      	cbz	r4, 8007870 <__assert_func+0x24>
 800785c:	4b07      	ldr	r3, [pc, #28]	@ (800787c <__assert_func+0x30>)
 800785e:	9100      	str	r1, [sp, #0]
 8007860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007864:	4906      	ldr	r1, [pc, #24]	@ (8007880 <__assert_func+0x34>)
 8007866:	462b      	mov	r3, r5
 8007868:	f000 f870 	bl	800794c <fiprintf>
 800786c:	f000 f880 	bl	8007970 <abort>
 8007870:	4b04      	ldr	r3, [pc, #16]	@ (8007884 <__assert_func+0x38>)
 8007872:	461c      	mov	r4, r3
 8007874:	e7f3      	b.n	800785e <__assert_func+0x12>
 8007876:	bf00      	nop
 8007878:	20000028 	.word	0x20000028
 800787c:	08008149 	.word	0x08008149
 8007880:	08008156 	.word	0x08008156
 8007884:	08008184 	.word	0x08008184

08007888 <_calloc_r>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	fba1 5402 	umull	r5, r4, r1, r2
 800788e:	b934      	cbnz	r4, 800789e <_calloc_r+0x16>
 8007890:	4629      	mov	r1, r5
 8007892:	f7ff f999 	bl	8006bc8 <_malloc_r>
 8007896:	4606      	mov	r6, r0
 8007898:	b928      	cbnz	r0, 80078a6 <_calloc_r+0x1e>
 800789a:	4630      	mov	r0, r6
 800789c:	bd70      	pop	{r4, r5, r6, pc}
 800789e:	220c      	movs	r2, #12
 80078a0:	6002      	str	r2, [r0, #0]
 80078a2:	2600      	movs	r6, #0
 80078a4:	e7f9      	b.n	800789a <_calloc_r+0x12>
 80078a6:	462a      	mov	r2, r5
 80078a8:	4621      	mov	r1, r4
 80078aa:	f7fe fa40 	bl	8005d2e <memset>
 80078ae:	e7f4      	b.n	800789a <_calloc_r+0x12>

080078b0 <__ascii_mbtowc>:
 80078b0:	b082      	sub	sp, #8
 80078b2:	b901      	cbnz	r1, 80078b6 <__ascii_mbtowc+0x6>
 80078b4:	a901      	add	r1, sp, #4
 80078b6:	b142      	cbz	r2, 80078ca <__ascii_mbtowc+0x1a>
 80078b8:	b14b      	cbz	r3, 80078ce <__ascii_mbtowc+0x1e>
 80078ba:	7813      	ldrb	r3, [r2, #0]
 80078bc:	600b      	str	r3, [r1, #0]
 80078be:	7812      	ldrb	r2, [r2, #0]
 80078c0:	1e10      	subs	r0, r2, #0
 80078c2:	bf18      	it	ne
 80078c4:	2001      	movne	r0, #1
 80078c6:	b002      	add	sp, #8
 80078c8:	4770      	bx	lr
 80078ca:	4610      	mov	r0, r2
 80078cc:	e7fb      	b.n	80078c6 <__ascii_mbtowc+0x16>
 80078ce:	f06f 0001 	mvn.w	r0, #1
 80078d2:	e7f8      	b.n	80078c6 <__ascii_mbtowc+0x16>

080078d4 <_realloc_r>:
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	4607      	mov	r7, r0
 80078da:	4614      	mov	r4, r2
 80078dc:	460d      	mov	r5, r1
 80078de:	b921      	cbnz	r1, 80078ea <_realloc_r+0x16>
 80078e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e4:	4611      	mov	r1, r2
 80078e6:	f7ff b96f 	b.w	8006bc8 <_malloc_r>
 80078ea:	b92a      	cbnz	r2, 80078f8 <_realloc_r+0x24>
 80078ec:	f7ff f8f8 	bl	8006ae0 <_free_r>
 80078f0:	4625      	mov	r5, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f8:	f000 f841 	bl	800797e <_malloc_usable_size_r>
 80078fc:	4284      	cmp	r4, r0
 80078fe:	4606      	mov	r6, r0
 8007900:	d802      	bhi.n	8007908 <_realloc_r+0x34>
 8007902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007906:	d8f4      	bhi.n	80078f2 <_realloc_r+0x1e>
 8007908:	4621      	mov	r1, r4
 800790a:	4638      	mov	r0, r7
 800790c:	f7ff f95c 	bl	8006bc8 <_malloc_r>
 8007910:	4680      	mov	r8, r0
 8007912:	b908      	cbnz	r0, 8007918 <_realloc_r+0x44>
 8007914:	4645      	mov	r5, r8
 8007916:	e7ec      	b.n	80078f2 <_realloc_r+0x1e>
 8007918:	42b4      	cmp	r4, r6
 800791a:	4622      	mov	r2, r4
 800791c:	4629      	mov	r1, r5
 800791e:	bf28      	it	cs
 8007920:	4632      	movcs	r2, r6
 8007922:	f7ff ff85 	bl	8007830 <memcpy>
 8007926:	4629      	mov	r1, r5
 8007928:	4638      	mov	r0, r7
 800792a:	f7ff f8d9 	bl	8006ae0 <_free_r>
 800792e:	e7f1      	b.n	8007914 <_realloc_r+0x40>

08007930 <__ascii_wctomb>:
 8007930:	4603      	mov	r3, r0
 8007932:	4608      	mov	r0, r1
 8007934:	b141      	cbz	r1, 8007948 <__ascii_wctomb+0x18>
 8007936:	2aff      	cmp	r2, #255	@ 0xff
 8007938:	d904      	bls.n	8007944 <__ascii_wctomb+0x14>
 800793a:	228a      	movs	r2, #138	@ 0x8a
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	f04f 30ff 	mov.w	r0, #4294967295
 8007942:	4770      	bx	lr
 8007944:	700a      	strb	r2, [r1, #0]
 8007946:	2001      	movs	r0, #1
 8007948:	4770      	bx	lr
	...

0800794c <fiprintf>:
 800794c:	b40e      	push	{r1, r2, r3}
 800794e:	b503      	push	{r0, r1, lr}
 8007950:	4601      	mov	r1, r0
 8007952:	ab03      	add	r3, sp, #12
 8007954:	4805      	ldr	r0, [pc, #20]	@ (800796c <fiprintf+0x20>)
 8007956:	f853 2b04 	ldr.w	r2, [r3], #4
 800795a:	6800      	ldr	r0, [r0, #0]
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	f000 f83f 	bl	80079e0 <_vfiprintf_r>
 8007962:	b002      	add	sp, #8
 8007964:	f85d eb04 	ldr.w	lr, [sp], #4
 8007968:	b003      	add	sp, #12
 800796a:	4770      	bx	lr
 800796c:	20000028 	.word	0x20000028

08007970 <abort>:
 8007970:	b508      	push	{r3, lr}
 8007972:	2006      	movs	r0, #6
 8007974:	f000 fa08 	bl	8007d88 <raise>
 8007978:	2001      	movs	r0, #1
 800797a:	f7fa f8f5 	bl	8001b68 <_exit>

0800797e <_malloc_usable_size_r>:
 800797e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007982:	1f18      	subs	r0, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	bfbc      	itt	lt
 8007988:	580b      	ldrlt	r3, [r1, r0]
 800798a:	18c0      	addlt	r0, r0, r3
 800798c:	4770      	bx	lr

0800798e <__sfputc_r>:
 800798e:	6893      	ldr	r3, [r2, #8]
 8007990:	3b01      	subs	r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	b410      	push	{r4}
 8007996:	6093      	str	r3, [r2, #8]
 8007998:	da08      	bge.n	80079ac <__sfputc_r+0x1e>
 800799a:	6994      	ldr	r4, [r2, #24]
 800799c:	42a3      	cmp	r3, r4
 800799e:	db01      	blt.n	80079a4 <__sfputc_r+0x16>
 80079a0:	290a      	cmp	r1, #10
 80079a2:	d103      	bne.n	80079ac <__sfputc_r+0x1e>
 80079a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a8:	f000 b932 	b.w	8007c10 <__swbuf_r>
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	1c58      	adds	r0, r3, #1
 80079b0:	6010      	str	r0, [r2, #0]
 80079b2:	7019      	strb	r1, [r3, #0]
 80079b4:	4608      	mov	r0, r1
 80079b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <__sfputs_r>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	4606      	mov	r6, r0
 80079c0:	460f      	mov	r7, r1
 80079c2:	4614      	mov	r4, r2
 80079c4:	18d5      	adds	r5, r2, r3
 80079c6:	42ac      	cmp	r4, r5
 80079c8:	d101      	bne.n	80079ce <__sfputs_r+0x12>
 80079ca:	2000      	movs	r0, #0
 80079cc:	e007      	b.n	80079de <__sfputs_r+0x22>
 80079ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d2:	463a      	mov	r2, r7
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7ff ffda 	bl	800798e <__sfputc_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d1f3      	bne.n	80079c6 <__sfputs_r+0xa>
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079e0 <_vfiprintf_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	460d      	mov	r5, r1
 80079e6:	b09d      	sub	sp, #116	@ 0x74
 80079e8:	4614      	mov	r4, r2
 80079ea:	4698      	mov	r8, r3
 80079ec:	4606      	mov	r6, r0
 80079ee:	b118      	cbz	r0, 80079f8 <_vfiprintf_r+0x18>
 80079f0:	6a03      	ldr	r3, [r0, #32]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_vfiprintf_r+0x18>
 80079f4:	f7fe f8ec 	bl	8005bd0 <__sinit>
 80079f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079fa:	07d9      	lsls	r1, r3, #31
 80079fc:	d405      	bmi.n	8007a0a <_vfiprintf_r+0x2a>
 80079fe:	89ab      	ldrh	r3, [r5, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_vfiprintf_r+0x2a>
 8007a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a06:	f7fe fa10 	bl	8005e2a <__retarget_lock_acquire_recursive>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	071b      	lsls	r3, r3, #28
 8007a0e:	d501      	bpl.n	8007a14 <_vfiprintf_r+0x34>
 8007a10:	692b      	ldr	r3, [r5, #16]
 8007a12:	b99b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x5c>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f000 f938 	bl	8007c8c <__swsetup_r>
 8007a1c:	b170      	cbz	r0, 8007a3c <_vfiprintf_r+0x5c>
 8007a1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a20:	07dc      	lsls	r4, r3, #31
 8007a22:	d504      	bpl.n	8007a2e <_vfiprintf_r+0x4e>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	b01d      	add	sp, #116	@ 0x74
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	0598      	lsls	r0, r3, #22
 8007a32:	d4f7      	bmi.n	8007a24 <_vfiprintf_r+0x44>
 8007a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a36:	f7fe f9f9 	bl	8005e2c <__retarget_lock_release_recursive>
 8007a3a:	e7f3      	b.n	8007a24 <_vfiprintf_r+0x44>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a40:	2320      	movs	r3, #32
 8007a42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4a:	2330      	movs	r3, #48	@ 0x30
 8007a4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bfc <_vfiprintf_r+0x21c>
 8007a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a54:	f04f 0901 	mov.w	r9, #1
 8007a58:	4623      	mov	r3, r4
 8007a5a:	469a      	mov	sl, r3
 8007a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a60:	b10a      	cbz	r2, 8007a66 <_vfiprintf_r+0x86>
 8007a62:	2a25      	cmp	r2, #37	@ 0x25
 8007a64:	d1f9      	bne.n	8007a5a <_vfiprintf_r+0x7a>
 8007a66:	ebba 0b04 	subs.w	fp, sl, r4
 8007a6a:	d00b      	beq.n	8007a84 <_vfiprintf_r+0xa4>
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	4622      	mov	r2, r4
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff ffa2 	bl	80079bc <__sfputs_r>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f000 80a7 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a80:	445a      	add	r2, fp
 8007a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a84:	f89a 3000 	ldrb.w	r3, [sl]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 809f 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f04f 32ff 	mov.w	r2, #4294967295
 8007a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a98:	f10a 0a01 	add.w	sl, sl, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa6:	4654      	mov	r4, sl
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4853      	ldr	r0, [pc, #332]	@ (8007bfc <_vfiprintf_r+0x21c>)
 8007ab0:	f7f8 fb8e 	bl	80001d0 <memchr>
 8007ab4:	9a04      	ldr	r2, [sp, #16]
 8007ab6:	b9d8      	cbnz	r0, 8007af0 <_vfiprintf_r+0x110>
 8007ab8:	06d1      	lsls	r1, r2, #27
 8007aba:	bf44      	itt	mi
 8007abc:	2320      	movmi	r3, #32
 8007abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ac2:	0713      	lsls	r3, r2, #28
 8007ac4:	bf44      	itt	mi
 8007ac6:	232b      	movmi	r3, #43	@ 0x2b
 8007ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007acc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad2:	d015      	beq.n	8007b00 <_vfiprintf_r+0x120>
 8007ad4:	9a07      	ldr	r2, [sp, #28]
 8007ad6:	4654      	mov	r4, sl
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f04f 0c0a 	mov.w	ip, #10
 8007ade:	4621      	mov	r1, r4
 8007ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae4:	3b30      	subs	r3, #48	@ 0x30
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	d94b      	bls.n	8007b82 <_vfiprintf_r+0x1a2>
 8007aea:	b1b0      	cbz	r0, 8007b1a <_vfiprintf_r+0x13a>
 8007aec:	9207      	str	r2, [sp, #28]
 8007aee:	e014      	b.n	8007b1a <_vfiprintf_r+0x13a>
 8007af0:	eba0 0308 	sub.w	r3, r0, r8
 8007af4:	fa09 f303 	lsl.w	r3, r9, r3
 8007af8:	4313      	orrs	r3, r2
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	46a2      	mov	sl, r4
 8007afe:	e7d2      	b.n	8007aa6 <_vfiprintf_r+0xc6>
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	1d19      	adds	r1, r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	9103      	str	r1, [sp, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bfbb      	ittet	lt
 8007b0c:	425b      	neglt	r3, r3
 8007b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b12:	9307      	strge	r3, [sp, #28]
 8007b14:	9307      	strlt	r3, [sp, #28]
 8007b16:	bfb8      	it	lt
 8007b18:	9204      	strlt	r2, [sp, #16]
 8007b1a:	7823      	ldrb	r3, [r4, #0]
 8007b1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b1e:	d10a      	bne.n	8007b36 <_vfiprintf_r+0x156>
 8007b20:	7863      	ldrb	r3, [r4, #1]
 8007b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b24:	d132      	bne.n	8007b8c <_vfiprintf_r+0x1ac>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	1d1a      	adds	r2, r3, #4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	9203      	str	r2, [sp, #12]
 8007b2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b32:	3402      	adds	r4, #2
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c0c <_vfiprintf_r+0x22c>
 8007b3a:	7821      	ldrb	r1, [r4, #0]
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	4650      	mov	r0, sl
 8007b40:	f7f8 fb46 	bl	80001d0 <memchr>
 8007b44:	b138      	cbz	r0, 8007b56 <_vfiprintf_r+0x176>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	eba0 000a 	sub.w	r0, r0, sl
 8007b4c:	2240      	movs	r2, #64	@ 0x40
 8007b4e:	4082      	lsls	r2, r0
 8007b50:	4313      	orrs	r3, r2
 8007b52:	3401      	adds	r4, #1
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5a:	4829      	ldr	r0, [pc, #164]	@ (8007c00 <_vfiprintf_r+0x220>)
 8007b5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b60:	2206      	movs	r2, #6
 8007b62:	f7f8 fb35 	bl	80001d0 <memchr>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d03f      	beq.n	8007bea <_vfiprintf_r+0x20a>
 8007b6a:	4b26      	ldr	r3, [pc, #152]	@ (8007c04 <_vfiprintf_r+0x224>)
 8007b6c:	bb1b      	cbnz	r3, 8007bb6 <_vfiprintf_r+0x1d6>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	3307      	adds	r3, #7
 8007b72:	f023 0307 	bic.w	r3, r3, #7
 8007b76:	3308      	adds	r3, #8
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7c:	443b      	add	r3, r7
 8007b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b80:	e76a      	b.n	8007a58 <_vfiprintf_r+0x78>
 8007b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b86:	460c      	mov	r4, r1
 8007b88:	2001      	movs	r0, #1
 8007b8a:	e7a8      	b.n	8007ade <_vfiprintf_r+0xfe>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	3401      	adds	r4, #1
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	4619      	mov	r1, r3
 8007b94:	f04f 0c0a 	mov.w	ip, #10
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9e:	3a30      	subs	r2, #48	@ 0x30
 8007ba0:	2a09      	cmp	r2, #9
 8007ba2:	d903      	bls.n	8007bac <_vfiprintf_r+0x1cc>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0c6      	beq.n	8007b36 <_vfiprintf_r+0x156>
 8007ba8:	9105      	str	r1, [sp, #20]
 8007baa:	e7c4      	b.n	8007b36 <_vfiprintf_r+0x156>
 8007bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e7f0      	b.n	8007b98 <_vfiprintf_r+0x1b8>
 8007bb6:	ab03      	add	r3, sp, #12
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	462a      	mov	r2, r5
 8007bbc:	4b12      	ldr	r3, [pc, #72]	@ (8007c08 <_vfiprintf_r+0x228>)
 8007bbe:	a904      	add	r1, sp, #16
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7fd fbc3 	bl	800534c <_printf_float>
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	1c78      	adds	r0, r7, #1
 8007bca:	d1d6      	bne.n	8007b7a <_vfiprintf_r+0x19a>
 8007bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bce:	07d9      	lsls	r1, r3, #31
 8007bd0:	d405      	bmi.n	8007bde <_vfiprintf_r+0x1fe>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	059a      	lsls	r2, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_vfiprintf_r+0x1fe>
 8007bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bda:	f7fe f927 	bl	8005e2c <__retarget_lock_release_recursive>
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	065b      	lsls	r3, r3, #25
 8007be2:	f53f af1f 	bmi.w	8007a24 <_vfiprintf_r+0x44>
 8007be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007be8:	e71e      	b.n	8007a28 <_vfiprintf_r+0x48>
 8007bea:	ab03      	add	r3, sp, #12
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	462a      	mov	r2, r5
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <_vfiprintf_r+0x228>)
 8007bf2:	a904      	add	r1, sp, #16
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7fd fe41 	bl	800587c <_printf_i>
 8007bfa:	e7e4      	b.n	8007bc6 <_vfiprintf_r+0x1e6>
 8007bfc:	0800812e 	.word	0x0800812e
 8007c00:	08008138 	.word	0x08008138
 8007c04:	0800534d 	.word	0x0800534d
 8007c08:	080079bd 	.word	0x080079bd
 8007c0c:	08008134 	.word	0x08008134

08007c10 <__swbuf_r>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	460e      	mov	r6, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	4605      	mov	r5, r0
 8007c18:	b118      	cbz	r0, 8007c22 <__swbuf_r+0x12>
 8007c1a:	6a03      	ldr	r3, [r0, #32]
 8007c1c:	b90b      	cbnz	r3, 8007c22 <__swbuf_r+0x12>
 8007c1e:	f7fd ffd7 	bl	8005bd0 <__sinit>
 8007c22:	69a3      	ldr	r3, [r4, #24]
 8007c24:	60a3      	str	r3, [r4, #8]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	071a      	lsls	r2, r3, #28
 8007c2a:	d501      	bpl.n	8007c30 <__swbuf_r+0x20>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	b943      	cbnz	r3, 8007c42 <__swbuf_r+0x32>
 8007c30:	4621      	mov	r1, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 f82a 	bl	8007c8c <__swsetup_r>
 8007c38:	b118      	cbz	r0, 8007c42 <__swbuf_r+0x32>
 8007c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c3e:	4638      	mov	r0, r7
 8007c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	6922      	ldr	r2, [r4, #16]
 8007c46:	1a98      	subs	r0, r3, r2
 8007c48:	6963      	ldr	r3, [r4, #20]
 8007c4a:	b2f6      	uxtb	r6, r6
 8007c4c:	4283      	cmp	r3, r0
 8007c4e:	4637      	mov	r7, r6
 8007c50:	dc05      	bgt.n	8007c5e <__swbuf_r+0x4e>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff fd99 	bl	800778c <_fflush_r>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d1ed      	bne.n	8007c3a <__swbuf_r+0x2a>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	60a3      	str	r3, [r4, #8]
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	701e      	strb	r6, [r3, #0]
 8007c6c:	6962      	ldr	r2, [r4, #20]
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d004      	beq.n	8007c7e <__swbuf_r+0x6e>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d5e1      	bpl.n	8007c3e <__swbuf_r+0x2e>
 8007c7a:	2e0a      	cmp	r6, #10
 8007c7c:	d1df      	bne.n	8007c3e <__swbuf_r+0x2e>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7ff fd83 	bl	800778c <_fflush_r>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d0d9      	beq.n	8007c3e <__swbuf_r+0x2e>
 8007c8a:	e7d6      	b.n	8007c3a <__swbuf_r+0x2a>

08007c8c <__swsetup_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <__swsetup_r+0xa8>)
 8007c90:	4605      	mov	r5, r0
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	460c      	mov	r4, r1
 8007c96:	b118      	cbz	r0, 8007ca0 <__swsetup_r+0x14>
 8007c98:	6a03      	ldr	r3, [r0, #32]
 8007c9a:	b90b      	cbnz	r3, 8007ca0 <__swsetup_r+0x14>
 8007c9c:	f7fd ff98 	bl	8005bd0 <__sinit>
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	0719      	lsls	r1, r3, #28
 8007ca6:	d422      	bmi.n	8007cee <__swsetup_r+0x62>
 8007ca8:	06da      	lsls	r2, r3, #27
 8007caa:	d407      	bmi.n	8007cbc <__swsetup_r+0x30>
 8007cac:	2209      	movs	r2, #9
 8007cae:	602a      	str	r2, [r5, #0]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cba:	e033      	b.n	8007d24 <__swsetup_r+0x98>
 8007cbc:	0758      	lsls	r0, r3, #29
 8007cbe:	d512      	bpl.n	8007ce6 <__swsetup_r+0x5a>
 8007cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cc2:	b141      	cbz	r1, 8007cd6 <__swsetup_r+0x4a>
 8007cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <__swsetup_r+0x46>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f7fe ff07 	bl	8006ae0 <_free_r>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f043 0308 	orr.w	r3, r3, #8
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	b94b      	cbnz	r3, 8007d06 <__swsetup_r+0x7a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfc:	d003      	beq.n	8007d06 <__swsetup_r+0x7a>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f883 	bl	8007e0c <__smakebuf_r>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	f013 0201 	ands.w	r2, r3, #1
 8007d0e:	d00a      	beq.n	8007d26 <__swsetup_r+0x9a>
 8007d10:	2200      	movs	r2, #0
 8007d12:	60a2      	str	r2, [r4, #8]
 8007d14:	6962      	ldr	r2, [r4, #20]
 8007d16:	4252      	negs	r2, r2
 8007d18:	61a2      	str	r2, [r4, #24]
 8007d1a:	6922      	ldr	r2, [r4, #16]
 8007d1c:	b942      	cbnz	r2, 8007d30 <__swsetup_r+0xa4>
 8007d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d22:	d1c5      	bne.n	8007cb0 <__swsetup_r+0x24>
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	0799      	lsls	r1, r3, #30
 8007d28:	bf58      	it	pl
 8007d2a:	6962      	ldrpl	r2, [r4, #20]
 8007d2c:	60a2      	str	r2, [r4, #8]
 8007d2e:	e7f4      	b.n	8007d1a <__swsetup_r+0x8e>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7f7      	b.n	8007d24 <__swsetup_r+0x98>
 8007d34:	20000028 	.word	0x20000028

08007d38 <_raise_r>:
 8007d38:	291f      	cmp	r1, #31
 8007d3a:	b538      	push	{r3, r4, r5, lr}
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	d904      	bls.n	8007d4c <_raise_r+0x14>
 8007d42:	2316      	movs	r3, #22
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d4e:	b112      	cbz	r2, 8007d56 <_raise_r+0x1e>
 8007d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d54:	b94b      	cbnz	r3, 8007d6a <_raise_r+0x32>
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 f830 	bl	8007dbc <_getpid_r>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4601      	mov	r1, r0
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d66:	f000 b817 	b.w	8007d98 <_kill_r>
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d00a      	beq.n	8007d84 <_raise_r+0x4c>
 8007d6e:	1c59      	adds	r1, r3, #1
 8007d70:	d103      	bne.n	8007d7a <_raise_r+0x42>
 8007d72:	2316      	movs	r3, #22
 8007d74:	6003      	str	r3, [r0, #0]
 8007d76:	2001      	movs	r0, #1
 8007d78:	e7e7      	b.n	8007d4a <_raise_r+0x12>
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d80:	4620      	mov	r0, r4
 8007d82:	4798      	blx	r3
 8007d84:	2000      	movs	r0, #0
 8007d86:	e7e0      	b.n	8007d4a <_raise_r+0x12>

08007d88 <raise>:
 8007d88:	4b02      	ldr	r3, [pc, #8]	@ (8007d94 <raise+0xc>)
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f7ff bfd3 	b.w	8007d38 <_raise_r>
 8007d92:	bf00      	nop
 8007d94:	20000028 	.word	0x20000028

08007d98 <_kill_r>:
 8007d98:	b538      	push	{r3, r4, r5, lr}
 8007d9a:	4d07      	ldr	r5, [pc, #28]	@ (8007db8 <_kill_r+0x20>)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4604      	mov	r4, r0
 8007da0:	4608      	mov	r0, r1
 8007da2:	4611      	mov	r1, r2
 8007da4:	602b      	str	r3, [r5, #0]
 8007da6:	f7f9 fecf 	bl	8001b48 <_kill>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d102      	bne.n	8007db4 <_kill_r+0x1c>
 8007dae:	682b      	ldr	r3, [r5, #0]
 8007db0:	b103      	cbz	r3, 8007db4 <_kill_r+0x1c>
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	bf00      	nop
 8007db8:	20000524 	.word	0x20000524

08007dbc <_getpid_r>:
 8007dbc:	f7f9 bebc 	b.w	8001b38 <_getpid>

08007dc0 <__swhatbuf_r>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc8:	2900      	cmp	r1, #0
 8007dca:	b096      	sub	sp, #88	@ 0x58
 8007dcc:	4615      	mov	r5, r2
 8007dce:	461e      	mov	r6, r3
 8007dd0:	da0d      	bge.n	8007dee <__swhatbuf_r+0x2e>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007dd8:	f04f 0100 	mov.w	r1, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2340      	movne	r3, #64	@ 0x40
 8007de0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007de4:	2000      	movs	r0, #0
 8007de6:	6031      	str	r1, [r6, #0]
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	b016      	add	sp, #88	@ 0x58
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	466a      	mov	r2, sp
 8007df0:	f000 f848 	bl	8007e84 <_fstat_r>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	dbec      	blt.n	8007dd2 <__swhatbuf_r+0x12>
 8007df8:	9901      	ldr	r1, [sp, #4]
 8007dfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007dfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e02:	4259      	negs	r1, r3
 8007e04:	4159      	adcs	r1, r3
 8007e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e0a:	e7eb      	b.n	8007de4 <__swhatbuf_r+0x24>

08007e0c <__smakebuf_r>:
 8007e0c:	898b      	ldrh	r3, [r1, #12]
 8007e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e10:	079d      	lsls	r5, r3, #30
 8007e12:	4606      	mov	r6, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	d507      	bpl.n	8007e28 <__smakebuf_r+0x1c>
 8007e18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	2301      	movs	r3, #1
 8007e22:	6163      	str	r3, [r4, #20]
 8007e24:	b003      	add	sp, #12
 8007e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e28:	ab01      	add	r3, sp, #4
 8007e2a:	466a      	mov	r2, sp
 8007e2c:	f7ff ffc8 	bl	8007dc0 <__swhatbuf_r>
 8007e30:	9f00      	ldr	r7, [sp, #0]
 8007e32:	4605      	mov	r5, r0
 8007e34:	4639      	mov	r1, r7
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7fe fec6 	bl	8006bc8 <_malloc_r>
 8007e3c:	b948      	cbnz	r0, 8007e52 <__smakebuf_r+0x46>
 8007e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e42:	059a      	lsls	r2, r3, #22
 8007e44:	d4ee      	bmi.n	8007e24 <__smakebuf_r+0x18>
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	f043 0302 	orr.w	r3, r3, #2
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	e7e2      	b.n	8007e18 <__smakebuf_r+0xc>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	6020      	str	r0, [r4, #0]
 8007e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e62:	b15b      	cbz	r3, 8007e7c <__smakebuf_r+0x70>
 8007e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f81d 	bl	8007ea8 <_isatty_r>
 8007e6e:	b128      	cbz	r0, 8007e7c <__smakebuf_r+0x70>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	431d      	orrs	r5, r3
 8007e80:	81a5      	strh	r5, [r4, #12]
 8007e82:	e7cf      	b.n	8007e24 <__smakebuf_r+0x18>

08007e84 <_fstat_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d07      	ldr	r5, [pc, #28]	@ (8007ea4 <_fstat_r+0x20>)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	f7f9 feb9 	bl	8001c08 <_fstat>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	d102      	bne.n	8007ea0 <_fstat_r+0x1c>
 8007e9a:	682b      	ldr	r3, [r5, #0]
 8007e9c:	b103      	cbz	r3, 8007ea0 <_fstat_r+0x1c>
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	bd38      	pop	{r3, r4, r5, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000524 	.word	0x20000524

08007ea8 <_isatty_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d06      	ldr	r5, [pc, #24]	@ (8007ec4 <_isatty_r+0x1c>)
 8007eac:	2300      	movs	r3, #0
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	f7f9 feb8 	bl	8001c28 <_isatty>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_isatty_r+0x1a>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_isatty_r+0x1a>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	20000524 	.word	0x20000524

08007ec8 <_init>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	bf00      	nop
 8007ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ece:	bc08      	pop	{r3}
 8007ed0:	469e      	mov	lr, r3
 8007ed2:	4770      	bx	lr

08007ed4 <_fini>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr
