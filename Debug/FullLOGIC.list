
FullLOGIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  080086d0  080086d0  000096d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c1c  08008c1c  0000a1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c1c  08008c1c  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c24  08008c24  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c24  08008c24  00009c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c28  08008c28  00009c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08008c2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e4  2**0
                  CONTENTS
 10 .bss          00000370  200001e4  200001e4  0000a1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  0000a1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6b5  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002410  00000000  00000000  000188c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0001ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c0  00000000  00000000  0001b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002149b  00000000  00000000  0001c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ede0  00000000  00000000  0003d7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1dc  00000000  00000000  0004c5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001177a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004614  00000000  00000000  001177ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0011be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086b8 	.word	0x080086b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080086b8 	.word	0x080086b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <CAN_Filter_Config>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// CAN Messages filter
void CAN_Filter_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
	UART_SendString("1\r\n");
 8000eda:	4814      	ldr	r0, [pc, #80]	@ (8000f2c <CAN_Filter_Config+0x58>)
 8000edc:	f000 fa9a 	bl	8001414 <UART_SendString>
    CAN_FilterTypeDef sFilterConfig;

    // Configure filter for speed messages only
    sFilterConfig.FilterBank = 0;                           // Use filter bank 0
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;       // Use ID + Mask mode
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;      // 32-bit filter
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = (SPEED_CAN_ID << 5);       //
 8000eec:	f44f 437d 	mov.w	r3, #64768	@ 0xfd00
 8000ef0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = (0x7FF << 5);          // Mask for exact ID match (standard 11-bit ID)
 8000ef6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000efa:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;      // Assign to FIFO0
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;                // Enable the filter
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]

    // Apply filter configuration
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <CAN_Filter_Config+0x5c>)
 8000f0e:	f001 fe85 	bl	8002c1c <HAL_CAN_ConfigFilter>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <CAN_Filter_Config+0x48>
    {
        Error_Handler();
 8000f18:	f000 fcd6 	bl	80018c8 <Error_Handler>
    }
    UART_SendString("2\r\n");
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <CAN_Filter_Config+0x60>)
 8000f1e:	f000 fa79 	bl	8001414 <UART_SendString>
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	080086d0 	.word	0x080086d0
 8000f30:	200002a8 	.word	0x200002a8
 8000f34:	080086d4 	.word	0x080086d4

08000f38 <RequestSpeed>:

// OBD-II PID Speed Request
void RequestSpeed(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0x02, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <RequestSpeed+0x48>)
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
	uint32_t TxMailbox;

	TxHeader.StdId = 0x7DF;
 8000f46:	f240 73df 	movw	r3, #2015	@ 0x7df
 8000f4a:	613b      	str	r3, [r7, #16]
	TxHeader.ExtId = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = 8;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	f107 0208 	add.w	r2, r7, #8
 8000f62:	f107 0110 	add.w	r1, r7, #16
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <RequestSpeed+0x4c>)
 8000f68:	f001 ff7a 	bl	8002e60 <HAL_CAN_AddTxMessage>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <RequestSpeed+0x3e>
    {
        Error_Handler();
 8000f72:	f000 fca9 	bl	80018c8 <Error_Handler>
    }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	000d0102 	.word	0x000d0102
 8000f84:	200002a8 	.word	0x200002a8

08000f88 <ProcessSpeedMessage>:

// Speed extraction
void ProcessSpeedMessage(CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b091      	sub	sp, #68	@ 0x44
 8000f8c:	af0a      	add	r7, sp, #40	@ 0x28
 8000f8e:	6178      	str	r0, [r7, #20]
 8000f90:	6139      	str	r1, [r7, #16]
	if (rxHeader->StdId == SPEED_CAN_ID) {
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f5b3 6ffd 	cmp.w	r3, #2024	@ 0x7e8
 8000f9a:	d13e      	bne.n	800101a <ProcessSpeedMessage+0x92>
		CarSpeed = rxData[3];
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <ProcessSpeedMessage+0x9c>)
 8000fa6:	801a      	strh	r2, [r3, #0]
        // Format message for UART
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	681a      	ldr	r2, [r3, #0]
                "Message Received!\r\nID: 0x%03lX\r\nData: %02X %02X %02X %02X %02X %02X %02X %02X\r\n\r\n Speed:%02X\r\n",
                rxHeader->StdId,
                rxData[0], rxData[1], rxData[2], rxData[3],
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fb0:	4619      	mov	r1, r3
                rxData[0], rxData[1], rxData[2], rxData[3],
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fb8:	4618      	mov	r0, r3
                rxData[0], rxData[1], rxData[2], rxData[3],
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fc0:	461c      	mov	r4, r3
                rxData[0], rxData[1], rxData[2], rxData[3],
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	3303      	adds	r3, #3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fc8:	461d      	mov	r5, r3
                rxData[4], rxData[5], rxData[6], rxData[7],
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fd0:	461e      	mov	r6, r3
                rxData[4], rxData[5], rxData[6], rxData[7],
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3305      	adds	r3, #5
 8000fd6:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fd8:	60fb      	str	r3, [r7, #12]
                rxData[4], rxData[5], rxData[6], rxData[7],
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	3306      	adds	r3, #6
 8000fde:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fe0:	60bb      	str	r3, [r7, #8]
                rxData[4], rxData[5], rxData[6], rxData[7],
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3307      	adds	r3, #7
 8000fe6:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000fe8:	607b      	str	r3, [r7, #4]
				rxData[3]);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	3303      	adds	r3, #3
 8000fee:	781b      	ldrb	r3, [r3, #0]
        snprintf(uartBuffer, sizeof(uartBuffer),
 8000ff0:	9308      	str	r3, [sp, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	9307      	str	r3, [sp, #28]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	9306      	str	r3, [sp, #24]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	9305      	str	r3, [sp, #20]
 8000ffe:	9604      	str	r6, [sp, #16]
 8001000:	9503      	str	r5, [sp, #12]
 8001002:	9402      	str	r4, [sp, #8]
 8001004:	9001      	str	r0, [sp, #4]
 8001006:	9100      	str	r1, [sp, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <ProcessSpeedMessage+0xa0>)
 800100c:	2164      	movs	r1, #100	@ 0x64
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <ProcessSpeedMessage+0xa4>)
 8001010:	f005 fa0a 	bl	8006428 <sniprintf>

        // Send to UART
        UART_SendString(uartBuffer);
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <ProcessSpeedMessage+0xa4>)
 8001016:	f000 f9fd 	bl	8001414 <UART_SendString>



	}

}
 800101a:	bf00      	nop
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001022:	bf00      	nop
 8001024:	20000394 	.word	0x20000394
 8001028:	080086d8 	.word	0x080086d8
 800102c:	20000398 	.word	0x20000398

08001030 <HAL_CAN_RxFifo0MsgPendingCallback>:

//CAN Response upon interrupt callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800103a:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800103c:	2100      	movs	r1, #0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f001 ffde 	bl	8003000 <HAL_CAN_GetRxMessage>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d103      	bne.n	8001052 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    {
        ProcessSpeedMessage(&RxHeader, RxData);
 800104a:	4904      	ldr	r1, [pc, #16]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800104e:	f7ff ff9b 	bl	8000f88 <ProcessSpeedMessage>

    }
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000038c 	.word	0x2000038c
 8001060:	20000370 	.word	0x20000370

08001064 <DAC_Write>:

// Write 12-bit value to DAC via SPI
void DAC_Write(GPIO_TypeDef *cs_port, uint16_t cs_pin, uint16_t value)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	803b      	strh	r3, [r7, #0]
    value &= 0x0FFF;    // ensure 12-bit value
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107a:	803b      	strh	r3, [r7, #0]
    uint16_t word = value | (0x0 << 12); // DAC121S101 expects data in lower 12 bits
 800107c:	883b      	ldrh	r3, [r7, #0]
 800107e:	81fb      	strh	r3, [r7, #14]

    uint8_t data[2];
    data[0] = (word >> 8) & 0xFF;
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]
    data[1] = word & 0xFF;
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET); // CS LOW
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f003 f948 	bl	800432c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
 800109c:	f107 010c 	add.w	r1, r7, #12
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	2202      	movs	r2, #2
 80010a6:	4811      	ldr	r0, [pc, #68]	@ (80010ec <DAC_Write+0x88>)
 80010a8:	f003 fe79 	bl	8004d9e <HAL_SPI_Transmit>
    snprintf(uartBuffer, sizeof(uartBuffer),
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <DAC_Write+0x52>
 80010b2:	2201      	movs	r2, #1
 80010b4:	e000      	b.n	80010b8 <DAC_Write+0x54>
 80010b6:	2202      	movs	r2, #2
 80010b8:	883b      	ldrh	r3, [r7, #0]
             "DAC%d Write: Code=%u | data[0] = %X  | data[1] = %X  \r\n\n",
             (cs_pin == DAC1_CS_PIN) ? 1 : 2,
             value, data[0], data[1]);
 80010ba:	7b39      	ldrb	r1, [r7, #12]
 80010bc:	7b78      	ldrb	r0, [r7, #13]
    snprintf(uartBuffer, sizeof(uartBuffer),
 80010be:	9002      	str	r0, [sp, #8]
 80010c0:	9101      	str	r1, [sp, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <DAC_Write+0x8c>)
 80010c8:	2164      	movs	r1, #100	@ 0x64
 80010ca:	480a      	ldr	r0, [pc, #40]	@ (80010f4 <DAC_Write+0x90>)
 80010cc:	f005 f9ac 	bl	8006428 <sniprintf>
    UART_SendString(uartBuffer);
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <DAC_Write+0x90>)
 80010d2:	f000 f99f 	bl	8001414 <UART_SendString>

    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f003 f925 	bl	800432c <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200002d0 	.word	0x200002d0
 80010f0:	08008738 	.word	0x08008738
 80010f4:	20000398 	.word	0x20000398

080010f8 <ReadPedalPercent>:
    DAC_Write(DAC1_CS_PORT, DAC1_CS_PIN, 4095);  // ~100%  WHITE (SIDE)   is DAC1 - OUT3

}*/

// Convert ADC value to normalized pedal percentage
float ReadPedalPercent(uint16_t adc_value, float voltage_min, float voltage_max){
 80010f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010fc:	b08f      	sub	sp, #60	@ 0x3c
 80010fe:	af06      	add	r7, sp, #24
 8001100:	4603      	mov	r3, r0
 8001102:	ed87 0a02 	vstr	s0, [r7, #8]
 8001106:	edc7 0a01 	vstr	s1, [r7, #4]
 800110a:	81fb      	strh	r3, [r7, #14]

	float preproccsing_current_voltage_divided = ((float)adc_value / ADC_RESOLUTION)*ADC_REF_VOLTAGE;
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001116:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80011a8 <ReadPedalPercent+0xb0>
 800111a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80011ac <ReadPedalPercent+0xb4>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	edc7 7a07 	vstr	s15, [r7, #28]
	float preproccsing_current_voltage = preproccsing_current_voltage_divided * VoltageRestoreFactor; //To restore what voltage divider effect
 800112a:	edd7 7a07 	vldr	s15, [r7, #28]
 800112e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001132:	edc7 7a06 	vstr	s15, [r7, #24]
	float preproccsing_percent_current_voltage = (preproccsing_current_voltage - voltage_min) / (voltage_max - voltage_min);
 8001136:	ed97 7a06 	vldr	s14, [r7, #24]
 800113a:	edd7 7a02 	vldr	s15, [r7, #8]
 800113e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001142:	ed97 7a01 	vldr	s14, [r7, #4]
 8001146:	edd7 7a02 	vldr	s15, [r7, #8]
 800114a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800114e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001152:	edc7 7a05 	vstr	s15, [r7, #20]

	snprintf(uartBuffer, sizeof(uartBuffer),
 8001156:	89fe      	ldrh	r6, [r7, #14]
 8001158:	69f8      	ldr	r0, [r7, #28]
 800115a:	f7ff f9f5 	bl	8000548 <__aeabi_f2d>
 800115e:	4604      	mov	r4, r0
 8001160:	460d      	mov	r5, r1
 8001162:	69b8      	ldr	r0, [r7, #24]
 8001164:	f7ff f9f0 	bl	8000548 <__aeabi_f2d>
 8001168:	4680      	mov	r8, r0
 800116a:	4689      	mov	r9, r1
 800116c:	6978      	ldr	r0, [r7, #20]
 800116e:	f7ff f9eb 	bl	8000548 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800117a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800117e:	e9cd 4500 	strd	r4, r5, [sp]
 8001182:	4633      	mov	r3, r6
 8001184:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <ReadPedalPercent+0xb8>)
 8001186:	2164      	movs	r1, #100	@ 0x64
 8001188:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <ReadPedalPercent+0xbc>)
 800118a:	f005 f94d 	bl	8006428 <sniprintf>
	         "ADC(code)=%u | Vin(raw)=%.2f V | Vin(restored)=%.2f V | Percent=%.8f%%\r\n\n",
	         adc_value,
			 preproccsing_current_voltage_divided,
	         preproccsing_current_voltage,
	         preproccsing_percent_current_voltage);
	UART_SendString(uartBuffer);
 800118e:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <ReadPedalPercent+0xbc>)
 8001190:	f000 f940 	bl	8001414 <UART_SendString>

	//CLAMPING
    // if (preproccsing_percent_current_voltage <preproccsing_percent_current_voltage_Min) preproccsing_percent_current_voltage = preproccsing_percent_current_voltage_Min;
    // if (preproccsing_percent_current_voltage > preproccsing_percent_current_voltage_Max) preproccsing_percent_current_voltage = preproccsing_percent_current_voltage_Max;

    return preproccsing_percent_current_voltage;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	ee07 3a90 	vmov	s15, r3
}
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	3724      	adds	r7, #36	@ 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011a6:	bf00      	nop
 80011a8:	457ff000 	.word	0x457ff000
 80011ac:	40533333 	.word	0x40533333
 80011b0:	08008774 	.word	0x08008774
 80011b4:	20000398 	.word	0x20000398

080011b8 <PercentToDACValue>:


// Convert pedal percentage to DAC output code
uint16_t PercentToDACValue(float percent, float voltage_min, float voltage_max) {
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b08c      	sub	sp, #48	@ 0x30
 80011bc:	af06      	add	r7, sp, #24
 80011be:	ed87 0a03 	vstr	s0, [r7, #12]
 80011c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80011c6:	ed87 1a01 	vstr	s2, [r7, #4]

    float afterprocessing_voltage = voltage_min + (percent * (voltage_max - voltage_min)); //Percentage to voltage
 80011ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	edc7 7a05 	vstr	s15, [r7, #20]
    uint16_t dac_value = (uint16_t)((afterprocessing_voltage / DAC_REF_VOLTAGE) * DAC_RESOLUTION); //DAC expects digital value - Vref is 4.5 V
 80011ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80011ee:	eef1 6a02 	vmov.f32	s13, #18	@ 0x40900000  4.5
 80011f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001244 <PercentToDACValue+0x8c>
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	827b      	strh	r3, [r7, #18]

    snprintf(uartBuffer, sizeof(uartBuffer),
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	4604      	mov	r4, r0
 8001210:	460d      	mov	r5, r1
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff f998 	bl	8000548 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	8a79      	ldrh	r1, [r7, #18]
 800121e:	9104      	str	r1, [sp, #16]
 8001220:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001224:	e9cd 4500 	strd	r4, r5, [sp]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <PercentToDACValue+0x90>)
 800122a:	2164      	movs	r1, #100	@ 0x64
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <PercentToDACValue+0x94>)
 800122e:	f005 f8fb 	bl	8006428 <sniprintf>
             "Attenuated=%.2f%% | Vout=%.2f V | DAC Code=%u\r\n\n",
             percent,
             afterprocessing_voltage,
             dac_value);
    UART_SendString(uartBuffer);
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <PercentToDACValue+0x94>)
 8001234:	f000 f8ee 	bl	8001414 <UART_SendString>

    //CLAMPING
    // if (dac_value > ADC_RESOLUTION ) dac_value = ADC_RESOLUTION ;
    return dac_value;
 8001238:	8a7b      	ldrh	r3, [r7, #18]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}
 8001242:	bf00      	nop
 8001244:	457ff000 	.word	0x457ff000
 8001248:	080087c0 	.word	0x080087c0
 800124c:	20000398 	.word	0x20000398

08001250 <AttenuationFunction>:

// Apply pedal attenuation based on vehicle speed
void AttenuationFunction(void){
 8001250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001254:	b090      	sub	sp, #64	@ 0x40
 8001256:	af08      	add	r7, sp, #32
	float scale_factor;
	float percent1, percent2, output_percent1, output_percent2;

	percent1 = ReadPedalPercent(adc_buf[0], PEDAL_CH1_VMIN, PEDAL_CH1_VMAX); // 4 //Converts the raw value from adc to percentage
 8001258:	4b63      	ldr	r3, [pc, #396]	@ (80013e8 <AttenuationFunction+0x198>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4a63      	ldr	r2, [pc, #396]	@ (80013ec <AttenuationFunction+0x19c>)
 8001260:	edd2 7a00 	vldr	s15, [r2]
 8001264:	4a62      	ldr	r2, [pc, #392]	@ (80013f0 <AttenuationFunction+0x1a0>)
 8001266:	ed92 7a00 	vldr	s14, [r2]
 800126a:	eef0 0a47 	vmov.f32	s1, s14
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff40 	bl	80010f8 <ReadPedalPercent>
 8001278:	ed87 0a04 	vstr	s0, [r7, #16]
	percent2 = ReadPedalPercent(adc_buf[1], PEDAL_CH2_VMIN, PEDAL_CH2_VMAX); // 3 //Converts the raw value from adc to percentage
 800127c:	4b5a      	ldr	r3, [pc, #360]	@ (80013e8 <AttenuationFunction+0x198>)
 800127e:	885b      	ldrh	r3, [r3, #2]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4a5c      	ldr	r2, [pc, #368]	@ (80013f4 <AttenuationFunction+0x1a4>)
 8001284:	edd2 7a00 	vldr	s15, [r2]
 8001288:	4a5b      	ldr	r2, [pc, #364]	@ (80013f8 <AttenuationFunction+0x1a8>)
 800128a:	ed92 7a00 	vldr	s14, [r2]
 800128e:	eef0 0a47 	vmov.f32	s1, s14
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff2e 	bl	80010f8 <ReadPedalPercent>
 800129c:	ed87 0a03 	vstr	s0, [r7, #12]



    if(CarSpeed >= SPEED_THRESHOLD_KMH) {
 80012a0:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <AttenuationFunction+0x1ac>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	2b13      	cmp	r3, #19
 80012a8:	d936      	bls.n	8001318 <AttenuationFunction+0xc8>
    	HAL_GPIO_WritePin(MUX_EN_PORT, MUX_EN_PIN, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b0:	4853      	ldr	r0, [pc, #332]	@ (8001400 <AttenuationFunction+0x1b0>)
 80012b2:	f003 f83b 	bl	800432c <HAL_GPIO_WritePin>
        float overspeed = CarSpeed - SPEED_THRESHOLD_KMH;
 80012b6:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <AttenuationFunction+0x1ac>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3b14      	subs	r3, #20
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	edc7 7a02 	vstr	s15, [r7, #8]

        scale_factor = Scale_Factor_Max - (overspeed / (float)SPEED_FADE_RANGE_KMH);
 80012ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80012ce:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012de:	edc7 7a07 	vstr	s15, [r7, #28]

        	if (scale_factor < Scale_Factor_Min) scale_factor = Scale_Factor_Min;
 80012e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d502      	bpl.n	80012f6 <AttenuationFunction+0xa6>
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]

        output_percent1 = percent1 * scale_factor;
 80012f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80012fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	edc7 7a06 	vstr	s15, [r7, #24]

        output_percent2 = percent2 * scale_factor;
 8001306:	ed97 7a03 	vldr	s14, [r7, #12]
 800130a:	edd7 7a07 	vldr	s15, [r7, #28]
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a05 	vstr	s15, [r7, #20]
 8001316:	e005      	b.n	8001324 <AttenuationFunction+0xd4>


    } else {
    	HAL_GPIO_WritePin(MUX_EN_PORT, MUX_EN_PIN, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800131e:	4838      	ldr	r0, [pc, #224]	@ (8001400 <AttenuationFunction+0x1b0>)
 8001320:	f003 f804 	bl	800432c <HAL_GPIO_WritePin>

        //output_percent2 = percent2; //3

    }

    snprintf(uartBuffer, sizeof(uartBuffer),
 8001324:	6938      	ldr	r0, [r7, #16]
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	69b8      	ldr	r0, [r7, #24]
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	4680      	mov	r8, r0
 8001336:	4689      	mov	r9, r1
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff f905 	bl	8000548 <__aeabi_f2d>
 800133e:	4682      	mov	sl, r0
 8001340:	468b      	mov	fp, r1
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001350:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001354:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001358:	e9cd 4500 	strd	r4, r5, [sp]
 800135c:	4a29      	ldr	r2, [pc, #164]	@ (8001404 <AttenuationFunction+0x1b4>)
 800135e:	2164      	movs	r1, #100	@ 0x64
 8001360:	4829      	ldr	r0, [pc, #164]	@ (8001408 <AttenuationFunction+0x1b8>)
 8001362:	f005 f861 	bl	8006428 <sniprintf>
              "P1 In:%.8f Out (4):%.8f | P2 In:%.8f Out (3):%.8f\r\n",
              percent1, output_percent1, percent2, output_percent2);
    UART_SendString(uartBuffer);
 8001366:	4828      	ldr	r0, [pc, #160]	@ (8001408 <AttenuationFunction+0x1b8>)
 8001368:	f000 f854 	bl	8001414 <UART_SendString>

    uint16_t dac_value_1 = PercentToDACValue(output_percent1, PEDAL_CH1_VMIN, PEDAL_CH1_VMAX); //Converts percentage back to analog //4
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <AttenuationFunction+0x19c>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <AttenuationFunction+0x1a0>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	eeb0 1a47 	vmov.f32	s2, s14
 800137c:	eef0 0a67 	vmov.f32	s1, s15
 8001380:	ed97 0a06 	vldr	s0, [r7, #24]
 8001384:	f7ff ff18 	bl	80011b8 <PercentToDACValue>
 8001388:	4603      	mov	r3, r0
 800138a:	80fb      	strh	r3, [r7, #6]
    uint16_t dac_value_2 = PercentToDACValue(output_percent2, PEDAL_CH2_VMIN, PEDAL_CH2_VMAX); //Converts percentage back to analog //3
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <AttenuationFunction+0x1a4>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <AttenuationFunction+0x1a8>)
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	eeb0 1a47 	vmov.f32	s2, s14
 800139c:	eef0 0a67 	vmov.f32	s1, s15
 80013a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80013a4:	f7ff ff08 	bl	80011b8 <PercentToDACValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	80bb      	strh	r3, [r7, #4]

    snprintf(uartBuffer, sizeof(uartBuffer),
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	4613      	mov	r3, r2
 80013b4:	4a15      	ldr	r2, [pc, #84]	@ (800140c <AttenuationFunction+0x1bc>)
 80013b6:	2164      	movs	r1, #100	@ 0x64
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <AttenuationFunction+0x1b8>)
 80013ba:	f005 f835 	bl	8006428 <sniprintf>
              "DAC_VALUE1:%u | DAC_VALUE2:%u\r\n",
			  dac_value_1, dac_value_2);
    UART_SendString(uartBuffer);
 80013be:	4812      	ldr	r0, [pc, #72]	@ (8001408 <AttenuationFunction+0x1b8>)
 80013c0:	f000 f828 	bl	8001414 <UART_SendString>

    DAC_Write(DAC2_CS_PORT, DAC2_CS_PIN, dac_value_1); // dac2_cs_port for dac_value_1 - in4 - out4 - ch1 //4
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	461a      	mov	r2, r3
 80013c8:	2102      	movs	r1, #2
 80013ca:	4811      	ldr	r0, [pc, #68]	@ (8001410 <AttenuationFunction+0x1c0>)
 80013cc:	f7ff fe4a 	bl	8001064 <DAC_Write>
    DAC_Write(DAC1_CS_PORT, DAC1_CS_PIN, dac_value_2); // dac1_cs_port for dac_value_2 - in3 - out3 - ch2 //3
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2101      	movs	r1, #1
 80013d6:	480e      	ldr	r0, [pc, #56]	@ (8001410 <AttenuationFunction+0x1c0>)
 80013d8:	f7ff fe44 	bl	8001064 <DAC_Write>


}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013e6:	bf00      	nop
 80013e8:	200003fc 	.word	0x200003fc
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000008 	.word	0x20000008
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20000394 	.word	0x20000394
 8001400:	40020800 	.word	0x40020800
 8001404:	080087f4 	.word	0x080087f4
 8001408:	20000398 	.word	0x20000398
 800140c:	08008828 	.word	0x08008828
 8001410:	40020000 	.word	0x40020000

08001414 <UART_SendString>:

void UART_SendString(char *str)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7fe ff27 	bl	8000270 <strlen>
 8001422:	4603      	mov	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <UART_SendString+0x28>)
 800142e:	f003 ff27 	bl	8005280 <HAL_UART_Transmit>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000328 	.word	0x20000328

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fd1e 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f856 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 f9d4 	bl	80017f8 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2101      	movs	r1, #1
 8001454:	4821      	ldr	r0, [pc, #132]	@ (80014dc <main+0x9c>)
 8001456:	f002 ff69 	bl	800432c <HAL_GPIO_WritePin>
  MX_DMA_Init();
 800145a:	f000 f9ad 	bl	80017b8 <MX_DMA_Init>
  MX_ADC1_Init();
 800145e:	f000 f8b5 	bl	80015cc <MX_ADC1_Init>
  MX_CAN1_Init();
 8001462:	f000 f913 	bl	800168c <MX_CAN1_Init>
  MX_SPI1_Init();
 8001466:	f000 f947 	bl	80016f8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800146a:	f000 f97b 	bl	8001764 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 800146e:	f7ff fd31 	bl	8000ed4 <CAN_Filter_Config>

  if (HAL_CAN_Start(&hcan1) != HAL_OK) //Starts CAN peripheral
 8001472:	481b      	ldr	r0, [pc, #108]	@ (80014e0 <main+0xa0>)
 8001474:	f001 fcb0 	bl	8002dd8 <HAL_CAN_Start>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <main+0x42>
  {
      Error_Handler();
 800147e:	f000 fa23 	bl	80018c8 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) //Enable interrupts
 8001482:	2102      	movs	r1, #2
 8001484:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <main+0xa0>)
 8001486:	f001 fedd 	bl	8003244 <HAL_CAN_ActivateNotification>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <main+0x54>
  {
      Error_Handler();
 8001490:	f000 fa1a 	bl	80018c8 <Error_Handler>
  }
  HAL_GPIO_WritePin(MUX_EN_PORT, MUX_EN_PIN, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800149a:	4810      	ldr	r0, [pc, #64]	@ (80014dc <main+0x9c>)
 800149c:	f002 ff46 	bl	800432c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC1_CS_PORT, DAC1_CS_PIN, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	480f      	ldr	r0, [pc, #60]	@ (80014e4 <main+0xa4>)
 80014a6:	f002 ff41 	bl	800432c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC2_CS_PORT, DAC2_CS_PIN, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2102      	movs	r1, #2
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <main+0xa4>)
 80014b0:	f002 ff3c 	bl	800432c <HAL_GPIO_WritePin>
  UART_SendString("Befor ADC dual channel Config\r\n");
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <main+0xa8>)
 80014b6:	f7ff ffad 	bl	8001414 <UART_SendString>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2);
 80014ba:	2202      	movs	r2, #2
 80014bc:	490b      	ldr	r1, [pc, #44]	@ (80014ec <main+0xac>)
 80014be:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <main+0xb0>)
 80014c0:	f000 feca 	bl	8002258 <HAL_ADC_Start_DMA>
  UART_SendString("After ADC dual channel Config\r\n");
 80014c4:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <main+0xb4>)
 80014c6:	f7ff ffa5 	bl	8001414 <UART_SendString>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	//TestDAC();
		RequestSpeed();
 80014ca:	f7ff fd35 	bl	8000f38 <RequestSpeed>
		HAL_Delay(100); //Sending too fast causes STM CAN to fault out.
 80014ce:	2064      	movs	r0, #100	@ 0x64
 80014d0:	f000 fd4a 	bl	8001f68 <HAL_Delay>
		/*if (HAL_GetTick() - lastCanMsgTick > 500)  // 500ms timeout
		{
		    CarSpeed = 0;   // fallback to 0 km/h
		}*/

		AttenuationFunction();
 80014d4:	f7ff febc 	bl	8001250 <AttenuationFunction>
		RequestSpeed();
 80014d8:	bf00      	nop
 80014da:	e7f6      	b.n	80014ca <main+0x8a>
 80014dc:	40020800 	.word	0x40020800
 80014e0:	200002a8 	.word	0x200002a8
 80014e4:	40020000 	.word	0x40020000
 80014e8:	08008848 	.word	0x08008848
 80014ec:	200003fc 	.word	0x200003fc
 80014f0:	20000200 	.word	0x20000200
 80014f4:	08008868 	.word	0x08008868

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	@ 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2230      	movs	r2, #48	@ 0x30
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f005 f807 	bl	800651a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	4b28      	ldr	r3, [pc, #160]	@ (80015c4 <SystemClock_Config+0xcc>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <SystemClock_Config+0xcc>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	@ 0x40
 800152c:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <SystemClock_Config+0xcc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <SystemClock_Config+0xd0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <SystemClock_Config+0xd0>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <SystemClock_Config+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001568:	2308      	movs	r3, #8
 800156a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800156c:	23a8      	movs	r3, #168	@ 0xa8
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	4618      	mov	r0, r3
 800157e:	f002 feef 	bl	8004360 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001588:	f000 f99e 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158c:	230f      	movs	r3, #15
 800158e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001598:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2105      	movs	r1, #5
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f950 	bl	8004850 <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015b6:	f000 f987 	bl	80018c8 <Error_Handler>
  }
}
 80015ba:	bf00      	nop
 80015bc:	3750      	adds	r7, #80	@ 0x50
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000

080015cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <MX_ADC1_Init+0xb4>)
 80015e0:	4a28      	ldr	r2, [pc, #160]	@ (8001684 <MX_ADC1_Init+0xb8>)
 80015e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015e4:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <MX_ADC1_Init+0xb4>)
 80015e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <MX_ADC1_Init+0xb4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <MX_ADC1_Init+0xb4>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_ADC1_Init+0xb4>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <MX_ADC1_Init+0xb4>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_ADC1_Init+0xb4>)
 8001608:	2200      	movs	r2, #0
 800160a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_ADC1_Init+0xb4>)
 800160e:	4a1e      	ldr	r2, [pc, #120]	@ (8001688 <MX_ADC1_Init+0xbc>)
 8001610:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_ADC1_Init+0xb4>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_ADC1_Init+0xb4>)
 800161a:	2202      	movs	r2, #2
 800161c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_ADC1_Init+0xb4>)
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_ADC1_Init+0xb4>)
 8001628:	2201      	movs	r2, #1
 800162a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162c:	4814      	ldr	r0, [pc, #80]	@ (8001680 <MX_ADC1_Init+0xb4>)
 800162e:	f000 fcbf 	bl	8001fb0 <HAL_ADC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001638:	f000 f946 	bl	80018c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800163c:	2302      	movs	r3, #2
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001640:	2301      	movs	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001644:	2304      	movs	r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <MX_ADC1_Init+0xb4>)
 800164e:	f000 ff3f 	bl	80024d0 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001658:	f000 f936 	bl	80018c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800165c:	2303      	movs	r3, #3
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_ADC1_Init+0xb4>)
 800166a:	f000 ff31 	bl	80024d0 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001674:	f000 f928 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000200 	.word	0x20000200
 8001684:	40012000 	.word	0x40012000
 8001688:	0f000001 	.word	0x0f000001

0800168c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <MX_CAN1_Init+0x64>)
 8001692:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <MX_CAN1_Init+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001696:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_CAN1_Init+0x64>)
 8001698:	2204      	movs	r2, #4
 800169a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <MX_CAN1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016aa:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 80016ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016b2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80016b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MX_CAN1_Init+0x64>)
 80016de:	f001 f9a1 	bl	8002a24 <HAL_CAN_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80016e8:	f000 f8ee 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200002a8 	.word	0x200002a8
 80016f4:	40006400 	.word	0x40006400

080016f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_SPI1_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <MX_SPI1_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <MX_SPI1_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <MX_SPI1_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MX_SPI1_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <MX_SPI1_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	@ (800175c <MX_SPI1_Init+0x64>)
 800174a:	f003 fa9f 	bl	8004c8c <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 f8b8 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200002d0 	.word	0x200002d0
 8001760:	40013000 	.word	0x40013000

08001764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <MX_USART1_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800179c:	f003 fd20 	bl	80051e0 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 f88f 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000328 	.word	0x20000328
 80017b4:	40011000 	.word	0x40011000

080017b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_DMA_Init+0x3c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a0b      	ldr	r2, [pc, #44]	@ (80017f4 <MX_DMA_Init+0x3c>)
 80017c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_DMA_Init+0x3c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2038      	movs	r0, #56	@ 0x38
 80017e0:	f002 f861 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017e4:	2038      	movs	r0, #56	@ 0x38
 80017e6:	f002 f87a 	bl	80038de <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a29      	ldr	r2, [pc, #164]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <MX_GPIO_Init+0xc4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <MX_GPIO_Init+0xc4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_GPIO_Init+0xc4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_9, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f240 2101 	movw	r1, #513	@ 0x201
 8001868:	4815      	ldr	r0, [pc, #84]	@ (80018c0 <MX_GPIO_Init+0xc8>)
 800186a:	f002 fd5f 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2103      	movs	r1, #3
 8001872:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <MX_GPIO_Init+0xcc>)
 8001874:	f002 fd5a 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8001878:	f240 2301 	movw	r3, #513	@ 0x201
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <MX_GPIO_Init+0xc8>)
 8001892:	f002 fbaf 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001896:	2303      	movs	r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_GPIO_Init+0xcc>)
 80018ae:	f002 fba1 	bl	8003ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020000 	.word	0x40020000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a33      	ldr	r2, [pc, #204]	@ (8001a10 <HAL_ADC_MspInit+0xec>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d160      	bne.n	8001a08 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b32      	ldr	r3, [pc, #200]	@ (8001a14 <HAL_ADC_MspInit+0xf0>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	4a31      	ldr	r2, [pc, #196]	@ (8001a14 <HAL_ADC_MspInit+0xf0>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001954:	6453      	str	r3, [r2, #68]	@ 0x44
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <HAL_ADC_MspInit+0xf0>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_ADC_MspInit+0xf0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a14 <HAL_ADC_MspInit+0xf0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <HAL_ADC_MspInit+0xf0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800197e:	230c      	movs	r3, #12
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4821      	ldr	r0, [pc, #132]	@ (8001a18 <HAL_ADC_MspInit+0xf4>)
 8001992:	f002 fb2f 	bl	8003ff4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001996:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 8001998:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <HAL_ADC_MspInit+0xfc>)
 800199a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019dc:	480f      	ldr	r0, [pc, #60]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019de:	f001 ff99 	bl	8003914 <HAL_DMA_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80019e8:	f7ff ff6e 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <HAL_ADC_MspInit+0xf8>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2012      	movs	r0, #18
 80019fe:	f001 ff52 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a02:	2012      	movs	r0, #18
 8001a04:	f001 ff6b 	bl	80038de <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	@ 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40012000 	.word	0x40012000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	20000248 	.word	0x20000248
 8001a20:	40026410 	.word	0x40026410

08001a24 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <HAL_CAN_MspInit+0x94>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d134      	bne.n	8001ab0 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <HAL_CAN_MspInit+0x98>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_CAN_MspInit+0x98>)
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_CAN_MspInit+0x98>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_CAN_MspInit+0x98>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <HAL_CAN_MspInit+0x98>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_CAN_MspInit+0x98>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a90:	2309      	movs	r3, #9
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <HAL_CAN_MspInit+0x9c>)
 8001a9c:	f002 faaa 	bl	8003ff4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2014      	movs	r0, #20
 8001aa6:	f001 fefe 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f001 ff17 	bl	80038de <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	@ 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40006400 	.word	0x40006400
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_SPI_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b1e:	23a0      	movs	r3, #160	@ 0xa0
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_SPI_MspInit+0x8c>)
 8001b3a:	f002 fa5b 	bl	8003ff4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	@ 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_UART_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <HAL_UART_MspInit+0x8c>)
 8001bcc:	f002 fa12 	bl	8003ff4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <NMI_Handler+0x4>

08001bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3a:	f000 f975 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <ADC_IRQHandler+0x10>)
 8001c4a:	f000 f9f4 	bl	8002036 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000200 	.word	0x20000200

08001c58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <CAN1_RX0_IRQHandler+0x10>)
 8001c5e:	f001 fb17 	bl	8003290 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002a8 	.word	0x200002a8

08001c6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <DMA2_Stream0_IRQHandler+0x10>)
 8001c72:	f001 ff55 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000248 	.word	0x20000248

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9a:	f004 fc91 	bl	80065c0 <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc2:	bf00      	nop
 8001cc4:	e7fd      	b.n	8001cc2 <_exit+0x12>

08001cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e00a      	b.n	8001cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd8:	f3af 8000 	nop.w
 8001cdc:	4601      	mov	r1, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf0      	blt.n	8001cd8 <_read+0x12>
  }

  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e009      	b.n	8001d26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	60ba      	str	r2, [r7, #8]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf1      	blt.n	8001d12 <_write+0x12>
  }
  return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_close>:

int _close(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d60:	605a      	str	r2, [r3, #4]
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_isatty>:

int _isatty(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f004 fbf6 	bl	80065c0 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20020000 	.word	0x20020000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000400 	.word	0x20000400
 8001e08:	20000558 	.word	0x20000558

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e34:	f7ff ffea 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f004 fbb5 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff faed 	bl	8001440 <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e74:	08008c2c 	.word	0x08008c2c
  ldr r2, =_sbss
 8001e78:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e7c:	20000554 	.word	0x20000554

08001e80 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <CAN1_RX1_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <HAL_Init+0x40>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <HAL_Init+0x40>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x40>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f001 fcef 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fd0c 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fd07 	bl	80038fa <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f001 fccf 	bl	80038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	20000018 	.word	0x20000018
 8001f24:	20000014 	.word	0x20000014

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000018 	.word	0x20000018
 8001f4c:	20000404 	.word	0x20000404

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000404 	.word	0x20000404

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000018 	.word	0x20000018

08001fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e033      	b.n	800202e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fca8 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ff6:	f023 0302 	bic.w	r3, r3, #2
 8001ffa:	f043 0202 	orr.w	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fb86 	bl	8002714 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
 800201e:	e001      	b.n	8002024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d049      	beq.n	8002100 <HAL_ADC_IRQHandler+0xca>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d046      	beq.n	8002100 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d12b      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	d127      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d119      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0220 	bic.w	r2, r2, #32
 80020ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f9c5 	bl	8002480 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0212 	mvn.w	r2, #18
 80020fe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d057      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x190>
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d054      	beq.n	80021c6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d139      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002148:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800215a:	2b00      	cmp	r3, #0
 800215c:	d12b      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d124      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11d      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d119      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002190:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fc2a 	bl	8002a10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 020c 	mvn.w	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d017      	beq.n	800220c <HAL_ADC_IRQHandler+0x1d6>
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d014      	beq.n	800220c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10d      	bne.n	800220c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f953 	bl	80024a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f06f 0201 	mvn.w	r2, #1
 800220a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800221a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d015      	beq.n	800224e <HAL_ADC_IRQHandler+0x218>
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d012      	beq.n	800224e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222c:	f043 0202 	orr.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0220 	mvn.w	r2, #32
 800223c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f93c 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0220 	mvn.w	r2, #32
 800224c:	601a      	str	r2, [r3, #0]
  }
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADC_Start_DMA+0x22>
 8002276:	2302      	movs	r3, #2
 8002278:	e0eb      	b.n	8002452 <HAL_ADC_Start_DMA+0x1fa>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d018      	beq.n	80022c2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a0:	4b6e      	ldr	r3, [pc, #440]	@ (800245c <HAL_ADC_Start_DMA+0x204>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002460 <HAL_ADC_Start_DMA+0x208>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9a      	lsrs	r2, r3, #18
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022d0:	d107      	bne.n	80022e2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 80a3 	bne.w	8002438 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800231c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002330:	d106      	bne.n	8002340 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f023 0206 	bic.w	r2, r3, #6
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
 800233e:	e002      	b.n	8002346 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234e:	4b45      	ldr	r3, [pc, #276]	@ (8002464 <HAL_ADC_Start_DMA+0x20c>)
 8002350:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002356:	4a44      	ldr	r2, [pc, #272]	@ (8002468 <HAL_ADC_Start_DMA+0x210>)
 8002358:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235e:	4a43      	ldr	r2, [pc, #268]	@ (800246c <HAL_ADC_Start_DMA+0x214>)
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	4a42      	ldr	r2, [pc, #264]	@ (8002470 <HAL_ADC_Start_DMA+0x218>)
 8002368:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002372:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002382:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002392:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	334c      	adds	r3, #76	@ 0x4c
 800239e:	4619      	mov	r1, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f001 fb64 	bl	8003a70 <HAL_DMA_Start_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d12a      	bne.n	800240e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002474 <HAL_ADC_Start_DMA+0x21c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d015      	beq.n	80023ee <HAL_ADC_Start_DMA+0x196>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002478 <HAL_ADC_Start_DMA+0x220>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_Start_DMA+0x180>
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_ADC_Start_DMA+0x20c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a27      	ldr	r2, [pc, #156]	@ (800247c <HAL_ADC_Start_DMA+0x224>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d136      	bne.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_ADC_Start_DMA+0x20c>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d130      	bne.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d129      	bne.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e020      	b.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <HAL_ADC_Start_DMA+0x21c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d11b      	bne.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d114      	bne.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	e00b      	b.n	8002450 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	f043 0210 	orr.w	r2, r3, #16
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002450:	7ffb      	ldrb	r3, [r7, #31]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000010 	.word	0x20000010
 8002460:	431bde83 	.word	0x431bde83
 8002464:	40012300 	.word	0x40012300
 8002468:	0800290d 	.word	0x0800290d
 800246c:	080029c7 	.word	0x080029c7
 8002470:	080029e3 	.word	0x080029e3
 8002474:	40012000 	.word	0x40012000
 8002478:	40012100 	.word	0x40012100
 800247c:	40012200 	.word	0x40012200

08002480 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x1c>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e105      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x228>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d925      	bls.n	8002548 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43da      	mvns	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	400a      	ands	r2, r1
 8002520:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68d9      	ldr	r1, [r3, #12]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	4603      	mov	r3, r0
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4403      	add	r3, r0
 800253a:	3b1e      	subs	r3, #30
 800253c:	409a      	lsls	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	e022      	b.n	800258e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	2207      	movs	r2, #7
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	400a      	ands	r2, r1
 800256a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4618      	mov	r0, r3
 800257e:	4603      	mov	r3, r0
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4403      	add	r3, r0
 8002584:	409a      	lsls	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d824      	bhi.n	80025e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b05      	subs	r3, #5
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b05      	subs	r3, #5
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80025de:	e04c      	b.n	800267a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d824      	bhi.n	8002632 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b23      	subs	r3, #35	@ 0x23
 80025fa:	221f      	movs	r2, #31
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b23      	subs	r3, #35	@ 0x23
 8002624:	fa00 f203 	lsl.w	r2, r0, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002630:	e023      	b.n	800267a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	3b41      	subs	r3, #65	@ 0x41
 8002644:	221f      	movs	r2, #31
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	400a      	ands	r2, r1
 8002652:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	3b41      	subs	r3, #65	@ 0x41
 800266e:	fa00 f203 	lsl.w	r2, r0, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267a:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <HAL_ADC_ConfigChannel+0x234>)
 800267c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	@ (8002708 <HAL_ADC_ConfigChannel+0x238>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d109      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1cc>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b12      	cmp	r3, #18
 800268e:	d105      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <HAL_ADC_ConfigChannel+0x238>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d123      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x21e>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d003      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x1e6>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b11      	cmp	r3, #17
 80026b4:	d11b      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d111      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <HAL_ADC_ConfigChannel+0x23c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_ADC_ConfigChannel+0x240>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	0c9a      	lsrs	r2, r3, #18
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40012300 	.word	0x40012300
 8002708:	40012000 	.word	0x40012000
 800270c:	20000010 	.word	0x20000010
 8002710:	431bde83 	.word	0x431bde83

08002714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271c:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <ADC_Init+0x1f0>)
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	4a58      	ldr	r2, [pc, #352]	@ (8002908 <ADC_Init+0x1f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e00f      	b.n	8002812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002810:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0202 	bic.w	r2, r2, #2
 8002820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7e1b      	ldrb	r3, [r3, #24]
 800282c:	005a      	lsls	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800285e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	3b01      	subs	r3, #1
 800286c:	035a      	lsls	r2, r3, #13
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e007      	b.n	8002888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	051a      	lsls	r2, r3, #20
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6899      	ldr	r1, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ca:	025a      	lsls	r2, r3, #9
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	029a      	lsls	r2, r3, #10
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40012300 	.word	0x40012300
 8002908:	0f000001 	.word	0x0f000001

0800290c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d13c      	bne.n	80029a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d12b      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d127      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002960:	2b00      	cmp	r3, #0
 8002962:	d119      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0220 	bic.w	r2, r2, #32
 8002972:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff fd71 	bl	8002480 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800299e:	e00e      	b.n	80029be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff fd85 	bl	80024bc <HAL_ADC_ErrorCallback>
}
 80029b2:	e004      	b.n	80029be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7ff fd5d 	bl	8002494 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff fd5a 	bl	80024bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0ed      	b.n	8002c12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe ffee 	bl	8001a24 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a58:	f7ff fa7a 	bl	8001f50 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a5e:	e012      	b.n	8002a86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a60:	f7ff fa76 	bl	8001f50 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b0a      	cmp	r3, #10
 8002a6c:	d90b      	bls.n	8002a86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0c5      	b.n	8002c12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0e5      	beq.n	8002a60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0202 	bic.w	r2, r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa4:	f7ff fa54 	bl	8001f50 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002aaa:	e012      	b.n	8002ad2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aac:	f7ff fa50 	bl	8001f50 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b0a      	cmp	r3, #10
 8002ab8:	d90b      	bls.n	8002ad2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e09f      	b.n	8002c12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e5      	bne.n	8002aac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7e1b      	ldrb	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d108      	bne.n	8002afa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e007      	b.n	8002b0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7e5b      	ldrb	r3, [r3, #25]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d108      	bne.n	8002b24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e007      	b.n	8002b34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e9b      	ldrb	r3, [r3, #26]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d108      	bne.n	8002b4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0220 	orr.w	r2, r2, #32
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e007      	b.n	8002b5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0220 	bic.w	r2, r2, #32
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7edb      	ldrb	r3, [r3, #27]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d108      	bne.n	8002b78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0210 	bic.w	r2, r2, #16
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e007      	b.n	8002b88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0210 	orr.w	r2, r2, #16
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7f1b      	ldrb	r3, [r3, #28]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d108      	bne.n	8002ba2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e007      	b.n	8002bb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7f5b      	ldrb	r3, [r3, #29]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0204 	orr.w	r2, r2, #4
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e007      	b.n	8002bdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	ea42 0103 	orr.w	r1, r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d003      	beq.n	8002c3c <HAL_CAN_ConfigFilter+0x20>
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	f040 80be 	bne.w	8002db8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002c3c:	4b65      	ldr	r3, [pc, #404]	@ (8002dd4 <HAL_CAN_ConfigFilter+0x1b8>)
 8002c3e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c56:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	401a      	ands	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d123      	bne.n	8002ce6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	401a      	ands	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cc0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	3248      	adds	r2, #72	@ 0x48
 8002cc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cdc:	6939      	ldr	r1, [r7, #16]
 8002cde:	3348      	adds	r3, #72	@ 0x48
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d122      	bne.n	8002d34 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	3248      	adds	r2, #72	@ 0x48
 8002d14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d2a:	6939      	ldr	r1, [r7, #16]
 8002d2c:	3348      	adds	r3, #72	@ 0x48
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002d4e:	e007      	b.n	8002d60 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	401a      	ands	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002d7a:	e007      	b.n	8002d8c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e006      	b.n	8002dc6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40006400 	.word	0x40006400

08002dd8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d12e      	bne.n	8002e4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e04:	f7ff f8a4 	bl	8001f50 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e0a:	e012      	b.n	8002e32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e0c:	f7ff f8a0 	bl	8001f50 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b0a      	cmp	r3, #10
 8002e18:	d90b      	bls.n	8002e32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2205      	movs	r2, #5
 8002e2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e012      	b.n	8002e58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e5      	bne.n	8002e0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e006      	b.n	8002e58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
  }
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e74:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e7e:	7ffb      	ldrb	r3, [r7, #31]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d003      	beq.n	8002e8c <HAL_CAN_AddTxMessage+0x2c>
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	f040 80ad 	bne.w	8002fe6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8095 	beq.w	8002fd6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	0e1b      	lsrs	r3, r3, #24
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	6809      	ldr	r1, [r1, #0]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3318      	adds	r3, #24
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	440b      	add	r3, r1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e00f      	b.n	8002f04 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002eee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ef4:	68f9      	ldr	r1, [r7, #12]
 8002ef6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ef8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3318      	adds	r3, #24
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	440b      	add	r3, r1
 8002f02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3318      	adds	r3, #24
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	440b      	add	r3, r1
 8002f14:	3304      	adds	r3, #4
 8002f16:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	7d1b      	ldrb	r3, [r3, #20]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d111      	bne.n	8002f44 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3318      	adds	r3, #24
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	6811      	ldr	r1, [r2, #0]
 8002f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	440b      	add	r3, r1
 8002f40:	3304      	adds	r3, #4
 8002f42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3307      	adds	r3, #7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	061a      	lsls	r2, r3, #24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3306      	adds	r3, #6
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3305      	adds	r3, #5
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	3204      	adds	r2, #4
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	4610      	mov	r0, r2
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6811      	ldr	r1, [r2, #0]
 8002f6c:	ea43 0200 	orr.w	r2, r3, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002f7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3303      	adds	r3, #3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	061a      	lsls	r2, r3, #24
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3302      	adds	r3, #2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3301      	adds	r3, #1
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	4313      	orrs	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	ea43 0200 	orr.w	r2, r3, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	440b      	add	r3, r1
 8002fac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002fb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3318      	adds	r3, #24
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4413      	add	r3, r2
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6811      	ldr	r1, [r2, #0]
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3318      	adds	r3, #24
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	440b      	add	r3, r1
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e00e      	b.n	8002ff4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e006      	b.n	8002ff4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3724      	adds	r7, #36	@ 0x24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003014:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d003      	beq.n	8003024 <HAL_CAN_GetRxMessage+0x24>
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b02      	cmp	r3, #2
 8003020:	f040 8103 	bne.w	800322a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10e      	bne.n	8003048 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0f7      	b.n	8003238 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d107      	bne.n	8003066 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0e8      	b.n	8003238 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	331b      	adds	r3, #27
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0204 	and.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10c      	bne.n	800309e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	331b      	adds	r3, #27
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4413      	add	r3, r2
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0d5b      	lsrs	r3, r3, #21
 8003094:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e00b      	b.n	80030b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	331b      	adds	r3, #27
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	4413      	add	r3, r2
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	331b      	adds	r3, #27
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4413      	add	r3, r2
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0202 	and.w	r2, r3, #2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	331b      	adds	r3, #27
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2208      	movs	r2, #8
 80030e8:	611a      	str	r2, [r3, #16]
 80030ea:	e00b      	b.n	8003104 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	331b      	adds	r3, #27
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	331b      	adds	r3, #27
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	b2da      	uxtb	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	331b      	adds	r3, #27
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	4413      	add	r3, r2
 800313e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0a1a      	lsrs	r2, r3, #8
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	4413      	add	r3, r2
 800316e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0c1a      	lsrs	r2, r3, #16
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3302      	adds	r3, #2
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	4413      	add	r3, r2
 8003188:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0e1a      	lsrs	r2, r3, #24
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3303      	adds	r3, #3
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0a1a      	lsrs	r2, r3, #8
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3305      	adds	r3, #5
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0c1a      	lsrs	r2, r3, #16
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	3306      	adds	r3, #6
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e1a      	lsrs	r2, r3, #24
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3307      	adds	r3, #7
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d108      	bne.n	8003216 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	60da      	str	r2, [r3, #12]
 8003214:	e007      	b.n	8003226 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e006      	b.n	8003238 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
  }
}
 8003238:	4618      	mov	r0, r3
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d002      	beq.n	8003262 <HAL_CAN_ActivateNotification+0x1e>
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d109      	bne.n	8003276 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6959      	ldr	r1, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e006      	b.n	8003284 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d07c      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d023      	beq.n	8003328 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f983 	bl	80035fe <HAL_CAN_TxMailbox0CompleteCallback>
 80032f8:	e016      	b.n	8003328 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
 800330c:	e00c      	b.n	8003328 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003320:	e002      	b.n	8003328 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f989 	bl	800363a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800333a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f963 	bl	8003612 <HAL_CAN_TxMailbox1CompleteCallback>
 800334c:	e016      	b.n	800337c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003360:	e00c      	b.n	800337c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
 8003374:	e002      	b.n	800337c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f969 	bl	800364e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800338e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f943 	bl	8003626 <HAL_CAN_TxMailbox2CompleteCallback>
 80033a0:	e016      	b.n	80033d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	e00c      	b.n	80033d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c8:	e002      	b.n	80033d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f949 	bl	8003662 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2210      	movs	r2, #16
 80033f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2208      	movs	r2, #8
 800340e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f930 	bl	8003676 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fdfe 	bl	8001030 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00c      	beq.n	8003458 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2210      	movs	r2, #16
 8003456:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2208      	movs	r2, #8
 8003472:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f912 	bl	800369e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8f9 	bl	800368a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2210      	movs	r2, #16
 80034b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f8fc 	bl	80036b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2208      	movs	r2, #8
 80034d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8f5 	bl	80036c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07b      	beq.n	80035de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d072      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	f043 0304 	orr.w	r3, r3, #4
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354a:	2b00      	cmp	r3, #0
 800354c:	d043      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d03e      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800355e:	2b60      	cmp	r3, #96	@ 0x60
 8003560:	d02b      	beq.n	80035ba <HAL_CAN_IRQHandler+0x32a>
 8003562:	2b60      	cmp	r3, #96	@ 0x60
 8003564:	d82e      	bhi.n	80035c4 <HAL_CAN_IRQHandler+0x334>
 8003566:	2b50      	cmp	r3, #80	@ 0x50
 8003568:	d022      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x320>
 800356a:	2b50      	cmp	r3, #80	@ 0x50
 800356c:	d82a      	bhi.n	80035c4 <HAL_CAN_IRQHandler+0x334>
 800356e:	2b40      	cmp	r3, #64	@ 0x40
 8003570:	d019      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x316>
 8003572:	2b40      	cmp	r3, #64	@ 0x40
 8003574:	d826      	bhi.n	80035c4 <HAL_CAN_IRQHandler+0x334>
 8003576:	2b30      	cmp	r3, #48	@ 0x30
 8003578:	d010      	beq.n	800359c <HAL_CAN_IRQHandler+0x30c>
 800357a:	2b30      	cmp	r3, #48	@ 0x30
 800357c:	d822      	bhi.n	80035c4 <HAL_CAN_IRQHandler+0x334>
 800357e:	2b10      	cmp	r3, #16
 8003580:	d002      	beq.n	8003588 <HAL_CAN_IRQHandler+0x2f8>
 8003582:	2b20      	cmp	r3, #32
 8003584:	d005      	beq.n	8003592 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003586:	e01d      	b.n	80035c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	f043 0308 	orr.w	r3, r3, #8
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003590:	e019      	b.n	80035c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800359a:	e014      	b.n	80035c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	f043 0320 	orr.w	r3, r3, #32
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035a4:	e00f      	b.n	80035c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035ae:	e00a      	b.n	80035c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035b8:	e005      	b.n	80035c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80035c2:	e000      	b.n	80035c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80035c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80035d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2204      	movs	r2, #4
 80035dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f872 	bl	80036da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035f6:	bf00      	nop
 80035f8:	3728      	adds	r7, #40	@ 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	@ (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	@ (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	@ (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	@ 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff8e 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff29 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff3e 	bl	8003738 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff8e 	bl	80037e4 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5d 	bl	8003790 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff31 	bl	8003754 <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffa2 	bl	800384c <SysTick_Config>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003920:	f7fe fb16 	bl	8001f50 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e099      	b.n	8003a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003950:	e00f      	b.n	8003972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003952:	f7fe fafd 	bl	8001f50 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b05      	cmp	r3, #5
 800395e:	d908      	bls.n	8003972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2203      	movs	r2, #3
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e078      	b.n	8003a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e8      	bne.n	8003952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <HAL_DMA_Init+0x158>)
 800398c:	4013      	ands	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800399e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d107      	bne.n	80039dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	4313      	orrs	r3, r2
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d117      	bne.n	8003a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fa6f 	bl	8003efc <DMA_CheckFifoParam>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2240      	movs	r2, #64	@ 0x40
 8003a28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a32:	2301      	movs	r3, #1
 8003a34:	e016      	b.n	8003a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa26 	bl	8003e90 <DMA_CalcBaseAndBitshift>
 8003a44:	4603      	mov	r3, r0
 8003a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	223f      	movs	r2, #63	@ 0x3f
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	f010803f 	.word	0xf010803f

08003a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_Start_IT+0x26>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e040      	b.n	8003b18 <HAL_DMA_Start_IT+0xa8>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d12f      	bne.n	8003b0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9b8 	bl	8003e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	223f      	movs	r2, #63	@ 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0216 	orr.w	r2, r2, #22
 8003ade:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e005      	b.n	8003b16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d68 <HAL_DMA_IRQHandler+0x248>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a8e      	ldr	r2, [pc, #568]	@ (8003d6c <HAL_DMA_IRQHandler+0x24c>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0a9b      	lsrs	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01a      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b78:	2208      	movs	r2, #8
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d012      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bae:	2201      	movs	r2, #1
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d012      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	2204      	movs	r2, #4
 8003be6:	409a      	lsls	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f043 0204 	orr.w	r2, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d043      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03c      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d024      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e01f      	b.n	8003c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e016      	b.n	8003c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0208 	bic.w	r2, r2, #8
 8003c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	2220      	movs	r2, #32
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 808f 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8087 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d136      	bne.n	8003d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0216 	bic.w	r2, r2, #22
 8003cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x1da>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0208 	bic.w	r2, r2, #8
 8003d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	223f      	movs	r2, #63	@ 0x3f
 8003d10:	409a      	lsls	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d07e      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
        }
        return;
 8003d36:	e079      	b.n	8003e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01d      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d031      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e02c      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
 8003d66:	bf00      	nop
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d023      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	e01e      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10f      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0210 	bic.w	r2, r2, #16
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d032      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3301      	adds	r3, #1
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d307      	bcc.n	8003e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f2      	bne.n	8003dec <HAL_DMA_IRQHandler+0x2cc>
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e000      	b.n	8003e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e2c:	bf00      	nop
    }
  }
}
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d108      	bne.n	8003e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e72:	e007      	b.n	8003e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3b10      	subs	r3, #16
 8003ea0:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eaa:	4a13      	ldr	r2, [pc, #76]	@ (8003ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d909      	bls.n	8003ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	1d1a      	adds	r2, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ed0:	e007      	b.n	8003ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	aaaaaaab 	.word	0xaaaaaaab
 8003ef8:	080088a0 	.word	0x080088a0

08003efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11f      	bne.n	8003f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d856      	bhi.n	8003fca <DMA_CheckFifoParam+0xce>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <DMA_CheckFifoParam+0x28>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f47 	.word	0x08003f47
 8003f2c:	08003f35 	.word	0x08003f35
 8003f30:	08003fcb 	.word	0x08003fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d046      	beq.n	8003fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f44:	e043      	b.n	8003fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f4e:	d140      	bne.n	8003fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f54:	e03d      	b.n	8003fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5e:	d121      	bne.n	8003fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d837      	bhi.n	8003fd6 <DMA_CheckFifoParam+0xda>
 8003f66:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <DMA_CheckFifoParam+0x70>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f83 	.word	0x08003f83
 8003f74:	08003f7d 	.word	0x08003f7d
 8003f78:	08003f95 	.word	0x08003f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e030      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d025      	beq.n	8003fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f92:	e022      	b.n	8003fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f9c:	d11f      	bne.n	8003fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fa2:	e01c      	b.n	8003fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d903      	bls.n	8003fb2 <DMA_CheckFifoParam+0xb6>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d003      	beq.n	8003fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb0:	e018      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb6:	e015      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00e      	beq.n	8003fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	e00b      	b.n	8003fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e00a      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e008      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e006      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e004      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop

08003ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	@ 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e16b      	b.n	80042e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	429a      	cmp	r2, r3
 800402a:	f040 815a 	bne.w	80042e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d005      	beq.n	8004046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004042:	2b02      	cmp	r3, #2
 8004044:	d130      	bne.n	80040a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	2203      	movs	r2, #3
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800407c:	2201      	movs	r2, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 0201 	and.w	r2, r3, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d017      	beq.n	80040e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d123      	bne.n	8004138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	08da      	lsrs	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3208      	adds	r2, #8
 80040f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	220f      	movs	r2, #15
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	08da      	lsrs	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3208      	adds	r2, #8
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0203 	and.w	r2, r3, #3
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80b4 	beq.w	80042e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b60      	ldr	r3, [pc, #384]	@ (8004300 <HAL_GPIO_Init+0x30c>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	4a5f      	ldr	r2, [pc, #380]	@ (8004300 <HAL_GPIO_Init+0x30c>)
 8004184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004188:	6453      	str	r3, [r2, #68]	@ 0x44
 800418a:	4b5d      	ldr	r3, [pc, #372]	@ (8004300 <HAL_GPIO_Init+0x30c>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004196:	4a5b      	ldr	r2, [pc, #364]	@ (8004304 <HAL_GPIO_Init+0x310>)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	3302      	adds	r3, #2
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a52      	ldr	r2, [pc, #328]	@ (8004308 <HAL_GPIO_Init+0x314>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <HAL_GPIO_Init+0x226>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a51      	ldr	r2, [pc, #324]	@ (800430c <HAL_GPIO_Init+0x318>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d025      	beq.n	8004216 <HAL_GPIO_Init+0x222>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a50      	ldr	r2, [pc, #320]	@ (8004310 <HAL_GPIO_Init+0x31c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01f      	beq.n	8004212 <HAL_GPIO_Init+0x21e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004314 <HAL_GPIO_Init+0x320>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d019      	beq.n	800420e <HAL_GPIO_Init+0x21a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004318 <HAL_GPIO_Init+0x324>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_GPIO_Init+0x216>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4d      	ldr	r2, [pc, #308]	@ (800431c <HAL_GPIO_Init+0x328>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00d      	beq.n	8004206 <HAL_GPIO_Init+0x212>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4c      	ldr	r2, [pc, #304]	@ (8004320 <HAL_GPIO_Init+0x32c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <HAL_GPIO_Init+0x20e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004324 <HAL_GPIO_Init+0x330>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_GPIO_Init+0x20a>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e00e      	b.n	800421c <HAL_GPIO_Init+0x228>
 80041fe:	2308      	movs	r3, #8
 8004200:	e00c      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004202:	2306      	movs	r3, #6
 8004204:	e00a      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004206:	2305      	movs	r3, #5
 8004208:	e008      	b.n	800421c <HAL_GPIO_Init+0x228>
 800420a:	2304      	movs	r3, #4
 800420c:	e006      	b.n	800421c <HAL_GPIO_Init+0x228>
 800420e:	2303      	movs	r3, #3
 8004210:	e004      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004212:	2302      	movs	r3, #2
 8004214:	e002      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_GPIO_Init+0x228>
 800421a:	2300      	movs	r3, #0
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f002 0203 	and.w	r2, r2, #3
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	4093      	lsls	r3, r2
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800422c:	4935      	ldr	r1, [pc, #212]	@ (8004304 <HAL_GPIO_Init+0x310>)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	3302      	adds	r3, #2
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423a:	4b3b      	ldr	r3, [pc, #236]	@ (8004328 <HAL_GPIO_Init+0x334>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425e:	4a32      	ldr	r2, [pc, #200]	@ (8004328 <HAL_GPIO_Init+0x334>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004264:	4b30      	ldr	r3, [pc, #192]	@ (8004328 <HAL_GPIO_Init+0x334>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004288:	4a27      	ldr	r2, [pc, #156]	@ (8004328 <HAL_GPIO_Init+0x334>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800428e:	4b26      	ldr	r3, [pc, #152]	@ (8004328 <HAL_GPIO_Init+0x334>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004328 <HAL_GPIO_Init+0x334>)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <HAL_GPIO_Init+0x334>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042dc:	4a12      	ldr	r2, [pc, #72]	@ (8004328 <HAL_GPIO_Init+0x334>)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	f67f ae90 	bls.w	8004010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	@ 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	40013800 	.word	0x40013800
 8004308:	40020000 	.word	0x40020000
 800430c:	40020400 	.word	0x40020400
 8004310:	40020800 	.word	0x40020800
 8004314:	40020c00 	.word	0x40020c00
 8004318:	40021000 	.word	0x40021000
 800431c:	40021400 	.word	0x40021400
 8004320:	40021800 	.word	0x40021800
 8004324:	40021c00 	.word	0x40021c00
 8004328:	40013c00 	.word	0x40013c00

0800432c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800433c:	787b      	ldrb	r3, [r7, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004348:	e003      	b.n	8004352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	041a      	lsls	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e267      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d075      	beq.n	800446a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800437e:	4b88      	ldr	r3, [pc, #544]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b04      	cmp	r3, #4
 8004388:	d00c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b85      	ldr	r3, [pc, #532]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004392:	2b08      	cmp	r3, #8
 8004394:	d112      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4b82      	ldr	r3, [pc, #520]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a2:	d10b      	bne.n	80043bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	4b7e      	ldr	r3, [pc, #504]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05b      	beq.n	8004468 <HAL_RCC_OscConfig+0x108>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d157      	bne.n	8004468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e242      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c4:	d106      	bne.n	80043d4 <HAL_RCC_OscConfig+0x74>
 80043c6:	4b76      	ldr	r3, [pc, #472]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a75      	ldr	r2, [pc, #468]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e01d      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x98>
 80043de:	4b70      	ldr	r3, [pc, #448]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6f      	ldr	r2, [pc, #444]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b6d      	ldr	r3, [pc, #436]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6c      	ldr	r2, [pc, #432]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0xb0>
 80043f8:	4b69      	ldr	r3, [pc, #420]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a68      	ldr	r2, [pc, #416]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b66      	ldr	r3, [pc, #408]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800440a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800440e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d013      	beq.n	8004440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fd fd9a 	bl	8001f50 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fd fd96 	bl	8001f50 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e207      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b5b      	ldr	r3, [pc, #364]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0xc0>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fd fd86 	bl	8001f50 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004448:	f7fd fd82 	bl	8001f50 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	@ 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e1f3      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445a:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0xe8>
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d063      	beq.n	800453e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004476:	4b4a      	ldr	r3, [pc, #296]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b47      	ldr	r3, [pc, #284]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800448a:	2b08      	cmp	r3, #8
 800448c:	d11c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b44      	ldr	r3, [pc, #272]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d116      	bne.n	80044c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e1c7      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b2:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4937      	ldr	r1, [pc, #220]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c6:	e03a      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d0:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <HAL_RCC_OscConfig+0x244>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd fd3b 	bl	8001f50 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044de:	f7fd fd37 	bl	8001f50 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e1a8      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f0:	4b2b      	ldr	r3, [pc, #172]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fc:	4b28      	ldr	r3, [pc, #160]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	4925      	ldr	r1, [pc, #148]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	e015      	b.n	800453e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004512:	4b24      	ldr	r3, [pc, #144]	@ (80045a4 <HAL_RCC_OscConfig+0x244>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fd1a 	bl	8001f50 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004520:	f7fd fd16 	bl	8001f50 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e187      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004532:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d036      	beq.n	80045b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fd fcfa 	bl	8001f50 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004560:	f7fd fcf6 	bl	8001f50 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e167      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <HAL_RCC_OscConfig+0x240>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x200>
 800457e:	e01b      	b.n	80045b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004580:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <HAL_RCC_OscConfig+0x248>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fd fce3 	bl	8001f50 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	e00e      	b.n	80045ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800458e:	f7fd fcdf 	bl	8001f50 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d907      	bls.n	80045ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e150      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	42470000 	.word	0x42470000
 80045a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	4b88      	ldr	r3, [pc, #544]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ea      	bne.n	800458e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8097 	beq.w	80046f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b81      	ldr	r3, [pc, #516]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b7d      	ldr	r3, [pc, #500]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	4a7c      	ldr	r2, [pc, #496]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e6:	4b7a      	ldr	r3, [pc, #488]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d118      	bne.n	8004634 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b74      	ldr	r3, [pc, #464]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a73      	ldr	r2, [pc, #460]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fd fc9f 	bl	8001f50 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fd fc9b 	bl	8001f50 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e10c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b6a      	ldr	r3, [pc, #424]	@ (80047d4 <HAL_RCC_OscConfig+0x474>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_OscConfig+0x2ea>
 800463c:	4b64      	ldr	r3, [pc, #400]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	4a63      	ldr	r2, [pc, #396]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	@ 0x70
 8004648:	e01c      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b05      	cmp	r3, #5
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0x30c>
 8004652:	4b5f      	ldr	r3, [pc, #380]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	4a5e      	ldr	r2, [pc, #376]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	6713      	str	r3, [r2, #112]	@ 0x70
 800465e:	4b5c      	ldr	r3, [pc, #368]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	4a5b      	ldr	r2, [pc, #364]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6713      	str	r3, [r2, #112]	@ 0x70
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0x324>
 800466c:	4b58      	ldr	r3, [pc, #352]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a57      	ldr	r2, [pc, #348]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
 8004678:	4b55      	ldr	r3, [pc, #340]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467c:	4a54      	ldr	r2, [pc, #336]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800467e:	f023 0304 	bic.w	r3, r3, #4
 8004682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fc60 	bl	8001f50 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fd fc5c 	bl	8001f50 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0cb      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	4b49      	ldr	r3, [pc, #292]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ee      	beq.n	8004694 <HAL_RCC_OscConfig+0x334>
 80046b6:	e014      	b.n	80046e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fd fc4a 	bl	8001f50 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fd fc46 	bl	8001f50 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e0b5      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d6:	4b3e      	ldr	r3, [pc, #248]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ee      	bne.n	80046c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	4a38      	ldr	r2, [pc, #224]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a1 	beq.w	8004840 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fe:	4b34      	ldr	r3, [pc, #208]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b08      	cmp	r3, #8
 8004708:	d05c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d141      	bne.n	8004796 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fd fc1a 	bl	8001f50 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fd fc16 	bl	8001f50 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e087      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	491b      	ldr	r1, [pc, #108]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004768:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x478>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fd fbef 	bl	8001f50 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd fbeb 	bl	8001f50 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e05c      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x416>
 8004794:	e054      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fd fbd8 	bl	8001f50 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fd fbd4 	bl	8001f50 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e045      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x444>
 80047c2:	e03d      	b.n	8004840 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e038      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <HAL_RCC_OscConfig+0x4ec>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d028      	beq.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d121      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d111      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cc      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b68      	ldr	r3, [pc, #416]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d90c      	bls.n	800488c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b65      	ldr	r3, [pc, #404]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b63      	ldr	r3, [pc, #396]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0b8      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a4:	4b59      	ldr	r3, [pc, #356]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a58      	ldr	r2, [pc, #352]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048bc:	4b53      	ldr	r3, [pc, #332]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a52      	ldr	r2, [pc, #328]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c8:	4b50      	ldr	r3, [pc, #320]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	494d      	ldr	r1, [pc, #308]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d044      	beq.n	8004970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b47      	ldr	r3, [pc, #284]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d119      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e07f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d003      	beq.n	800490e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	2b03      	cmp	r3, #3
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e06f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e067      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b37      	ldr	r3, [pc, #220]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4934      	ldr	r1, [pc, #208]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004940:	f7fd fb06 	bl	8001f50 <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fd fb02 	bl	8001f50 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e04f      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b25      	ldr	r3, [pc, #148]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d20c      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b22      	ldr	r3, [pc, #136]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b20      	ldr	r3, [pc, #128]	@ (8004a08 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e032      	b.n	80049fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a4:	4b19      	ldr	r3, [pc, #100]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4916      	ldr	r1, [pc, #88]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c2:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	490e      	ldr	r1, [pc, #56]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049d6:	f000 f821 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	490a      	ldr	r1, [pc, #40]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	5ccb      	ldrb	r3, [r1, r3]
 80049ea:	fa22 f303 	lsr.w	r3, r2, r3
 80049ee:	4a09      	ldr	r2, [pc, #36]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fa66 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023c00 	.word	0x40023c00
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08008888 	.word	0x08008888
 8004a14:	20000010 	.word	0x20000010
 8004a18:	20000014 	.word	0x20000014

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b094      	sub	sp, #80	@ 0x50
 8004a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a34:	4b79      	ldr	r3, [pc, #484]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x40>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	f200 80e1 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a4e:	e0db      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b73      	ldr	r3, [pc, #460]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a54:	e0db      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b72      	ldr	r3, [pc, #456]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a5a:	e0d8      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b6d      	ldr	r3, [pc, #436]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b6a      	ldr	r3, [pc, #424]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a86:	2300      	movs	r3, #0
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	0159      	lsls	r1, r3, #5
 8004a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa0:	0150      	lsls	r0, r2, #5
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	1a51      	subs	r1, r2, r1
 8004aaa:	6139      	str	r1, [r7, #16]
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	018b      	lsls	r3, r1, #6
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aca:	4651      	mov	r1, sl
 8004acc:	018a      	lsls	r2, r1, #6
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	eb63 0901 	sbc.w	r9, r3, r1
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aee:	4690      	mov	r8, r2
 8004af0:	4699      	mov	r9, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	eb18 0303 	adds.w	r3, r8, r3
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	462b      	mov	r3, r5
 8004afc:	eb49 0303 	adc.w	r3, r9, r3
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b0e:	4629      	mov	r1, r5
 8004b10:	028b      	lsls	r3, r1, #10
 8004b12:	4621      	mov	r1, r4
 8004b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b18:	4621      	mov	r1, r4
 8004b1a:	028a      	lsls	r2, r1, #10
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b22:	2200      	movs	r2, #0
 8004b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b2c:	f7fc f83c 	bl	8000ba8 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	e058      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	4b38      	ldr	r3, [pc, #224]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	2200      	movs	r2, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	4611      	mov	r1, r2
 8004b46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	0159      	lsls	r1, r3, #5
 8004b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b66:	0150      	lsls	r0, r2, #5
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b90:	eb63 050b 	sbc.w	r5, r3, fp
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	00eb      	lsls	r3, r5, #3
 8004b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba2:	00e2      	lsls	r2, r4, #3
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	461d      	mov	r5, r3
 8004ba8:	4643      	mov	r3, r8
 8004baa:	18e3      	adds	r3, r4, r3
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	eb45 0303 	adc.w	r3, r5, r3
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	028b      	lsls	r3, r1, #10
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bcc:	4621      	mov	r1, r4
 8004bce:	028a      	lsls	r2, r1, #10
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	61fa      	str	r2, [r7, #28]
 8004bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be0:	f7fb ffe2 	bl	8000ba8 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3750      	adds	r7, #80	@ 0x50
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000010 	.word	0x20000010

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a9b      	lsrs	r3, r3, #10
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	@ (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	08008898 	.word	0x08008898

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c68:	f7ff ffdc 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0b5b      	lsrs	r3, r3, #13
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	@ (8004c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800
 8004c88:	08008898 	.word	0x08008898

08004c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e07b      	b.n	8004d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cae:	d009      	beq.n	8004cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61da      	str	r2, [r3, #28]
 8004cb6:	e005      	b.n	8004cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc fef0 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d48:	ea42 0103 	orr.w	r1, r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	f003 0104 	and.w	r1, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f003 0210 	and.w	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b088      	sub	sp, #32
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dae:	f7fd f8cf 	bl	8001f50 <HAL_GetTick>
 8004db2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e12a      	b.n	800501e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x36>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e122      	b.n	800501e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_SPI_Transmit+0x48>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e11b      	b.n	800501e <HAL_SPI_Transmit+0x280>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2203      	movs	r2, #3
 8004df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	88fa      	ldrh	r2, [r7, #6]
 8004e06:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e34:	d10f      	bne.n	8004e56 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d007      	beq.n	8004e74 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e7c:	d152      	bne.n	8004f24 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_SPI_Transmit+0xee>
 8004e86:	8b7b      	ldrh	r3, [r7, #26]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d145      	bne.n	8004f18 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	881a      	ldrh	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	1c9a      	adds	r2, r3, #2
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eb0:	e032      	b.n	8004f18 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d112      	bne.n	8004ee6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	881a      	ldrh	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ee4:	e018      	b.n	8004f18 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee6:	f7fd f833 	bl	8001f50 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d803      	bhi.n	8004efe <HAL_SPI_Transmit+0x160>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d102      	bne.n	8004f04 <HAL_SPI_Transmit+0x166>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e082      	b.n	800501e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1c7      	bne.n	8004eb2 <HAL_SPI_Transmit+0x114>
 8004f22:	e053      	b.n	8004fcc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_Transmit+0x194>
 8004f2c:	8b7b      	ldrh	r3, [r7, #26]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d147      	bne.n	8004fc2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f58:	e033      	b.n	8004fc2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d113      	bne.n	8004f90 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f8e:	e018      	b.n	8004fc2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f90:	f7fc ffde 	bl	8001f50 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d803      	bhi.n	8004fa8 <HAL_SPI_Transmit+0x20a>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d102      	bne.n	8004fae <HAL_SPI_Transmit+0x210>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e02d      	b.n	800501e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1c6      	bne.n	8004f5a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f8b1 	bl	8005138 <SPI_EndRxTxTransaction>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800501c:	2300      	movs	r3, #0
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005038:	f7fc ff8a 	bl	8001f50 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4413      	add	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005048:	f7fc ff82 	bl	8001f50 <HAL_GetTick>
 800504c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800504e:	4b39      	ldr	r3, [pc, #228]	@ (8005134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	015b      	lsls	r3, r3, #5
 8005054:	0d1b      	lsrs	r3, r3, #20
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	fb02 f303 	mul.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	e055      	b.n	800510c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d051      	beq.n	800510c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005068:	f7fc ff72 	bl	8001f50 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d902      	bls.n	800507e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d13d      	bne.n	80050fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800508c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005096:	d111      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a0:	d004      	beq.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050aa:	d107      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c4:	d10f      	bne.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e018      	b.n	800512c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	e002      	b.n	800510c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	3b01      	subs	r3, #1
 800510a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	429a      	cmp	r2, r3
 8005128:	d19a      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3720      	adds	r7, #32
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000010 	.word	0x20000010

08005138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2201      	movs	r2, #1
 800514c:	2102      	movs	r1, #2
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ff6a 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e032      	b.n	80051d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800516a:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <SPI_EndRxTxTransaction+0xa0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1b      	ldr	r2, [pc, #108]	@ (80051dc <SPI_EndRxTxTransaction+0xa4>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0d5b      	lsrs	r3, r3, #21
 8005176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005188:	d112      	bne.n	80051b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	2180      	movs	r1, #128	@ 0x80
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff ff47 	bl	8005028 <SPI_WaitFlagStateUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d016      	beq.n	80051ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e00f      	b.n	80051d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d0f2      	beq.n	80051b0 <SPI_EndRxTxTransaction+0x78>
 80051ca:	e000      	b.n	80051ce <SPI_EndRxTxTransaction+0x96>
        break;
 80051cc:	bf00      	nop
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000010 	.word	0x20000010
 80051dc:	165e9f81 	.word	0x165e9f81

080051e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e042      	b.n	8005278 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fca4 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2224      	movs	r2, #36	@ 0x24
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f973 	bl	8005510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	@ 0x28
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b20      	cmp	r3, #32
 800529e:	d175      	bne.n	800538c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_Transmit+0x2c>
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e06e      	b.n	800538e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2221      	movs	r2, #33	@ 0x21
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052be:	f7fc fe47 	bl	8001f50 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d8:	d108      	bne.n	80052ec <HAL_UART_Transmit+0x6c>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e003      	b.n	80052f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052f4:	e02e      	b.n	8005354 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	2180      	movs	r1, #128	@ 0x80
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f848 	bl	8005396 <UART_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e03a      	b.n	800538e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800532c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	3302      	adds	r3, #2
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	e007      	b.n	8005346 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	3301      	adds	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1cb      	bne.n	80052f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	2140      	movs	r1, #64	@ 0x40
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f814 	bl	8005396 <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a6:	e03b      	b.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d037      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b0:	f7fc fdce 	bl	8001f50 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d302      	bcc.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e03a      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d023      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b80      	cmp	r3, #128	@ 0x80
 80053dc:	d020      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b40      	cmp	r3, #64	@ 0x40
 80053e2:	d01d      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d116      	bne.n	8005420 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f81d 	bl	8005448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2208      	movs	r2, #8
 8005412:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e00f      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	429a      	cmp	r2, r3
 800543c:	d0b4      	beq.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b095      	sub	sp, #84	@ 0x54
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005470:	643a      	str	r2, [r7, #64]	@ 0x40
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005476:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	61fb      	str	r3, [r7, #28]
   return(result);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e5      	bne.n	8005484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d119      	bne.n	80054f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f023 0310 	bic.w	r3, r3, #16
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e0:	61ba      	str	r2, [r7, #24]
 80054e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6979      	ldr	r1, [r7, #20]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	613b      	str	r3, [r7, #16]
   return(result);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005502:	bf00      	nop
 8005504:	3754      	adds	r7, #84	@ 0x54
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005514:	b0c0      	sub	sp, #256	@ 0x100
 8005516:	af00      	add	r7, sp, #0
 8005518:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	68d9      	ldr	r1, [r3, #12]
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	ea40 0301 	orr.w	r3, r0, r1
 8005538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	431a      	orrs	r2, r3
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	431a      	orrs	r2, r3
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005568:	f021 010c 	bic.w	r1, r1, #12
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005576:	430b      	orrs	r3, r1
 8005578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800557a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558a:	6999      	ldr	r1, [r3, #24]
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	ea40 0301 	orr.w	r3, r0, r1
 8005596:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b8f      	ldr	r3, [pc, #572]	@ (80057dc <UART_SetConfig+0x2cc>)
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d005      	beq.n	80055b0 <UART_SetConfig+0xa0>
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b8d      	ldr	r3, [pc, #564]	@ (80057e0 <UART_SetConfig+0x2d0>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d104      	bne.n	80055ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b0:	f7ff fb58 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 80055b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055b8:	e003      	b.n	80055c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ba:	f7ff fb3f 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80055be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055cc:	f040 810c 	bne.w	80057e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055e2:	4622      	mov	r2, r4
 80055e4:	462b      	mov	r3, r5
 80055e6:	1891      	adds	r1, r2, r2
 80055e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055ea:	415b      	adcs	r3, r3
 80055ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055f2:	4621      	mov	r1, r4
 80055f4:	eb12 0801 	adds.w	r8, r2, r1
 80055f8:	4629      	mov	r1, r5
 80055fa:	eb43 0901 	adc.w	r9, r3, r1
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005612:	4690      	mov	r8, r2
 8005614:	4699      	mov	r9, r3
 8005616:	4623      	mov	r3, r4
 8005618:	eb18 0303 	adds.w	r3, r8, r3
 800561c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005620:	462b      	mov	r3, r5
 8005622:	eb49 0303 	adc.w	r3, r9, r3
 8005626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005636:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800563a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800563e:	460b      	mov	r3, r1
 8005640:	18db      	adds	r3, r3, r3
 8005642:	653b      	str	r3, [r7, #80]	@ 0x50
 8005644:	4613      	mov	r3, r2
 8005646:	eb42 0303 	adc.w	r3, r2, r3
 800564a:	657b      	str	r3, [r7, #84]	@ 0x54
 800564c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005654:	f7fb faa8 	bl	8000ba8 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4b61      	ldr	r3, [pc, #388]	@ (80057e4 <UART_SetConfig+0x2d4>)
 800565e:	fba3 2302 	umull	r2, r3, r3, r2
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	011c      	lsls	r4, r3, #4
 8005666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566a:	2200      	movs	r2, #0
 800566c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005670:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005674:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	1891      	adds	r1, r2, r2
 800567e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005680:	415b      	adcs	r3, r3
 8005682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005684:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005688:	4641      	mov	r1, r8
 800568a:	eb12 0a01 	adds.w	sl, r2, r1
 800568e:	4649      	mov	r1, r9
 8005690:	eb43 0b01 	adc.w	fp, r3, r1
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a8:	4692      	mov	sl, r2
 80056aa:	469b      	mov	fp, r3
 80056ac:	4643      	mov	r3, r8
 80056ae:	eb1a 0303 	adds.w	r3, sl, r3
 80056b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056b6:	464b      	mov	r3, r9
 80056b8:	eb4b 0303 	adc.w	r3, fp, r3
 80056bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056d4:	460b      	mov	r3, r1
 80056d6:	18db      	adds	r3, r3, r3
 80056d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056da:	4613      	mov	r3, r2
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056ea:	f7fb fa5d 	bl	8000ba8 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	4b3b      	ldr	r3, [pc, #236]	@ (80057e4 <UART_SetConfig+0x2d4>)
 80056f6:	fba3 2301 	umull	r2, r3, r3, r1
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	2264      	movs	r2, #100	@ 0x64
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	1acb      	subs	r3, r1, r3
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800570a:	4b36      	ldr	r3, [pc, #216]	@ (80057e4 <UART_SetConfig+0x2d4>)
 800570c:	fba3 2302 	umull	r2, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005718:	441c      	add	r4, r3
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005724:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005728:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005734:	415b      	adcs	r3, r3
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800573c:	4641      	mov	r1, r8
 800573e:	1851      	adds	r1, r2, r1
 8005740:	6339      	str	r1, [r7, #48]	@ 0x30
 8005742:	4649      	mov	r1, r9
 8005744:	414b      	adcs	r3, r1
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005754:	4659      	mov	r1, fp
 8005756:	00cb      	lsls	r3, r1, #3
 8005758:	4651      	mov	r1, sl
 800575a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575e:	4651      	mov	r1, sl
 8005760:	00ca      	lsls	r2, r1, #3
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	4603      	mov	r3, r0
 8005768:	4642      	mov	r2, r8
 800576a:	189b      	adds	r3, r3, r2
 800576c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005770:	464b      	mov	r3, r9
 8005772:	460a      	mov	r2, r1
 8005774:	eb42 0303 	adc.w	r3, r2, r3
 8005778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005788:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800578c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005790:	460b      	mov	r3, r1
 8005792:	18db      	adds	r3, r3, r3
 8005794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005796:	4613      	mov	r3, r2
 8005798:	eb42 0303 	adc.w	r3, r2, r3
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057a6:	f7fb f9ff 	bl	8000ba8 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <UART_SetConfig+0x2d4>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	@ 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	3332      	adds	r3, #50	@ 0x32
 80057c2:	4a08      	ldr	r2, [pc, #32]	@ (80057e4 <UART_SetConfig+0x2d4>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	f003 0207 	and.w	r2, r3, #7
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4422      	add	r2, r4
 80057d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d8:	e106      	b.n	80059e8 <UART_SetConfig+0x4d8>
 80057da:	bf00      	nop
 80057dc:	40011000 	.word	0x40011000
 80057e0:	40011400 	.word	0x40011400
 80057e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057fa:	4642      	mov	r2, r8
 80057fc:	464b      	mov	r3, r9
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	6239      	str	r1, [r7, #32]
 8005802:	415b      	adcs	r3, r3
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
 8005806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800580a:	4641      	mov	r1, r8
 800580c:	1854      	adds	r4, r2, r1
 800580e:	4649      	mov	r1, r9
 8005810:	eb43 0501 	adc.w	r5, r3, r1
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	00eb      	lsls	r3, r5, #3
 800581e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005822:	00e2      	lsls	r2, r4, #3
 8005824:	4614      	mov	r4, r2
 8005826:	461d      	mov	r5, r3
 8005828:	4643      	mov	r3, r8
 800582a:	18e3      	adds	r3, r4, r3
 800582c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005830:	464b      	mov	r3, r9
 8005832:	eb45 0303 	adc.w	r3, r5, r3
 8005836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005846:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005856:	4629      	mov	r1, r5
 8005858:	008b      	lsls	r3, r1, #2
 800585a:	4621      	mov	r1, r4
 800585c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005860:	4621      	mov	r1, r4
 8005862:	008a      	lsls	r2, r1, #2
 8005864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005868:	f7fb f99e 	bl	8000ba8 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4b60      	ldr	r3, [pc, #384]	@ (80059f4 <UART_SetConfig+0x4e4>)
 8005872:	fba3 2302 	umull	r2, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	011c      	lsls	r4, r3, #4
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005884:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005888:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	61b9      	str	r1, [r7, #24]
 8005894:	415b      	adcs	r3, r3
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589c:	4641      	mov	r1, r8
 800589e:	1851      	adds	r1, r2, r1
 80058a0:	6139      	str	r1, [r7, #16]
 80058a2:	4649      	mov	r1, r9
 80058a4:	414b      	adcs	r3, r1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b4:	4659      	mov	r1, fp
 80058b6:	00cb      	lsls	r3, r1, #3
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058be:	4651      	mov	r1, sl
 80058c0:	00ca      	lsls	r2, r1, #3
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	4642      	mov	r2, r8
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058d0:	464b      	mov	r3, r9
 80058d2:	460a      	mov	r2, r1
 80058d4:	eb42 0303 	adc.w	r3, r2, r3
 80058d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058f4:	4649      	mov	r1, r9
 80058f6:	008b      	lsls	r3, r1, #2
 80058f8:	4641      	mov	r1, r8
 80058fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fe:	4641      	mov	r1, r8
 8005900:	008a      	lsls	r2, r1, #2
 8005902:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005906:	f7fb f94f 	bl	8000ba8 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4611      	mov	r1, r2
 8005910:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <UART_SetConfig+0x4e4>)
 8005912:	fba3 2301 	umull	r2, r3, r3, r1
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2264      	movs	r2, #100	@ 0x64
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	1acb      	subs	r3, r1, r3
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	3332      	adds	r3, #50	@ 0x32
 8005924:	4a33      	ldr	r2, [pc, #204]	@ (80059f4 <UART_SetConfig+0x4e4>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005930:	441c      	add	r4, r3
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005936:	2200      	movs	r2, #0
 8005938:	673b      	str	r3, [r7, #112]	@ 0x70
 800593a:	677a      	str	r2, [r7, #116]	@ 0x74
 800593c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	415b      	adcs	r3, r3
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6039      	str	r1, [r7, #0]
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005982:	464b      	mov	r3, r9
 8005984:	460a      	mov	r2, r1
 8005986:	eb42 0303 	adc.w	r3, r2, r3
 800598a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	663b      	str	r3, [r7, #96]	@ 0x60
 8005996:	667a      	str	r2, [r7, #100]	@ 0x64
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059a4:	4649      	mov	r1, r9
 80059a6:	008b      	lsls	r3, r1, #2
 80059a8:	4641      	mov	r1, r8
 80059aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ae:	4641      	mov	r1, r8
 80059b0:	008a      	lsls	r2, r1, #2
 80059b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059b6:	f7fb f8f7 	bl	8000ba8 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <UART_SetConfig+0x4e4>)
 80059c0:	fba3 1302 	umull	r1, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2164      	movs	r1, #100	@ 0x64
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	3332      	adds	r3, #50	@ 0x32
 80059d2:	4a08      	ldr	r2, [pc, #32]	@ (80059f4 <UART_SetConfig+0x4e4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 020f 	and.w	r2, r3, #15
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4422      	add	r2, r4
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ee:	46bd      	mov	sp, r7
 80059f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f4:	51eb851f 	.word	0x51eb851f

080059f8 <__cvt>:
 80059f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	ec57 6b10 	vmov	r6, r7, d0
 8005a00:	2f00      	cmp	r7, #0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4619      	mov	r1, r3
 8005a06:	463b      	mov	r3, r7
 8005a08:	bfbb      	ittet	lt
 8005a0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a0e:	461f      	movlt	r7, r3
 8005a10:	2300      	movge	r3, #0
 8005a12:	232d      	movlt	r3, #45	@ 0x2d
 8005a14:	700b      	strb	r3, [r1, #0]
 8005a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a1c:	4691      	mov	r9, r2
 8005a1e:	f023 0820 	bic.w	r8, r3, #32
 8005a22:	bfbc      	itt	lt
 8005a24:	4632      	movlt	r2, r6
 8005a26:	4616      	movlt	r6, r2
 8005a28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a2c:	d005      	beq.n	8005a3a <__cvt+0x42>
 8005a2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a32:	d100      	bne.n	8005a36 <__cvt+0x3e>
 8005a34:	3401      	adds	r4, #1
 8005a36:	2102      	movs	r1, #2
 8005a38:	e000      	b.n	8005a3c <__cvt+0x44>
 8005a3a:	2103      	movs	r1, #3
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	ab02      	add	r3, sp, #8
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	ec47 6b10 	vmov	d0, r6, r7
 8005a48:	4653      	mov	r3, sl
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	f000 fe70 	bl	8006730 <_dtoa_r>
 8005a50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a54:	4605      	mov	r5, r0
 8005a56:	d119      	bne.n	8005a8c <__cvt+0x94>
 8005a58:	f019 0f01 	tst.w	r9, #1
 8005a5c:	d00e      	beq.n	8005a7c <__cvt+0x84>
 8005a5e:	eb00 0904 	add.w	r9, r0, r4
 8005a62:	2200      	movs	r2, #0
 8005a64:	2300      	movs	r3, #0
 8005a66:	4630      	mov	r0, r6
 8005a68:	4639      	mov	r1, r7
 8005a6a:	f7fb f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a6e:	b108      	cbz	r0, 8005a74 <__cvt+0x7c>
 8005a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a74:	2230      	movs	r2, #48	@ 0x30
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	454b      	cmp	r3, r9
 8005a7a:	d31e      	bcc.n	8005aba <__cvt+0xc2>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a80:	1b5b      	subs	r3, r3, r5
 8005a82:	4628      	mov	r0, r5
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	b004      	add	sp, #16
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a90:	eb00 0904 	add.w	r9, r0, r4
 8005a94:	d1e5      	bne.n	8005a62 <__cvt+0x6a>
 8005a96:	7803      	ldrb	r3, [r0, #0]
 8005a98:	2b30      	cmp	r3, #48	@ 0x30
 8005a9a:	d10a      	bne.n	8005ab2 <__cvt+0xba>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fb f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aa8:	b918      	cbnz	r0, 8005ab2 <__cvt+0xba>
 8005aaa:	f1c4 0401 	rsb	r4, r4, #1
 8005aae:	f8ca 4000 	str.w	r4, [sl]
 8005ab2:	f8da 3000 	ldr.w	r3, [sl]
 8005ab6:	4499      	add	r9, r3
 8005ab8:	e7d3      	b.n	8005a62 <__cvt+0x6a>
 8005aba:	1c59      	adds	r1, r3, #1
 8005abc:	9103      	str	r1, [sp, #12]
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	e7d9      	b.n	8005a76 <__cvt+0x7e>

08005ac2 <__exponent>:
 8005ac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	bfba      	itte	lt
 8005ac8:	4249      	neglt	r1, r1
 8005aca:	232d      	movlt	r3, #45	@ 0x2d
 8005acc:	232b      	movge	r3, #43	@ 0x2b
 8005ace:	2909      	cmp	r1, #9
 8005ad0:	7002      	strb	r2, [r0, #0]
 8005ad2:	7043      	strb	r3, [r0, #1]
 8005ad4:	dd29      	ble.n	8005b2a <__exponent+0x68>
 8005ad6:	f10d 0307 	add.w	r3, sp, #7
 8005ada:	461d      	mov	r5, r3
 8005adc:	270a      	movs	r7, #10
 8005ade:	461a      	mov	r2, r3
 8005ae0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ae4:	fb07 1416 	mls	r4, r7, r6, r1
 8005ae8:	3430      	adds	r4, #48	@ 0x30
 8005aea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005aee:	460c      	mov	r4, r1
 8005af0:	2c63      	cmp	r4, #99	@ 0x63
 8005af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005af6:	4631      	mov	r1, r6
 8005af8:	dcf1      	bgt.n	8005ade <__exponent+0x1c>
 8005afa:	3130      	adds	r1, #48	@ 0x30
 8005afc:	1e94      	subs	r4, r2, #2
 8005afe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b02:	1c41      	adds	r1, r0, #1
 8005b04:	4623      	mov	r3, r4
 8005b06:	42ab      	cmp	r3, r5
 8005b08:	d30a      	bcc.n	8005b20 <__exponent+0x5e>
 8005b0a:	f10d 0309 	add.w	r3, sp, #9
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	42ac      	cmp	r4, r5
 8005b12:	bf88      	it	hi
 8005b14:	2300      	movhi	r3, #0
 8005b16:	3302      	adds	r3, #2
 8005b18:	4403      	add	r3, r0
 8005b1a:	1a18      	subs	r0, r3, r0
 8005b1c:	b003      	add	sp, #12
 8005b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b28:	e7ed      	b.n	8005b06 <__exponent+0x44>
 8005b2a:	2330      	movs	r3, #48	@ 0x30
 8005b2c:	3130      	adds	r1, #48	@ 0x30
 8005b2e:	7083      	strb	r3, [r0, #2]
 8005b30:	70c1      	strb	r1, [r0, #3]
 8005b32:	1d03      	adds	r3, r0, #4
 8005b34:	e7f1      	b.n	8005b1a <__exponent+0x58>
	...

08005b38 <_printf_float>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	b08d      	sub	sp, #52	@ 0x34
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b44:	4616      	mov	r6, r2
 8005b46:	461f      	mov	r7, r3
 8005b48:	4605      	mov	r5, r0
 8005b4a:	f000 fcef 	bl	800652c <_localeconv_r>
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fa fb8c 	bl	8000270 <strlen>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b60:	9005      	str	r0, [sp, #20]
 8005b62:	3307      	adds	r3, #7
 8005b64:	f023 0307 	bic.w	r3, r3, #7
 8005b68:	f103 0208 	add.w	r2, r3, #8
 8005b6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b70:	f8d4 b000 	ldr.w	fp, [r4]
 8005b74:	f8c8 2000 	str.w	r2, [r8]
 8005b78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b80:	9307      	str	r3, [sp, #28]
 8005b82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8005e00 <_printf_float+0x2c8>)
 8005b90:	f04f 32ff 	mov.w	r2, #4294967295
 8005b94:	f7fa ffca 	bl	8000b2c <__aeabi_dcmpun>
 8005b98:	bb70      	cbnz	r0, 8005bf8 <_printf_float+0xc0>
 8005b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b9e:	4b98      	ldr	r3, [pc, #608]	@ (8005e00 <_printf_float+0x2c8>)
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba4:	f7fa ffa4 	bl	8000af0 <__aeabi_dcmple>
 8005ba8:	bb30      	cbnz	r0, 8005bf8 <_printf_float+0xc0>
 8005baa:	2200      	movs	r2, #0
 8005bac:	2300      	movs	r3, #0
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	f7fa ff93 	bl	8000adc <__aeabi_dcmplt>
 8005bb6:	b110      	cbz	r0, 8005bbe <_printf_float+0x86>
 8005bb8:	232d      	movs	r3, #45	@ 0x2d
 8005bba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bbe:	4a91      	ldr	r2, [pc, #580]	@ (8005e04 <_printf_float+0x2cc>)
 8005bc0:	4b91      	ldr	r3, [pc, #580]	@ (8005e08 <_printf_float+0x2d0>)
 8005bc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bc6:	bf8c      	ite	hi
 8005bc8:	4690      	movhi	r8, r2
 8005bca:	4698      	movls	r8, r3
 8005bcc:	2303      	movs	r3, #3
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	f02b 0304 	bic.w	r3, fp, #4
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	f04f 0900 	mov.w	r9, #0
 8005bda:	9700      	str	r7, [sp, #0]
 8005bdc:	4633      	mov	r3, r6
 8005bde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f9d2 	bl	8005f8c <_printf_common>
 8005be8:	3001      	adds	r0, #1
 8005bea:	f040 808d 	bne.w	8005d08 <_printf_float+0x1d0>
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf2:	b00d      	add	sp, #52	@ 0x34
 8005bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4649      	mov	r1, r9
 8005c00:	f7fa ff94 	bl	8000b2c <__aeabi_dcmpun>
 8005c04:	b140      	cbz	r0, 8005c18 <_printf_float+0xe0>
 8005c06:	464b      	mov	r3, r9
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bfbc      	itt	lt
 8005c0c:	232d      	movlt	r3, #45	@ 0x2d
 8005c0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c12:	4a7e      	ldr	r2, [pc, #504]	@ (8005e0c <_printf_float+0x2d4>)
 8005c14:	4b7e      	ldr	r3, [pc, #504]	@ (8005e10 <_printf_float+0x2d8>)
 8005c16:	e7d4      	b.n	8005bc2 <_printf_float+0x8a>
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c1e:	9206      	str	r2, [sp, #24]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	d13b      	bne.n	8005c9c <_printf_float+0x164>
 8005c24:	2306      	movs	r3, #6
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6022      	str	r2, [r4, #0]
 8005c30:	9303      	str	r3, [sp, #12]
 8005c32:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c38:	ab09      	add	r3, sp, #36	@ 0x24
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	6861      	ldr	r1, [r4, #4]
 8005c3e:	ec49 8b10 	vmov	d0, r8, r9
 8005c42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c46:	4628      	mov	r0, r5
 8005c48:	f7ff fed6 	bl	80059f8 <__cvt>
 8005c4c:	9b06      	ldr	r3, [sp, #24]
 8005c4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c50:	2b47      	cmp	r3, #71	@ 0x47
 8005c52:	4680      	mov	r8, r0
 8005c54:	d129      	bne.n	8005caa <_printf_float+0x172>
 8005c56:	1cc8      	adds	r0, r1, #3
 8005c58:	db02      	blt.n	8005c60 <_printf_float+0x128>
 8005c5a:	6863      	ldr	r3, [r4, #4]
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	dd41      	ble.n	8005ce4 <_printf_float+0x1ac>
 8005c60:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c64:	fa5f fa8a 	uxtb.w	sl, sl
 8005c68:	3901      	subs	r1, #1
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c70:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c72:	f7ff ff26 	bl	8005ac2 <__exponent>
 8005c76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c78:	1813      	adds	r3, r2, r0
 8005c7a:	2a01      	cmp	r2, #1
 8005c7c:	4681      	mov	r9, r0
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	dc02      	bgt.n	8005c88 <_printf_float+0x150>
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	07d2      	lsls	r2, r2, #31
 8005c86:	d501      	bpl.n	8005c8c <_printf_float+0x154>
 8005c88:	3301      	adds	r3, #1
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0a2      	beq.n	8005bda <_printf_float+0xa2>
 8005c94:	232d      	movs	r3, #45	@ 0x2d
 8005c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c9a:	e79e      	b.n	8005bda <_printf_float+0xa2>
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	2a47      	cmp	r2, #71	@ 0x47
 8005ca0:	d1c2      	bne.n	8005c28 <_printf_float+0xf0>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1c0      	bne.n	8005c28 <_printf_float+0xf0>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e7bd      	b.n	8005c26 <_printf_float+0xee>
 8005caa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cae:	d9db      	bls.n	8005c68 <_printf_float+0x130>
 8005cb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cb4:	d118      	bne.n	8005ce8 <_printf_float+0x1b0>
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	dd0b      	ble.n	8005cd4 <_printf_float+0x19c>
 8005cbc:	6121      	str	r1, [r4, #16]
 8005cbe:	b913      	cbnz	r3, 8005cc6 <_printf_float+0x18e>
 8005cc0:	6822      	ldr	r2, [r4, #0]
 8005cc2:	07d0      	lsls	r0, r2, #31
 8005cc4:	d502      	bpl.n	8005ccc <_printf_float+0x194>
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	440b      	add	r3, r1
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cce:	f04f 0900 	mov.w	r9, #0
 8005cd2:	e7db      	b.n	8005c8c <_printf_float+0x154>
 8005cd4:	b913      	cbnz	r3, 8005cdc <_printf_float+0x1a4>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	07d2      	lsls	r2, r2, #31
 8005cda:	d501      	bpl.n	8005ce0 <_printf_float+0x1a8>
 8005cdc:	3302      	adds	r3, #2
 8005cde:	e7f4      	b.n	8005cca <_printf_float+0x192>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e7f2      	b.n	8005cca <_printf_float+0x192>
 8005ce4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cea:	4299      	cmp	r1, r3
 8005cec:	db05      	blt.n	8005cfa <_printf_float+0x1c2>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	6121      	str	r1, [r4, #16]
 8005cf2:	07d8      	lsls	r0, r3, #31
 8005cf4:	d5ea      	bpl.n	8005ccc <_printf_float+0x194>
 8005cf6:	1c4b      	adds	r3, r1, #1
 8005cf8:	e7e7      	b.n	8005cca <_printf_float+0x192>
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	bfd4      	ite	le
 8005cfe:	f1c1 0202 	rsble	r2, r1, #2
 8005d02:	2201      	movgt	r2, #1
 8005d04:	4413      	add	r3, r2
 8005d06:	e7e0      	b.n	8005cca <_printf_float+0x192>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	055a      	lsls	r2, r3, #21
 8005d0c:	d407      	bmi.n	8005d1e <_printf_float+0x1e6>
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	4642      	mov	r2, r8
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d12b      	bne.n	8005d74 <_printf_float+0x23c>
 8005d1c:	e767      	b.n	8005bee <_printf_float+0xb6>
 8005d1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d22:	f240 80dd 	bls.w	8005ee0 <_printf_float+0x3a8>
 8005d26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f7fa fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d033      	beq.n	8005d9e <_printf_float+0x266>
 8005d36:	4a37      	ldr	r2, [pc, #220]	@ (8005e14 <_printf_float+0x2dc>)
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f af54 	beq.w	8005bee <_printf_float+0xb6>
 8005d46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d4a:	4543      	cmp	r3, r8
 8005d4c:	db02      	blt.n	8005d54 <_printf_float+0x21c>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	07d8      	lsls	r0, r3, #31
 8005d52:	d50f      	bpl.n	8005d74 <_printf_float+0x23c>
 8005d54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f43f af45 	beq.w	8005bee <_printf_float+0xb6>
 8005d64:	f04f 0900 	mov.w	r9, #0
 8005d68:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d6c:	f104 0a1a 	add.w	sl, r4, #26
 8005d70:	45c8      	cmp	r8, r9
 8005d72:	dc09      	bgt.n	8005d88 <_printf_float+0x250>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	079b      	lsls	r3, r3, #30
 8005d78:	f100 8103 	bmi.w	8005f82 <_printf_float+0x44a>
 8005d7c:	68e0      	ldr	r0, [r4, #12]
 8005d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d80:	4298      	cmp	r0, r3
 8005d82:	bfb8      	it	lt
 8005d84:	4618      	movlt	r0, r3
 8005d86:	e734      	b.n	8005bf2 <_printf_float+0xba>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4652      	mov	r2, sl
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b8      	blx	r7
 8005d92:	3001      	adds	r0, #1
 8005d94:	f43f af2b 	beq.w	8005bee <_printf_float+0xb6>
 8005d98:	f109 0901 	add.w	r9, r9, #1
 8005d9c:	e7e8      	b.n	8005d70 <_printf_float+0x238>
 8005d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dc39      	bgt.n	8005e18 <_printf_float+0x2e0>
 8005da4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e14 <_printf_float+0x2dc>)
 8005da6:	2301      	movs	r3, #1
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f af1d 	beq.w	8005bee <_printf_float+0xb6>
 8005db4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005db8:	ea59 0303 	orrs.w	r3, r9, r3
 8005dbc:	d102      	bne.n	8005dc4 <_printf_float+0x28c>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	07d9      	lsls	r1, r3, #31
 8005dc2:	d5d7      	bpl.n	8005d74 <_printf_float+0x23c>
 8005dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f af0d 	beq.w	8005bee <_printf_float+0xb6>
 8005dd4:	f04f 0a00 	mov.w	sl, #0
 8005dd8:	f104 0b1a 	add.w	fp, r4, #26
 8005ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dde:	425b      	negs	r3, r3
 8005de0:	4553      	cmp	r3, sl
 8005de2:	dc01      	bgt.n	8005de8 <_printf_float+0x2b0>
 8005de4:	464b      	mov	r3, r9
 8005de6:	e793      	b.n	8005d10 <_printf_float+0x1d8>
 8005de8:	2301      	movs	r3, #1
 8005dea:	465a      	mov	r2, fp
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f aefb 	beq.w	8005bee <_printf_float+0xb6>
 8005df8:	f10a 0a01 	add.w	sl, sl, #1
 8005dfc:	e7ee      	b.n	8005ddc <_printf_float+0x2a4>
 8005dfe:	bf00      	nop
 8005e00:	7fefffff 	.word	0x7fefffff
 8005e04:	080088ac 	.word	0x080088ac
 8005e08:	080088a8 	.word	0x080088a8
 8005e0c:	080088b4 	.word	0x080088b4
 8005e10:	080088b0 	.word	0x080088b0
 8005e14:	080088b8 	.word	0x080088b8
 8005e18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e1e:	4553      	cmp	r3, sl
 8005e20:	bfa8      	it	ge
 8005e22:	4653      	movge	r3, sl
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	4699      	mov	r9, r3
 8005e28:	dc36      	bgt.n	8005e98 <_printf_float+0x360>
 8005e2a:	f04f 0b00 	mov.w	fp, #0
 8005e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e32:	f104 021a 	add.w	r2, r4, #26
 8005e36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e38:	9306      	str	r3, [sp, #24]
 8005e3a:	eba3 0309 	sub.w	r3, r3, r9
 8005e3e:	455b      	cmp	r3, fp
 8005e40:	dc31      	bgt.n	8005ea6 <_printf_float+0x36e>
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	459a      	cmp	sl, r3
 8005e46:	dc3a      	bgt.n	8005ebe <_printf_float+0x386>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07da      	lsls	r2, r3, #31
 8005e4c:	d437      	bmi.n	8005ebe <_printf_float+0x386>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e50:	ebaa 0903 	sub.w	r9, sl, r3
 8005e54:	9b06      	ldr	r3, [sp, #24]
 8005e56:	ebaa 0303 	sub.w	r3, sl, r3
 8005e5a:	4599      	cmp	r9, r3
 8005e5c:	bfa8      	it	ge
 8005e5e:	4699      	movge	r9, r3
 8005e60:	f1b9 0f00 	cmp.w	r9, #0
 8005e64:	dc33      	bgt.n	8005ece <_printf_float+0x396>
 8005e66:	f04f 0800 	mov.w	r8, #0
 8005e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e6e:	f104 0b1a 	add.w	fp, r4, #26
 8005e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e74:	ebaa 0303 	sub.w	r3, sl, r3
 8005e78:	eba3 0309 	sub.w	r3, r3, r9
 8005e7c:	4543      	cmp	r3, r8
 8005e7e:	f77f af79 	ble.w	8005d74 <_printf_float+0x23c>
 8005e82:	2301      	movs	r3, #1
 8005e84:	465a      	mov	r2, fp
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f aeae 	beq.w	8005bee <_printf_float+0xb6>
 8005e92:	f108 0801 	add.w	r8, r8, #1
 8005e96:	e7ec      	b.n	8005e72 <_printf_float+0x33a>
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d1c2      	bne.n	8005e2a <_printf_float+0x2f2>
 8005ea4:	e6a3      	b.n	8005bee <_printf_float+0xb6>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4628      	mov	r0, r5
 8005eac:	9206      	str	r2, [sp, #24]
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f ae9c 	beq.w	8005bee <_printf_float+0xb6>
 8005eb6:	9a06      	ldr	r2, [sp, #24]
 8005eb8:	f10b 0b01 	add.w	fp, fp, #1
 8005ebc:	e7bb      	b.n	8005e36 <_printf_float+0x2fe>
 8005ebe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d1c0      	bne.n	8005e4e <_printf_float+0x316>
 8005ecc:	e68f      	b.n	8005bee <_printf_float+0xb6>
 8005ece:	9a06      	ldr	r2, [sp, #24]
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	4442      	add	r2, r8
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	d1c3      	bne.n	8005e66 <_printf_float+0x32e>
 8005ede:	e686      	b.n	8005bee <_printf_float+0xb6>
 8005ee0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ee4:	f1ba 0f01 	cmp.w	sl, #1
 8005ee8:	dc01      	bgt.n	8005eee <_printf_float+0x3b6>
 8005eea:	07db      	lsls	r3, r3, #31
 8005eec:	d536      	bpl.n	8005f5c <_printf_float+0x424>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f ae78 	beq.w	8005bee <_printf_float+0xb6>
 8005efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f ae70 	beq.w	8005bee <_printf_float+0xb6>
 8005f0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f12:	2200      	movs	r2, #0
 8005f14:	2300      	movs	r3, #0
 8005f16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f1a:	f7fa fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f1e:	b9c0      	cbnz	r0, 8005f52 <_printf_float+0x41a>
 8005f20:	4653      	mov	r3, sl
 8005f22:	f108 0201 	add.w	r2, r8, #1
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d10c      	bne.n	8005f4a <_printf_float+0x412>
 8005f30:	e65d      	b.n	8005bee <_printf_float+0xb6>
 8005f32:	2301      	movs	r3, #1
 8005f34:	465a      	mov	r2, fp
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f ae56 	beq.w	8005bee <_printf_float+0xb6>
 8005f42:	f108 0801 	add.w	r8, r8, #1
 8005f46:	45d0      	cmp	r8, sl
 8005f48:	dbf3      	blt.n	8005f32 <_printf_float+0x3fa>
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f50:	e6df      	b.n	8005d12 <_printf_float+0x1da>
 8005f52:	f04f 0800 	mov.w	r8, #0
 8005f56:	f104 0b1a 	add.w	fp, r4, #26
 8005f5a:	e7f4      	b.n	8005f46 <_printf_float+0x40e>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4642      	mov	r2, r8
 8005f60:	e7e1      	b.n	8005f26 <_printf_float+0x3ee>
 8005f62:	2301      	movs	r3, #1
 8005f64:	464a      	mov	r2, r9
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	f43f ae3e 	beq.w	8005bee <_printf_float+0xb6>
 8005f72:	f108 0801 	add.w	r8, r8, #1
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f7a:	1a5b      	subs	r3, r3, r1
 8005f7c:	4543      	cmp	r3, r8
 8005f7e:	dcf0      	bgt.n	8005f62 <_printf_float+0x42a>
 8005f80:	e6fc      	b.n	8005d7c <_printf_float+0x244>
 8005f82:	f04f 0800 	mov.w	r8, #0
 8005f86:	f104 0919 	add.w	r9, r4, #25
 8005f8a:	e7f4      	b.n	8005f76 <_printf_float+0x43e>

08005f8c <_printf_common>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	4616      	mov	r6, r2
 8005f92:	4698      	mov	r8, r3
 8005f94:	688a      	ldr	r2, [r1, #8]
 8005f96:	690b      	ldr	r3, [r1, #16]
 8005f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bfb8      	it	lt
 8005fa0:	4613      	movlt	r3, r2
 8005fa2:	6033      	str	r3, [r6, #0]
 8005fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fa8:	4607      	mov	r7, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b10a      	cbz	r2, 8005fb2 <_printf_common+0x26>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0699      	lsls	r1, r3, #26
 8005fb6:	bf42      	ittt	mi
 8005fb8:	6833      	ldrmi	r3, [r6, #0]
 8005fba:	3302      	addmi	r3, #2
 8005fbc:	6033      	strmi	r3, [r6, #0]
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	f015 0506 	ands.w	r5, r5, #6
 8005fc4:	d106      	bne.n	8005fd4 <_printf_common+0x48>
 8005fc6:	f104 0a19 	add.w	sl, r4, #25
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	6832      	ldr	r2, [r6, #0]
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dc26      	bgt.n	8006022 <_printf_common+0x96>
 8005fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fd8:	6822      	ldr	r2, [r4, #0]
 8005fda:	3b00      	subs	r3, #0
 8005fdc:	bf18      	it	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	0692      	lsls	r2, r2, #26
 8005fe2:	d42b      	bmi.n	800603c <_printf_common+0xb0>
 8005fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fe8:	4641      	mov	r1, r8
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c8      	blx	r9
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d01e      	beq.n	8006030 <_printf_common+0xa4>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	f003 0306 	and.w	r3, r3, #6
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	bf02      	ittt	eq
 8005ffe:	68e5      	ldreq	r5, [r4, #12]
 8006000:	6833      	ldreq	r3, [r6, #0]
 8006002:	1aed      	subeq	r5, r5, r3
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	bf0c      	ite	eq
 8006008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800600c:	2500      	movne	r5, #0
 800600e:	4293      	cmp	r3, r2
 8006010:	bfc4      	itt	gt
 8006012:	1a9b      	subgt	r3, r3, r2
 8006014:	18ed      	addgt	r5, r5, r3
 8006016:	2600      	movs	r6, #0
 8006018:	341a      	adds	r4, #26
 800601a:	42b5      	cmp	r5, r6
 800601c:	d11a      	bne.n	8006054 <_printf_common+0xc8>
 800601e:	2000      	movs	r0, #0
 8006020:	e008      	b.n	8006034 <_printf_common+0xa8>
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4641      	mov	r1, r8
 8006028:	4638      	mov	r0, r7
 800602a:	47c8      	blx	r9
 800602c:	3001      	adds	r0, #1
 800602e:	d103      	bne.n	8006038 <_printf_common+0xac>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	3501      	adds	r5, #1
 800603a:	e7c6      	b.n	8005fca <_printf_common+0x3e>
 800603c:	18e1      	adds	r1, r4, r3
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	2030      	movs	r0, #48	@ 0x30
 8006042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006046:	4422      	add	r2, r4
 8006048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800604c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006050:	3302      	adds	r3, #2
 8006052:	e7c7      	b.n	8005fe4 <_printf_common+0x58>
 8006054:	2301      	movs	r3, #1
 8006056:	4622      	mov	r2, r4
 8006058:	4641      	mov	r1, r8
 800605a:	4638      	mov	r0, r7
 800605c:	47c8      	blx	r9
 800605e:	3001      	adds	r0, #1
 8006060:	d0e6      	beq.n	8006030 <_printf_common+0xa4>
 8006062:	3601      	adds	r6, #1
 8006064:	e7d9      	b.n	800601a <_printf_common+0x8e>
	...

08006068 <_printf_i>:
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	7e0f      	ldrb	r7, [r1, #24]
 800606e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006070:	2f78      	cmp	r7, #120	@ 0x78
 8006072:	4691      	mov	r9, r2
 8006074:	4680      	mov	r8, r0
 8006076:	460c      	mov	r4, r1
 8006078:	469a      	mov	sl, r3
 800607a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800607e:	d807      	bhi.n	8006090 <_printf_i+0x28>
 8006080:	2f62      	cmp	r7, #98	@ 0x62
 8006082:	d80a      	bhi.n	800609a <_printf_i+0x32>
 8006084:	2f00      	cmp	r7, #0
 8006086:	f000 80d1 	beq.w	800622c <_printf_i+0x1c4>
 800608a:	2f58      	cmp	r7, #88	@ 0x58
 800608c:	f000 80b8 	beq.w	8006200 <_printf_i+0x198>
 8006090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006098:	e03a      	b.n	8006110 <_printf_i+0xa8>
 800609a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800609e:	2b15      	cmp	r3, #21
 80060a0:	d8f6      	bhi.n	8006090 <_printf_i+0x28>
 80060a2:	a101      	add	r1, pc, #4	@ (adr r1, 80060a8 <_printf_i+0x40>)
 80060a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006091 	.word	0x08006091
 80060b4:	08006091 	.word	0x08006091
 80060b8:	08006091 	.word	0x08006091
 80060bc:	08006091 	.word	0x08006091
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006091 	.word	0x08006091
 80060c8:	08006091 	.word	0x08006091
 80060cc:	08006091 	.word	0x08006091
 80060d0:	08006091 	.word	0x08006091
 80060d4:	08006213 	.word	0x08006213
 80060d8:	0800613f 	.word	0x0800613f
 80060dc:	080061cd 	.word	0x080061cd
 80060e0:	08006091 	.word	0x08006091
 80060e4:	08006091 	.word	0x08006091
 80060e8:	08006235 	.word	0x08006235
 80060ec:	08006091 	.word	0x08006091
 80060f0:	0800613f 	.word	0x0800613f
 80060f4:	08006091 	.word	0x08006091
 80060f8:	08006091 	.word	0x08006091
 80060fc:	080061d5 	.word	0x080061d5
 8006100:	6833      	ldr	r3, [r6, #0]
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6032      	str	r2, [r6, #0]
 8006108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800610c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006110:	2301      	movs	r3, #1
 8006112:	e09c      	b.n	800624e <_printf_i+0x1e6>
 8006114:	6833      	ldr	r3, [r6, #0]
 8006116:	6820      	ldr	r0, [r4, #0]
 8006118:	1d19      	adds	r1, r3, #4
 800611a:	6031      	str	r1, [r6, #0]
 800611c:	0606      	lsls	r6, r0, #24
 800611e:	d501      	bpl.n	8006124 <_printf_i+0xbc>
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	e003      	b.n	800612c <_printf_i+0xc4>
 8006124:	0645      	lsls	r5, r0, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0xb8>
 8006128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800612c:	2d00      	cmp	r5, #0
 800612e:	da03      	bge.n	8006138 <_printf_i+0xd0>
 8006130:	232d      	movs	r3, #45	@ 0x2d
 8006132:	426d      	negs	r5, r5
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006138:	4858      	ldr	r0, [pc, #352]	@ (800629c <_printf_i+0x234>)
 800613a:	230a      	movs	r3, #10
 800613c:	e011      	b.n	8006162 <_printf_i+0xfa>
 800613e:	6821      	ldr	r1, [r4, #0]
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	0608      	lsls	r0, r1, #24
 8006144:	f853 5b04 	ldr.w	r5, [r3], #4
 8006148:	d402      	bmi.n	8006150 <_printf_i+0xe8>
 800614a:	0649      	lsls	r1, r1, #25
 800614c:	bf48      	it	mi
 800614e:	b2ad      	uxthmi	r5, r5
 8006150:	2f6f      	cmp	r7, #111	@ 0x6f
 8006152:	4852      	ldr	r0, [pc, #328]	@ (800629c <_printf_i+0x234>)
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	bf14      	ite	ne
 8006158:	230a      	movne	r3, #10
 800615a:	2308      	moveq	r3, #8
 800615c:	2100      	movs	r1, #0
 800615e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006162:	6866      	ldr	r6, [r4, #4]
 8006164:	60a6      	str	r6, [r4, #8]
 8006166:	2e00      	cmp	r6, #0
 8006168:	db05      	blt.n	8006176 <_printf_i+0x10e>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	432e      	orrs	r6, r5
 800616e:	f021 0104 	bic.w	r1, r1, #4
 8006172:	6021      	str	r1, [r4, #0]
 8006174:	d04b      	beq.n	800620e <_printf_i+0x1a6>
 8006176:	4616      	mov	r6, r2
 8006178:	fbb5 f1f3 	udiv	r1, r5, r3
 800617c:	fb03 5711 	mls	r7, r3, r1, r5
 8006180:	5dc7      	ldrb	r7, [r0, r7]
 8006182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006186:	462f      	mov	r7, r5
 8006188:	42bb      	cmp	r3, r7
 800618a:	460d      	mov	r5, r1
 800618c:	d9f4      	bls.n	8006178 <_printf_i+0x110>
 800618e:	2b08      	cmp	r3, #8
 8006190:	d10b      	bne.n	80061aa <_printf_i+0x142>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	07df      	lsls	r7, r3, #31
 8006196:	d508      	bpl.n	80061aa <_printf_i+0x142>
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	6861      	ldr	r1, [r4, #4]
 800619c:	4299      	cmp	r1, r3
 800619e:	bfde      	ittt	le
 80061a0:	2330      	movle	r3, #48	@ 0x30
 80061a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061aa:	1b92      	subs	r2, r2, r6
 80061ac:	6122      	str	r2, [r4, #16]
 80061ae:	f8cd a000 	str.w	sl, [sp]
 80061b2:	464b      	mov	r3, r9
 80061b4:	aa03      	add	r2, sp, #12
 80061b6:	4621      	mov	r1, r4
 80061b8:	4640      	mov	r0, r8
 80061ba:	f7ff fee7 	bl	8005f8c <_printf_common>
 80061be:	3001      	adds	r0, #1
 80061c0:	d14a      	bne.n	8006258 <_printf_i+0x1f0>
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	b004      	add	sp, #16
 80061c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	f043 0320 	orr.w	r3, r3, #32
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	4832      	ldr	r0, [pc, #200]	@ (80062a0 <_printf_i+0x238>)
 80061d6:	2778      	movs	r7, #120	@ 0x78
 80061d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	6831      	ldr	r1, [r6, #0]
 80061e0:	061f      	lsls	r7, r3, #24
 80061e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80061e6:	d402      	bmi.n	80061ee <_printf_i+0x186>
 80061e8:	065f      	lsls	r7, r3, #25
 80061ea:	bf48      	it	mi
 80061ec:	b2ad      	uxthmi	r5, r5
 80061ee:	6031      	str	r1, [r6, #0]
 80061f0:	07d9      	lsls	r1, r3, #31
 80061f2:	bf44      	itt	mi
 80061f4:	f043 0320 	orrmi.w	r3, r3, #32
 80061f8:	6023      	strmi	r3, [r4, #0]
 80061fa:	b11d      	cbz	r5, 8006204 <_printf_i+0x19c>
 80061fc:	2310      	movs	r3, #16
 80061fe:	e7ad      	b.n	800615c <_printf_i+0xf4>
 8006200:	4826      	ldr	r0, [pc, #152]	@ (800629c <_printf_i+0x234>)
 8006202:	e7e9      	b.n	80061d8 <_printf_i+0x170>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	6023      	str	r3, [r4, #0]
 800620c:	e7f6      	b.n	80061fc <_printf_i+0x194>
 800620e:	4616      	mov	r6, r2
 8006210:	e7bd      	b.n	800618e <_printf_i+0x126>
 8006212:	6833      	ldr	r3, [r6, #0]
 8006214:	6825      	ldr	r5, [r4, #0]
 8006216:	6961      	ldr	r1, [r4, #20]
 8006218:	1d18      	adds	r0, r3, #4
 800621a:	6030      	str	r0, [r6, #0]
 800621c:	062e      	lsls	r6, r5, #24
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	d501      	bpl.n	8006226 <_printf_i+0x1be>
 8006222:	6019      	str	r1, [r3, #0]
 8006224:	e002      	b.n	800622c <_printf_i+0x1c4>
 8006226:	0668      	lsls	r0, r5, #25
 8006228:	d5fb      	bpl.n	8006222 <_printf_i+0x1ba>
 800622a:	8019      	strh	r1, [r3, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	4616      	mov	r6, r2
 8006232:	e7bc      	b.n	80061ae <_printf_i+0x146>
 8006234:	6833      	ldr	r3, [r6, #0]
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	6032      	str	r2, [r6, #0]
 800623a:	681e      	ldr	r6, [r3, #0]
 800623c:	6862      	ldr	r2, [r4, #4]
 800623e:	2100      	movs	r1, #0
 8006240:	4630      	mov	r0, r6
 8006242:	f7f9 ffc5 	bl	80001d0 <memchr>
 8006246:	b108      	cbz	r0, 800624c <_printf_i+0x1e4>
 8006248:	1b80      	subs	r0, r0, r6
 800624a:	6060      	str	r0, [r4, #4]
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	2300      	movs	r3, #0
 8006252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006256:	e7aa      	b.n	80061ae <_printf_i+0x146>
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	4632      	mov	r2, r6
 800625c:	4649      	mov	r1, r9
 800625e:	4640      	mov	r0, r8
 8006260:	47d0      	blx	sl
 8006262:	3001      	adds	r0, #1
 8006264:	d0ad      	beq.n	80061c2 <_printf_i+0x15a>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	079b      	lsls	r3, r3, #30
 800626a:	d413      	bmi.n	8006294 <_printf_i+0x22c>
 800626c:	68e0      	ldr	r0, [r4, #12]
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	4298      	cmp	r0, r3
 8006272:	bfb8      	it	lt
 8006274:	4618      	movlt	r0, r3
 8006276:	e7a6      	b.n	80061c6 <_printf_i+0x15e>
 8006278:	2301      	movs	r3, #1
 800627a:	4632      	mov	r2, r6
 800627c:	4649      	mov	r1, r9
 800627e:	4640      	mov	r0, r8
 8006280:	47d0      	blx	sl
 8006282:	3001      	adds	r0, #1
 8006284:	d09d      	beq.n	80061c2 <_printf_i+0x15a>
 8006286:	3501      	adds	r5, #1
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	1a5b      	subs	r3, r3, r1
 800628e:	42ab      	cmp	r3, r5
 8006290:	dcf2      	bgt.n	8006278 <_printf_i+0x210>
 8006292:	e7eb      	b.n	800626c <_printf_i+0x204>
 8006294:	2500      	movs	r5, #0
 8006296:	f104 0619 	add.w	r6, r4, #25
 800629a:	e7f5      	b.n	8006288 <_printf_i+0x220>
 800629c:	080088ba 	.word	0x080088ba
 80062a0:	080088cb 	.word	0x080088cb

080062a4 <std>:
 80062a4:	2300      	movs	r3, #0
 80062a6:	b510      	push	{r4, lr}
 80062a8:	4604      	mov	r4, r0
 80062aa:	e9c0 3300 	strd	r3, r3, [r0]
 80062ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062b2:	6083      	str	r3, [r0, #8]
 80062b4:	8181      	strh	r1, [r0, #12]
 80062b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80062b8:	81c2      	strh	r2, [r0, #14]
 80062ba:	6183      	str	r3, [r0, #24]
 80062bc:	4619      	mov	r1, r3
 80062be:	2208      	movs	r2, #8
 80062c0:	305c      	adds	r0, #92	@ 0x5c
 80062c2:	f000 f92a 	bl	800651a <memset>
 80062c6:	4b0d      	ldr	r3, [pc, #52]	@ (80062fc <std+0x58>)
 80062c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <std+0x5c>)
 80062cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <std+0x60>)
 80062d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <std+0x64>)
 80062d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <std+0x68>)
 80062d8:	6224      	str	r4, [r4, #32]
 80062da:	429c      	cmp	r4, r3
 80062dc:	d006      	beq.n	80062ec <std+0x48>
 80062de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062e2:	4294      	cmp	r4, r2
 80062e4:	d002      	beq.n	80062ec <std+0x48>
 80062e6:	33d0      	adds	r3, #208	@ 0xd0
 80062e8:	429c      	cmp	r4, r3
 80062ea:	d105      	bne.n	80062f8 <std+0x54>
 80062ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f4:	f000 b98e 	b.w	8006614 <__retarget_lock_init_recursive>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	bf00      	nop
 80062fc:	08006495 	.word	0x08006495
 8006300:	080064b7 	.word	0x080064b7
 8006304:	080064ef 	.word	0x080064ef
 8006308:	08006513 	.word	0x08006513
 800630c:	20000408 	.word	0x20000408

08006310 <stdio_exit_handler>:
 8006310:	4a02      	ldr	r2, [pc, #8]	@ (800631c <stdio_exit_handler+0xc>)
 8006312:	4903      	ldr	r1, [pc, #12]	@ (8006320 <stdio_exit_handler+0x10>)
 8006314:	4803      	ldr	r0, [pc, #12]	@ (8006324 <stdio_exit_handler+0x14>)
 8006316:	f000 b869 	b.w	80063ec <_fwalk_sglue>
 800631a:	bf00      	nop
 800631c:	2000001c 	.word	0x2000001c
 8006320:	08007f7d 	.word	0x08007f7d
 8006324:	2000002c 	.word	0x2000002c

08006328 <cleanup_stdio>:
 8006328:	6841      	ldr	r1, [r0, #4]
 800632a:	4b0c      	ldr	r3, [pc, #48]	@ (800635c <cleanup_stdio+0x34>)
 800632c:	4299      	cmp	r1, r3
 800632e:	b510      	push	{r4, lr}
 8006330:	4604      	mov	r4, r0
 8006332:	d001      	beq.n	8006338 <cleanup_stdio+0x10>
 8006334:	f001 fe22 	bl	8007f7c <_fflush_r>
 8006338:	68a1      	ldr	r1, [r4, #8]
 800633a:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <cleanup_stdio+0x38>)
 800633c:	4299      	cmp	r1, r3
 800633e:	d002      	beq.n	8006346 <cleanup_stdio+0x1e>
 8006340:	4620      	mov	r0, r4
 8006342:	f001 fe1b 	bl	8007f7c <_fflush_r>
 8006346:	68e1      	ldr	r1, [r4, #12]
 8006348:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <cleanup_stdio+0x3c>)
 800634a:	4299      	cmp	r1, r3
 800634c:	d004      	beq.n	8006358 <cleanup_stdio+0x30>
 800634e:	4620      	mov	r0, r4
 8006350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006354:	f001 be12 	b.w	8007f7c <_fflush_r>
 8006358:	bd10      	pop	{r4, pc}
 800635a:	bf00      	nop
 800635c:	20000408 	.word	0x20000408
 8006360:	20000470 	.word	0x20000470
 8006364:	200004d8 	.word	0x200004d8

08006368 <global_stdio_init.part.0>:
 8006368:	b510      	push	{r4, lr}
 800636a:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <global_stdio_init.part.0+0x30>)
 800636c:	4c0b      	ldr	r4, [pc, #44]	@ (800639c <global_stdio_init.part.0+0x34>)
 800636e:	4a0c      	ldr	r2, [pc, #48]	@ (80063a0 <global_stdio_init.part.0+0x38>)
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	4620      	mov	r0, r4
 8006374:	2200      	movs	r2, #0
 8006376:	2104      	movs	r1, #4
 8006378:	f7ff ff94 	bl	80062a4 <std>
 800637c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006380:	2201      	movs	r2, #1
 8006382:	2109      	movs	r1, #9
 8006384:	f7ff ff8e 	bl	80062a4 <std>
 8006388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800638c:	2202      	movs	r2, #2
 800638e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006392:	2112      	movs	r1, #18
 8006394:	f7ff bf86 	b.w	80062a4 <std>
 8006398:	20000540 	.word	0x20000540
 800639c:	20000408 	.word	0x20000408
 80063a0:	08006311 	.word	0x08006311

080063a4 <__sfp_lock_acquire>:
 80063a4:	4801      	ldr	r0, [pc, #4]	@ (80063ac <__sfp_lock_acquire+0x8>)
 80063a6:	f000 b936 	b.w	8006616 <__retarget_lock_acquire_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000549 	.word	0x20000549

080063b0 <__sfp_lock_release>:
 80063b0:	4801      	ldr	r0, [pc, #4]	@ (80063b8 <__sfp_lock_release+0x8>)
 80063b2:	f000 b931 	b.w	8006618 <__retarget_lock_release_recursive>
 80063b6:	bf00      	nop
 80063b8:	20000549 	.word	0x20000549

080063bc <__sinit>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	4604      	mov	r4, r0
 80063c0:	f7ff fff0 	bl	80063a4 <__sfp_lock_acquire>
 80063c4:	6a23      	ldr	r3, [r4, #32]
 80063c6:	b11b      	cbz	r3, 80063d0 <__sinit+0x14>
 80063c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063cc:	f7ff bff0 	b.w	80063b0 <__sfp_lock_release>
 80063d0:	4b04      	ldr	r3, [pc, #16]	@ (80063e4 <__sinit+0x28>)
 80063d2:	6223      	str	r3, [r4, #32]
 80063d4:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <__sinit+0x2c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f5      	bne.n	80063c8 <__sinit+0xc>
 80063dc:	f7ff ffc4 	bl	8006368 <global_stdio_init.part.0>
 80063e0:	e7f2      	b.n	80063c8 <__sinit+0xc>
 80063e2:	bf00      	nop
 80063e4:	08006329 	.word	0x08006329
 80063e8:	20000540 	.word	0x20000540

080063ec <_fwalk_sglue>:
 80063ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f0:	4607      	mov	r7, r0
 80063f2:	4688      	mov	r8, r1
 80063f4:	4614      	mov	r4, r2
 80063f6:	2600      	movs	r6, #0
 80063f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063fc:	f1b9 0901 	subs.w	r9, r9, #1
 8006400:	d505      	bpl.n	800640e <_fwalk_sglue+0x22>
 8006402:	6824      	ldr	r4, [r4, #0]
 8006404:	2c00      	cmp	r4, #0
 8006406:	d1f7      	bne.n	80063f8 <_fwalk_sglue+0xc>
 8006408:	4630      	mov	r0, r6
 800640a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d907      	bls.n	8006424 <_fwalk_sglue+0x38>
 8006414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006418:	3301      	adds	r3, #1
 800641a:	d003      	beq.n	8006424 <_fwalk_sglue+0x38>
 800641c:	4629      	mov	r1, r5
 800641e:	4638      	mov	r0, r7
 8006420:	47c0      	blx	r8
 8006422:	4306      	orrs	r6, r0
 8006424:	3568      	adds	r5, #104	@ 0x68
 8006426:	e7e9      	b.n	80063fc <_fwalk_sglue+0x10>

08006428 <sniprintf>:
 8006428:	b40c      	push	{r2, r3}
 800642a:	b530      	push	{r4, r5, lr}
 800642c:	4b18      	ldr	r3, [pc, #96]	@ (8006490 <sniprintf+0x68>)
 800642e:	1e0c      	subs	r4, r1, #0
 8006430:	681d      	ldr	r5, [r3, #0]
 8006432:	b09d      	sub	sp, #116	@ 0x74
 8006434:	da08      	bge.n	8006448 <sniprintf+0x20>
 8006436:	238b      	movs	r3, #139	@ 0x8b
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	b01d      	add	sp, #116	@ 0x74
 8006440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006444:	b002      	add	sp, #8
 8006446:	4770      	bx	lr
 8006448:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800644c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006456:	bf14      	ite	ne
 8006458:	f104 33ff 	addne.w	r3, r4, #4294967295
 800645c:	4623      	moveq	r3, r4
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	9307      	str	r3, [sp, #28]
 8006462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006466:	9002      	str	r0, [sp, #8]
 8006468:	9006      	str	r0, [sp, #24]
 800646a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800646e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006470:	ab21      	add	r3, sp, #132	@ 0x84
 8006472:	a902      	add	r1, sp, #8
 8006474:	4628      	mov	r0, r5
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	f001 fc00 	bl	8007c7c <_svfiprintf_r>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	bfbc      	itt	lt
 8006480:	238b      	movlt	r3, #139	@ 0x8b
 8006482:	602b      	strlt	r3, [r5, #0]
 8006484:	2c00      	cmp	r4, #0
 8006486:	d0da      	beq.n	800643e <sniprintf+0x16>
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	e7d6      	b.n	800643e <sniprintf+0x16>
 8006490:	20000028 	.word	0x20000028

08006494 <__sread>:
 8006494:	b510      	push	{r4, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649c:	f000 f86c 	bl	8006578 <_read_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	bfab      	itete	ge
 80064a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064a6:	89a3      	ldrhlt	r3, [r4, #12]
 80064a8:	181b      	addge	r3, r3, r0
 80064aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064ae:	bfac      	ite	ge
 80064b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064b2:	81a3      	strhlt	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__swrite>:
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	461f      	mov	r7, r3
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	05db      	lsls	r3, r3, #23
 80064c0:	4605      	mov	r5, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4616      	mov	r6, r2
 80064c6:	d505      	bpl.n	80064d4 <__swrite+0x1e>
 80064c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064cc:	2302      	movs	r3, #2
 80064ce:	2200      	movs	r2, #0
 80064d0:	f000 f840 	bl	8006554 <_lseek_r>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	4628      	mov	r0, r5
 80064e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	f000 b857 	b.w	800659c <_write_r>

080064ee <__sseek>:
 80064ee:	b510      	push	{r4, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f6:	f000 f82d 	bl	8006554 <_lseek_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	bf15      	itete	ne
 8006500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800650a:	81a3      	strheq	r3, [r4, #12]
 800650c:	bf18      	it	ne
 800650e:	81a3      	strhne	r3, [r4, #12]
 8006510:	bd10      	pop	{r4, pc}

08006512 <__sclose>:
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 b80d 	b.w	8006534 <_close_r>

0800651a <memset>:
 800651a:	4402      	add	r2, r0
 800651c:	4603      	mov	r3, r0
 800651e:	4293      	cmp	r3, r2
 8006520:	d100      	bne.n	8006524 <memset+0xa>
 8006522:	4770      	bx	lr
 8006524:	f803 1b01 	strb.w	r1, [r3], #1
 8006528:	e7f9      	b.n	800651e <memset+0x4>
	...

0800652c <_localeconv_r>:
 800652c:	4800      	ldr	r0, [pc, #0]	@ (8006530 <_localeconv_r+0x4>)
 800652e:	4770      	bx	lr
 8006530:	20000168 	.word	0x20000168

08006534 <_close_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	@ (8006550 <_close_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fb fbfa 	bl	8001d38 <_close>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_close_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_close_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20000544 	.word	0x20000544

08006554 <_lseek_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	@ (8006574 <_lseek_r+0x20>)
 8006558:	4604      	mov	r4, r0
 800655a:	4608      	mov	r0, r1
 800655c:	4611      	mov	r1, r2
 800655e:	2200      	movs	r2, #0
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f7fb fc0f 	bl	8001d86 <_lseek>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_lseek_r+0x1e>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_lseek_r+0x1e>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000544 	.word	0x20000544

08006578 <_read_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d07      	ldr	r5, [pc, #28]	@ (8006598 <_read_r+0x20>)
 800657c:	4604      	mov	r4, r0
 800657e:	4608      	mov	r0, r1
 8006580:	4611      	mov	r1, r2
 8006582:	2200      	movs	r2, #0
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	f7fb fb9d 	bl	8001cc6 <_read>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_read_r+0x1e>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_read_r+0x1e>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20000544 	.word	0x20000544

0800659c <_write_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	@ (80065bc <_write_r+0x20>)
 80065a0:	4604      	mov	r4, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	602a      	str	r2, [r5, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fb fba8 	bl	8001d00 <_write>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_write_r+0x1e>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_write_r+0x1e>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000544 	.word	0x20000544

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	@ (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000028 	.word	0x20000028

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	@ (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	@ (8006610 <__libc_init_array+0x44>)
 80065e0:	f002 f86a 	bl	80086b8 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	08008c24 	.word	0x08008c24
 8006608:	08008c24 	.word	0x08008c24
 800660c:	08008c24 	.word	0x08008c24
 8006610:	08008c28 	.word	0x08008c28

08006614 <__retarget_lock_init_recursive>:
 8006614:	4770      	bx	lr

08006616 <__retarget_lock_acquire_recursive>:
 8006616:	4770      	bx	lr

08006618 <__retarget_lock_release_recursive>:
 8006618:	4770      	bx	lr

0800661a <quorem>:
 800661a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661e:	6903      	ldr	r3, [r0, #16]
 8006620:	690c      	ldr	r4, [r1, #16]
 8006622:	42a3      	cmp	r3, r4
 8006624:	4607      	mov	r7, r0
 8006626:	db7e      	blt.n	8006726 <quorem+0x10c>
 8006628:	3c01      	subs	r4, #1
 800662a:	f101 0814 	add.w	r8, r1, #20
 800662e:	00a3      	lsls	r3, r4, #2
 8006630:	f100 0514 	add.w	r5, r0, #20
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006640:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006644:	3301      	adds	r3, #1
 8006646:	429a      	cmp	r2, r3
 8006648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800664c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006650:	d32e      	bcc.n	80066b0 <quorem+0x96>
 8006652:	f04f 0a00 	mov.w	sl, #0
 8006656:	46c4      	mov	ip, r8
 8006658:	46ae      	mov	lr, r5
 800665a:	46d3      	mov	fp, sl
 800665c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006660:	b298      	uxth	r0, r3
 8006662:	fb06 a000 	mla	r0, r6, r0, sl
 8006666:	0c02      	lsrs	r2, r0, #16
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	fb06 2303 	mla	r3, r6, r3, r2
 800666e:	f8de 2000 	ldr.w	r2, [lr]
 8006672:	b280      	uxth	r0, r0
 8006674:	b292      	uxth	r2, r2
 8006676:	1a12      	subs	r2, r2, r0
 8006678:	445a      	add	r2, fp
 800667a:	f8de 0000 	ldr.w	r0, [lr]
 800667e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006682:	b29b      	uxth	r3, r3
 8006684:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006688:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800668c:	b292      	uxth	r2, r2
 800668e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006692:	45e1      	cmp	r9, ip
 8006694:	f84e 2b04 	str.w	r2, [lr], #4
 8006698:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800669c:	d2de      	bcs.n	800665c <quorem+0x42>
 800669e:	9b00      	ldr	r3, [sp, #0]
 80066a0:	58eb      	ldr	r3, [r5, r3]
 80066a2:	b92b      	cbnz	r3, 80066b0 <quorem+0x96>
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	3b04      	subs	r3, #4
 80066a8:	429d      	cmp	r5, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	d32f      	bcc.n	800670e <quorem+0xf4>
 80066ae:	613c      	str	r4, [r7, #16]
 80066b0:	4638      	mov	r0, r7
 80066b2:	f001 f97f 	bl	80079b4 <__mcmp>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	db25      	blt.n	8006706 <quorem+0xec>
 80066ba:	4629      	mov	r1, r5
 80066bc:	2000      	movs	r0, #0
 80066be:	f858 2b04 	ldr.w	r2, [r8], #4
 80066c2:	f8d1 c000 	ldr.w	ip, [r1]
 80066c6:	fa1f fe82 	uxth.w	lr, r2
 80066ca:	fa1f f38c 	uxth.w	r3, ip
 80066ce:	eba3 030e 	sub.w	r3, r3, lr
 80066d2:	4403      	add	r3, r0
 80066d4:	0c12      	lsrs	r2, r2, #16
 80066d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066de:	b29b      	uxth	r3, r3
 80066e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e4:	45c1      	cmp	r9, r8
 80066e6:	f841 3b04 	str.w	r3, [r1], #4
 80066ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066ee:	d2e6      	bcs.n	80066be <quorem+0xa4>
 80066f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066f8:	b922      	cbnz	r2, 8006704 <quorem+0xea>
 80066fa:	3b04      	subs	r3, #4
 80066fc:	429d      	cmp	r5, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	d30b      	bcc.n	800671a <quorem+0x100>
 8006702:	613c      	str	r4, [r7, #16]
 8006704:	3601      	adds	r6, #1
 8006706:	4630      	mov	r0, r6
 8006708:	b003      	add	sp, #12
 800670a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	3b04      	subs	r3, #4
 8006712:	2a00      	cmp	r2, #0
 8006714:	d1cb      	bne.n	80066ae <quorem+0x94>
 8006716:	3c01      	subs	r4, #1
 8006718:	e7c6      	b.n	80066a8 <quorem+0x8e>
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	3b04      	subs	r3, #4
 800671e:	2a00      	cmp	r2, #0
 8006720:	d1ef      	bne.n	8006702 <quorem+0xe8>
 8006722:	3c01      	subs	r4, #1
 8006724:	e7ea      	b.n	80066fc <quorem+0xe2>
 8006726:	2000      	movs	r0, #0
 8006728:	e7ee      	b.n	8006708 <quorem+0xee>
 800672a:	0000      	movs	r0, r0
 800672c:	0000      	movs	r0, r0
	...

08006730 <_dtoa_r>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	69c7      	ldr	r7, [r0, #28]
 8006736:	b097      	sub	sp, #92	@ 0x5c
 8006738:	ed8d 0b04 	vstr	d0, [sp, #16]
 800673c:	ec55 4b10 	vmov	r4, r5, d0
 8006740:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006742:	9107      	str	r1, [sp, #28]
 8006744:	4681      	mov	r9, r0
 8006746:	920c      	str	r2, [sp, #48]	@ 0x30
 8006748:	9311      	str	r3, [sp, #68]	@ 0x44
 800674a:	b97f      	cbnz	r7, 800676c <_dtoa_r+0x3c>
 800674c:	2010      	movs	r0, #16
 800674e:	f000 fe09 	bl	8007364 <malloc>
 8006752:	4602      	mov	r2, r0
 8006754:	f8c9 001c 	str.w	r0, [r9, #28]
 8006758:	b920      	cbnz	r0, 8006764 <_dtoa_r+0x34>
 800675a:	4ba9      	ldr	r3, [pc, #676]	@ (8006a00 <_dtoa_r+0x2d0>)
 800675c:	21ef      	movs	r1, #239	@ 0xef
 800675e:	48a9      	ldr	r0, [pc, #676]	@ (8006a04 <_dtoa_r+0x2d4>)
 8006760:	f001 fc6c 	bl	800803c <__assert_func>
 8006764:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006768:	6007      	str	r7, [r0, #0]
 800676a:	60c7      	str	r7, [r0, #12]
 800676c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	b159      	cbz	r1, 800678c <_dtoa_r+0x5c>
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	604a      	str	r2, [r1, #4]
 8006778:	2301      	movs	r3, #1
 800677a:	4093      	lsls	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
 800677e:	4648      	mov	r0, r9
 8006780:	f000 fee6 	bl	8007550 <_Bfree>
 8006784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	1e2b      	subs	r3, r5, #0
 800678e:	bfb9      	ittee	lt
 8006790:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006794:	9305      	strlt	r3, [sp, #20]
 8006796:	2300      	movge	r3, #0
 8006798:	6033      	strge	r3, [r6, #0]
 800679a:	9f05      	ldr	r7, [sp, #20]
 800679c:	4b9a      	ldr	r3, [pc, #616]	@ (8006a08 <_dtoa_r+0x2d8>)
 800679e:	bfbc      	itt	lt
 80067a0:	2201      	movlt	r2, #1
 80067a2:	6032      	strlt	r2, [r6, #0]
 80067a4:	43bb      	bics	r3, r7
 80067a6:	d112      	bne.n	80067ce <_dtoa_r+0x9e>
 80067a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80067aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067b4:	4323      	orrs	r3, r4
 80067b6:	f000 855a 	beq.w	800726e <_dtoa_r+0xb3e>
 80067ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006a1c <_dtoa_r+0x2ec>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 855c 	beq.w	800727e <_dtoa_r+0xb4e>
 80067c6:	f10a 0303 	add.w	r3, sl, #3
 80067ca:	f000 bd56 	b.w	800727a <_dtoa_r+0xb4a>
 80067ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80067d2:	2200      	movs	r2, #0
 80067d4:	ec51 0b17 	vmov	r0, r1, d7
 80067d8:	2300      	movs	r3, #0
 80067da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80067de:	f7fa f973 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e2:	4680      	mov	r8, r0
 80067e4:	b158      	cbz	r0, 80067fe <_dtoa_r+0xce>
 80067e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80067e8:	2301      	movs	r3, #1
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067ee:	b113      	cbz	r3, 80067f6 <_dtoa_r+0xc6>
 80067f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80067f2:	4b86      	ldr	r3, [pc, #536]	@ (8006a0c <_dtoa_r+0x2dc>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006a20 <_dtoa_r+0x2f0>
 80067fa:	f000 bd40 	b.w	800727e <_dtoa_r+0xb4e>
 80067fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006802:	aa14      	add	r2, sp, #80	@ 0x50
 8006804:	a915      	add	r1, sp, #84	@ 0x54
 8006806:	4648      	mov	r0, r9
 8006808:	f001 f984 	bl	8007b14 <__d2b>
 800680c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006810:	9002      	str	r0, [sp, #8]
 8006812:	2e00      	cmp	r6, #0
 8006814:	d078      	beq.n	8006908 <_dtoa_r+0x1d8>
 8006816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006818:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800681c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006824:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006828:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800682c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006830:	4619      	mov	r1, r3
 8006832:	2200      	movs	r2, #0
 8006834:	4b76      	ldr	r3, [pc, #472]	@ (8006a10 <_dtoa_r+0x2e0>)
 8006836:	f7f9 fd27 	bl	8000288 <__aeabi_dsub>
 800683a:	a36b      	add	r3, pc, #428	@ (adr r3, 80069e8 <_dtoa_r+0x2b8>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 feda 	bl	80005f8 <__aeabi_dmul>
 8006844:	a36a      	add	r3, pc, #424	@ (adr r3, 80069f0 <_dtoa_r+0x2c0>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fd1f 	bl	800028c <__adddf3>
 800684e:	4604      	mov	r4, r0
 8006850:	4630      	mov	r0, r6
 8006852:	460d      	mov	r5, r1
 8006854:	f7f9 fe66 	bl	8000524 <__aeabi_i2d>
 8006858:	a367      	add	r3, pc, #412	@ (adr r3, 80069f8 <_dtoa_r+0x2c8>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fd0f 	bl	800028c <__adddf3>
 800686e:	4604      	mov	r4, r0
 8006870:	460d      	mov	r5, r1
 8006872:	f7fa f971 	bl	8000b58 <__aeabi_d2iz>
 8006876:	2200      	movs	r2, #0
 8006878:	4607      	mov	r7, r0
 800687a:	2300      	movs	r3, #0
 800687c:	4620      	mov	r0, r4
 800687e:	4629      	mov	r1, r5
 8006880:	f7fa f92c 	bl	8000adc <__aeabi_dcmplt>
 8006884:	b140      	cbz	r0, 8006898 <_dtoa_r+0x168>
 8006886:	4638      	mov	r0, r7
 8006888:	f7f9 fe4c 	bl	8000524 <__aeabi_i2d>
 800688c:	4622      	mov	r2, r4
 800688e:	462b      	mov	r3, r5
 8006890:	f7fa f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006894:	b900      	cbnz	r0, 8006898 <_dtoa_r+0x168>
 8006896:	3f01      	subs	r7, #1
 8006898:	2f16      	cmp	r7, #22
 800689a:	d852      	bhi.n	8006942 <_dtoa_r+0x212>
 800689c:	4b5d      	ldr	r3, [pc, #372]	@ (8006a14 <_dtoa_r+0x2e4>)
 800689e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068aa:	f7fa f917 	bl	8000adc <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d049      	beq.n	8006946 <_dtoa_r+0x216>
 80068b2:	3f01      	subs	r7, #1
 80068b4:	2300      	movs	r3, #0
 80068b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80068b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068ba:	1b9b      	subs	r3, r3, r6
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	bf45      	ittet	mi
 80068c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80068c4:	9300      	strmi	r3, [sp, #0]
 80068c6:	2300      	movpl	r3, #0
 80068c8:	2300      	movmi	r3, #0
 80068ca:	9206      	str	r2, [sp, #24]
 80068cc:	bf54      	ite	pl
 80068ce:	9300      	strpl	r3, [sp, #0]
 80068d0:	9306      	strmi	r3, [sp, #24]
 80068d2:	2f00      	cmp	r7, #0
 80068d4:	db39      	blt.n	800694a <_dtoa_r+0x21a>
 80068d6:	9b06      	ldr	r3, [sp, #24]
 80068d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80068da:	443b      	add	r3, r7
 80068dc:	9306      	str	r3, [sp, #24]
 80068de:	2300      	movs	r3, #0
 80068e0:	9308      	str	r3, [sp, #32]
 80068e2:	9b07      	ldr	r3, [sp, #28]
 80068e4:	2b09      	cmp	r3, #9
 80068e6:	d863      	bhi.n	80069b0 <_dtoa_r+0x280>
 80068e8:	2b05      	cmp	r3, #5
 80068ea:	bfc4      	itt	gt
 80068ec:	3b04      	subgt	r3, #4
 80068ee:	9307      	strgt	r3, [sp, #28]
 80068f0:	9b07      	ldr	r3, [sp, #28]
 80068f2:	f1a3 0302 	sub.w	r3, r3, #2
 80068f6:	bfcc      	ite	gt
 80068f8:	2400      	movgt	r4, #0
 80068fa:	2401      	movle	r4, #1
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d863      	bhi.n	80069c8 <_dtoa_r+0x298>
 8006900:	e8df f003 	tbb	[pc, r3]
 8006904:	2b375452 	.word	0x2b375452
 8006908:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800690c:	441e      	add	r6, r3
 800690e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006912:	2b20      	cmp	r3, #32
 8006914:	bfc1      	itttt	gt
 8006916:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800691a:	409f      	lslgt	r7, r3
 800691c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006920:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006924:	bfd6      	itet	le
 8006926:	f1c3 0320 	rsble	r3, r3, #32
 800692a:	ea47 0003 	orrgt.w	r0, r7, r3
 800692e:	fa04 f003 	lslle.w	r0, r4, r3
 8006932:	f7f9 fde7 	bl	8000504 <__aeabi_ui2d>
 8006936:	2201      	movs	r2, #1
 8006938:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800693c:	3e01      	subs	r6, #1
 800693e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006940:	e776      	b.n	8006830 <_dtoa_r+0x100>
 8006942:	2301      	movs	r3, #1
 8006944:	e7b7      	b.n	80068b6 <_dtoa_r+0x186>
 8006946:	9010      	str	r0, [sp, #64]	@ 0x40
 8006948:	e7b6      	b.n	80068b8 <_dtoa_r+0x188>
 800694a:	9b00      	ldr	r3, [sp, #0]
 800694c:	1bdb      	subs	r3, r3, r7
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	427b      	negs	r3, r7
 8006952:	9308      	str	r3, [sp, #32]
 8006954:	2300      	movs	r3, #0
 8006956:	930d      	str	r3, [sp, #52]	@ 0x34
 8006958:	e7c3      	b.n	80068e2 <_dtoa_r+0x1b2>
 800695a:	2301      	movs	r3, #1
 800695c:	9309      	str	r3, [sp, #36]	@ 0x24
 800695e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006960:	eb07 0b03 	add.w	fp, r7, r3
 8006964:	f10b 0301 	add.w	r3, fp, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	9303      	str	r3, [sp, #12]
 800696c:	bfb8      	it	lt
 800696e:	2301      	movlt	r3, #1
 8006970:	e006      	b.n	8006980 <_dtoa_r+0x250>
 8006972:	2301      	movs	r3, #1
 8006974:	9309      	str	r3, [sp, #36]	@ 0x24
 8006976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006978:	2b00      	cmp	r3, #0
 800697a:	dd28      	ble.n	80069ce <_dtoa_r+0x29e>
 800697c:	469b      	mov	fp, r3
 800697e:	9303      	str	r3, [sp, #12]
 8006980:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006984:	2100      	movs	r1, #0
 8006986:	2204      	movs	r2, #4
 8006988:	f102 0514 	add.w	r5, r2, #20
 800698c:	429d      	cmp	r5, r3
 800698e:	d926      	bls.n	80069de <_dtoa_r+0x2ae>
 8006990:	6041      	str	r1, [r0, #4]
 8006992:	4648      	mov	r0, r9
 8006994:	f000 fd9c 	bl	80074d0 <_Balloc>
 8006998:	4682      	mov	sl, r0
 800699a:	2800      	cmp	r0, #0
 800699c:	d142      	bne.n	8006a24 <_dtoa_r+0x2f4>
 800699e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a18 <_dtoa_r+0x2e8>)
 80069a0:	4602      	mov	r2, r0
 80069a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80069a6:	e6da      	b.n	800675e <_dtoa_r+0x2e>
 80069a8:	2300      	movs	r3, #0
 80069aa:	e7e3      	b.n	8006974 <_dtoa_r+0x244>
 80069ac:	2300      	movs	r3, #0
 80069ae:	e7d5      	b.n	800695c <_dtoa_r+0x22c>
 80069b0:	2401      	movs	r4, #1
 80069b2:	2300      	movs	r3, #0
 80069b4:	9307      	str	r3, [sp, #28]
 80069b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80069b8:	f04f 3bff 	mov.w	fp, #4294967295
 80069bc:	2200      	movs	r2, #0
 80069be:	f8cd b00c 	str.w	fp, [sp, #12]
 80069c2:	2312      	movs	r3, #18
 80069c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80069c6:	e7db      	b.n	8006980 <_dtoa_r+0x250>
 80069c8:	2301      	movs	r3, #1
 80069ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80069cc:	e7f4      	b.n	80069b8 <_dtoa_r+0x288>
 80069ce:	f04f 0b01 	mov.w	fp, #1
 80069d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80069d6:	465b      	mov	r3, fp
 80069d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80069dc:	e7d0      	b.n	8006980 <_dtoa_r+0x250>
 80069de:	3101      	adds	r1, #1
 80069e0:	0052      	lsls	r2, r2, #1
 80069e2:	e7d1      	b.n	8006988 <_dtoa_r+0x258>
 80069e4:	f3af 8000 	nop.w
 80069e8:	636f4361 	.word	0x636f4361
 80069ec:	3fd287a7 	.word	0x3fd287a7
 80069f0:	8b60c8b3 	.word	0x8b60c8b3
 80069f4:	3fc68a28 	.word	0x3fc68a28
 80069f8:	509f79fb 	.word	0x509f79fb
 80069fc:	3fd34413 	.word	0x3fd34413
 8006a00:	080088e9 	.word	0x080088e9
 8006a04:	08008900 	.word	0x08008900
 8006a08:	7ff00000 	.word	0x7ff00000
 8006a0c:	080088b9 	.word	0x080088b9
 8006a10:	3ff80000 	.word	0x3ff80000
 8006a14:	08008a50 	.word	0x08008a50
 8006a18:	08008958 	.word	0x08008958
 8006a1c:	080088e5 	.word	0x080088e5
 8006a20:	080088b8 	.word	0x080088b8
 8006a24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a28:	6018      	str	r0, [r3, #0]
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	2b0e      	cmp	r3, #14
 8006a2e:	f200 80a1 	bhi.w	8006b74 <_dtoa_r+0x444>
 8006a32:	2c00      	cmp	r4, #0
 8006a34:	f000 809e 	beq.w	8006b74 <_dtoa_r+0x444>
 8006a38:	2f00      	cmp	r7, #0
 8006a3a:	dd33      	ble.n	8006aa4 <_dtoa_r+0x374>
 8006a3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006cb0 <_dtoa_r+0x580>)
 8006a3e:	f007 020f 	and.w	r2, r7, #15
 8006a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a46:	ed93 7b00 	vldr	d7, [r3]
 8006a4a:	05f8      	lsls	r0, r7, #23
 8006a4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006a50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a54:	d516      	bpl.n	8006a84 <_dtoa_r+0x354>
 8006a56:	4b97      	ldr	r3, [pc, #604]	@ (8006cb4 <_dtoa_r+0x584>)
 8006a58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a60:	f7f9 fef4 	bl	800084c <__aeabi_ddiv>
 8006a64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a68:	f004 040f 	and.w	r4, r4, #15
 8006a6c:	2603      	movs	r6, #3
 8006a6e:	4d91      	ldr	r5, [pc, #580]	@ (8006cb4 <_dtoa_r+0x584>)
 8006a70:	b954      	cbnz	r4, 8006a88 <_dtoa_r+0x358>
 8006a72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7a:	f7f9 fee7 	bl	800084c <__aeabi_ddiv>
 8006a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a82:	e028      	b.n	8006ad6 <_dtoa_r+0x3a6>
 8006a84:	2602      	movs	r6, #2
 8006a86:	e7f2      	b.n	8006a6e <_dtoa_r+0x33e>
 8006a88:	07e1      	lsls	r1, r4, #31
 8006a8a:	d508      	bpl.n	8006a9e <_dtoa_r+0x36e>
 8006a8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a94:	f7f9 fdb0 	bl	80005f8 <__aeabi_dmul>
 8006a98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a9c:	3601      	adds	r6, #1
 8006a9e:	1064      	asrs	r4, r4, #1
 8006aa0:	3508      	adds	r5, #8
 8006aa2:	e7e5      	b.n	8006a70 <_dtoa_r+0x340>
 8006aa4:	f000 80af 	beq.w	8006c06 <_dtoa_r+0x4d6>
 8006aa8:	427c      	negs	r4, r7
 8006aaa:	4b81      	ldr	r3, [pc, #516]	@ (8006cb0 <_dtoa_r+0x580>)
 8006aac:	4d81      	ldr	r5, [pc, #516]	@ (8006cb4 <_dtoa_r+0x584>)
 8006aae:	f004 020f 	and.w	r2, r4, #15
 8006ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006abe:	f7f9 fd9b 	bl	80005f8 <__aeabi_dmul>
 8006ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac6:	1124      	asrs	r4, r4, #4
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2602      	movs	r6, #2
 8006acc:	2c00      	cmp	r4, #0
 8006ace:	f040 808f 	bne.w	8006bf0 <_dtoa_r+0x4c0>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1d3      	bne.n	8006a7e <_dtoa_r+0x34e>
 8006ad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ad8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8094 	beq.w	8006c0a <_dtoa_r+0x4da>
 8006ae2:	4b75      	ldr	r3, [pc, #468]	@ (8006cb8 <_dtoa_r+0x588>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fff7 	bl	8000adc <__aeabi_dcmplt>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f000 808b 	beq.w	8006c0a <_dtoa_r+0x4da>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8087 	beq.w	8006c0a <_dtoa_r+0x4da>
 8006afc:	f1bb 0f00 	cmp.w	fp, #0
 8006b00:	dd34      	ble.n	8006b6c <_dtoa_r+0x43c>
 8006b02:	4620      	mov	r0, r4
 8006b04:	4b6d      	ldr	r3, [pc, #436]	@ (8006cbc <_dtoa_r+0x58c>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b12:	f107 38ff 	add.w	r8, r7, #4294967295
 8006b16:	3601      	adds	r6, #1
 8006b18:	465c      	mov	r4, fp
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7f9 fd02 	bl	8000524 <__aeabi_i2d>
 8006b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b24:	f7f9 fd68 	bl	80005f8 <__aeabi_dmul>
 8006b28:	4b65      	ldr	r3, [pc, #404]	@ (8006cc0 <_dtoa_r+0x590>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f7f9 fbae 	bl	800028c <__adddf3>
 8006b30:	4605      	mov	r5, r0
 8006b32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d16a      	bne.n	8006c10 <_dtoa_r+0x4e0>
 8006b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b3e:	4b61      	ldr	r3, [pc, #388]	@ (8006cc4 <_dtoa_r+0x594>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	f7f9 fba1 	bl	8000288 <__aeabi_dsub>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b4e:	462a      	mov	r2, r5
 8006b50:	4633      	mov	r3, r6
 8006b52:	f7f9 ffe1 	bl	8000b18 <__aeabi_dcmpgt>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	f040 8298 	bne.w	800708c <_dtoa_r+0x95c>
 8006b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b60:	462a      	mov	r2, r5
 8006b62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b66:	f7f9 ffb9 	bl	8000adc <__aeabi_dcmplt>
 8006b6a:	bb38      	cbnz	r0, 8006bbc <_dtoa_r+0x48c>
 8006b6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006b70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f2c0 8157 	blt.w	8006e2a <_dtoa_r+0x6fa>
 8006b7c:	2f0e      	cmp	r7, #14
 8006b7e:	f300 8154 	bgt.w	8006e2a <_dtoa_r+0x6fa>
 8006b82:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb0 <_dtoa_r+0x580>)
 8006b84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b88:	ed93 7b00 	vldr	d7, [r3]
 8006b8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	ed8d 7b00 	vstr	d7, [sp]
 8006b94:	f280 80e5 	bge.w	8006d62 <_dtoa_r+0x632>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f300 80e1 	bgt.w	8006d62 <_dtoa_r+0x632>
 8006ba0:	d10c      	bne.n	8006bbc <_dtoa_r+0x48c>
 8006ba2:	4b48      	ldr	r3, [pc, #288]	@ (8006cc4 <_dtoa_r+0x594>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	ec51 0b17 	vmov	r0, r1, d7
 8006baa:	f7f9 fd25 	bl	80005f8 <__aeabi_dmul>
 8006bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bb2:	f7f9 ffa7 	bl	8000b04 <__aeabi_dcmpge>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f000 8266 	beq.w	8007088 <_dtoa_r+0x958>
 8006bbc:	2400      	movs	r4, #0
 8006bbe:	4625      	mov	r5, r4
 8006bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bc2:	4656      	mov	r6, sl
 8006bc4:	ea6f 0803 	mvn.w	r8, r3
 8006bc8:	2700      	movs	r7, #0
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4648      	mov	r0, r9
 8006bce:	f000 fcbf 	bl	8007550 <_Bfree>
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	f000 80bd 	beq.w	8006d52 <_dtoa_r+0x622>
 8006bd8:	b12f      	cbz	r7, 8006be6 <_dtoa_r+0x4b6>
 8006bda:	42af      	cmp	r7, r5
 8006bdc:	d003      	beq.n	8006be6 <_dtoa_r+0x4b6>
 8006bde:	4639      	mov	r1, r7
 8006be0:	4648      	mov	r0, r9
 8006be2:	f000 fcb5 	bl	8007550 <_Bfree>
 8006be6:	4629      	mov	r1, r5
 8006be8:	4648      	mov	r0, r9
 8006bea:	f000 fcb1 	bl	8007550 <_Bfree>
 8006bee:	e0b0      	b.n	8006d52 <_dtoa_r+0x622>
 8006bf0:	07e2      	lsls	r2, r4, #31
 8006bf2:	d505      	bpl.n	8006c00 <_dtoa_r+0x4d0>
 8006bf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bf8:	f7f9 fcfe 	bl	80005f8 <__aeabi_dmul>
 8006bfc:	3601      	adds	r6, #1
 8006bfe:	2301      	movs	r3, #1
 8006c00:	1064      	asrs	r4, r4, #1
 8006c02:	3508      	adds	r5, #8
 8006c04:	e762      	b.n	8006acc <_dtoa_r+0x39c>
 8006c06:	2602      	movs	r6, #2
 8006c08:	e765      	b.n	8006ad6 <_dtoa_r+0x3a6>
 8006c0a:	9c03      	ldr	r4, [sp, #12]
 8006c0c:	46b8      	mov	r8, r7
 8006c0e:	e784      	b.n	8006b1a <_dtoa_r+0x3ea>
 8006c10:	4b27      	ldr	r3, [pc, #156]	@ (8006cb0 <_dtoa_r+0x580>)
 8006c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c1c:	4454      	add	r4, sl
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	d054      	beq.n	8006ccc <_dtoa_r+0x59c>
 8006c22:	4929      	ldr	r1, [pc, #164]	@ (8006cc8 <_dtoa_r+0x598>)
 8006c24:	2000      	movs	r0, #0
 8006c26:	f7f9 fe11 	bl	800084c <__aeabi_ddiv>
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	462a      	mov	r2, r5
 8006c2e:	f7f9 fb2b 	bl	8000288 <__aeabi_dsub>
 8006c32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c36:	4656      	mov	r6, sl
 8006c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3c:	f7f9 ff8c 	bl	8000b58 <__aeabi_d2iz>
 8006c40:	4605      	mov	r5, r0
 8006c42:	f7f9 fc6f 	bl	8000524 <__aeabi_i2d>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c4e:	f7f9 fb1b 	bl	8000288 <__aeabi_dsub>
 8006c52:	3530      	adds	r5, #48	@ 0x30
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c5c:	f806 5b01 	strb.w	r5, [r6], #1
 8006c60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c64:	f7f9 ff3a 	bl	8000adc <__aeabi_dcmplt>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d172      	bne.n	8006d52 <_dtoa_r+0x622>
 8006c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c70:	4911      	ldr	r1, [pc, #68]	@ (8006cb8 <_dtoa_r+0x588>)
 8006c72:	2000      	movs	r0, #0
 8006c74:	f7f9 fb08 	bl	8000288 <__aeabi_dsub>
 8006c78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c7c:	f7f9 ff2e 	bl	8000adc <__aeabi_dcmplt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f040 80b4 	bne.w	8006dee <_dtoa_r+0x6be>
 8006c86:	42a6      	cmp	r6, r4
 8006c88:	f43f af70 	beq.w	8006b6c <_dtoa_r+0x43c>
 8006c8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c90:	4b0a      	ldr	r3, [pc, #40]	@ (8006cbc <_dtoa_r+0x58c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4b08      	ldr	r3, [pc, #32]	@ (8006cbc <_dtoa_r+0x58c>)
 8006c9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca4:	f7f9 fca8 	bl	80005f8 <__aeabi_dmul>
 8006ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cac:	e7c4      	b.n	8006c38 <_dtoa_r+0x508>
 8006cae:	bf00      	nop
 8006cb0:	08008a50 	.word	0x08008a50
 8006cb4:	08008a28 	.word	0x08008a28
 8006cb8:	3ff00000 	.word	0x3ff00000
 8006cbc:	40240000 	.word	0x40240000
 8006cc0:	401c0000 	.word	0x401c0000
 8006cc4:	40140000 	.word	0x40140000
 8006cc8:	3fe00000 	.word	0x3fe00000
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f7f9 fc92 	bl	80005f8 <__aeabi_dmul>
 8006cd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006cd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006cda:	4656      	mov	r6, sl
 8006cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ce0:	f7f9 ff3a 	bl	8000b58 <__aeabi_d2iz>
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	f7f9 fc1d 	bl	8000524 <__aeabi_i2d>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cf2:	f7f9 fac9 	bl	8000288 <__aeabi_dsub>
 8006cf6:	3530      	adds	r5, #48	@ 0x30
 8006cf8:	f806 5b01 	strb.w	r5, [r6], #1
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	42a6      	cmp	r6, r4
 8006d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	d124      	bne.n	8006d56 <_dtoa_r+0x626>
 8006d0c:	4baf      	ldr	r3, [pc, #700]	@ (8006fcc <_dtoa_r+0x89c>)
 8006d0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d12:	f7f9 fabb 	bl	800028c <__adddf3>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d1e:	f7f9 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d163      	bne.n	8006dee <_dtoa_r+0x6be>
 8006d26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d2a:	49a8      	ldr	r1, [pc, #672]	@ (8006fcc <_dtoa_r+0x89c>)
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d3a:	f7f9 fecf 	bl	8000adc <__aeabi_dcmplt>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f af14 	beq.w	8006b6c <_dtoa_r+0x43c>
 8006d44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006d46:	1e73      	subs	r3, r6, #1
 8006d48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d4e:	2b30      	cmp	r3, #48	@ 0x30
 8006d50:	d0f8      	beq.n	8006d44 <_dtoa_r+0x614>
 8006d52:	4647      	mov	r7, r8
 8006d54:	e03b      	b.n	8006dce <_dtoa_r+0x69e>
 8006d56:	4b9e      	ldr	r3, [pc, #632]	@ (8006fd0 <_dtoa_r+0x8a0>)
 8006d58:	f7f9 fc4e 	bl	80005f8 <__aeabi_dmul>
 8006d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d60:	e7bc      	b.n	8006cdc <_dtoa_r+0x5ac>
 8006d62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006d66:	4656      	mov	r6, sl
 8006d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	4629      	mov	r1, r5
 8006d70:	f7f9 fd6c 	bl	800084c <__aeabi_ddiv>
 8006d74:	f7f9 fef0 	bl	8000b58 <__aeabi_d2iz>
 8006d78:	4680      	mov	r8, r0
 8006d7a:	f7f9 fbd3 	bl	8000524 <__aeabi_i2d>
 8006d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d92:	f7f9 fa79 	bl	8000288 <__aeabi_dsub>
 8006d96:	f806 4b01 	strb.w	r4, [r6], #1
 8006d9a:	9d03      	ldr	r5, [sp, #12]
 8006d9c:	eba6 040a 	sub.w	r4, r6, sl
 8006da0:	42a5      	cmp	r5, r4
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	d133      	bne.n	8006e10 <_dtoa_r+0x6e0>
 8006da8:	f7f9 fa70 	bl	800028c <__adddf3>
 8006dac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006db0:	4604      	mov	r4, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	f7f9 feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8006db8:	b9c0      	cbnz	r0, 8006dec <_dtoa_r+0x6bc>
 8006dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dc6:	b110      	cbz	r0, 8006dce <_dtoa_r+0x69e>
 8006dc8:	f018 0f01 	tst.w	r8, #1
 8006dcc:	d10e      	bne.n	8006dec <_dtoa_r+0x6bc>
 8006dce:	9902      	ldr	r1, [sp, #8]
 8006dd0:	4648      	mov	r0, r9
 8006dd2:	f000 fbbd 	bl	8007550 <_Bfree>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	7033      	strb	r3, [r6, #0]
 8006dda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ddc:	3701      	adds	r7, #1
 8006dde:	601f      	str	r7, [r3, #0]
 8006de0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 824b 	beq.w	800727e <_dtoa_r+0xb4e>
 8006de8:	601e      	str	r6, [r3, #0]
 8006dea:	e248      	b.n	800727e <_dtoa_r+0xb4e>
 8006dec:	46b8      	mov	r8, r7
 8006dee:	4633      	mov	r3, r6
 8006df0:	461e      	mov	r6, r3
 8006df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006df6:	2a39      	cmp	r2, #57	@ 0x39
 8006df8:	d106      	bne.n	8006e08 <_dtoa_r+0x6d8>
 8006dfa:	459a      	cmp	sl, r3
 8006dfc:	d1f8      	bne.n	8006df0 <_dtoa_r+0x6c0>
 8006dfe:	2230      	movs	r2, #48	@ 0x30
 8006e00:	f108 0801 	add.w	r8, r8, #1
 8006e04:	f88a 2000 	strb.w	r2, [sl]
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e7a0      	b.n	8006d52 <_dtoa_r+0x622>
 8006e10:	4b6f      	ldr	r3, [pc, #444]	@ (8006fd0 <_dtoa_r+0x8a0>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	f7f9 fbf0 	bl	80005f8 <__aeabi_dmul>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	460d      	mov	r5, r1
 8006e20:	f7f9 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d09f      	beq.n	8006d68 <_dtoa_r+0x638>
 8006e28:	e7d1      	b.n	8006dce <_dtoa_r+0x69e>
 8006e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	f000 80ea 	beq.w	8007006 <_dtoa_r+0x8d6>
 8006e32:	9a07      	ldr	r2, [sp, #28]
 8006e34:	2a01      	cmp	r2, #1
 8006e36:	f300 80cd 	bgt.w	8006fd4 <_dtoa_r+0x8a4>
 8006e3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	f000 80c1 	beq.w	8006fc4 <_dtoa_r+0x894>
 8006e42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e46:	9c08      	ldr	r4, [sp, #32]
 8006e48:	9e00      	ldr	r6, [sp, #0]
 8006e4a:	9a00      	ldr	r2, [sp, #0]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	9200      	str	r2, [sp, #0]
 8006e50:	9a06      	ldr	r2, [sp, #24]
 8006e52:	2101      	movs	r1, #1
 8006e54:	441a      	add	r2, r3
 8006e56:	4648      	mov	r0, r9
 8006e58:	9206      	str	r2, [sp, #24]
 8006e5a:	f000 fc2d 	bl	80076b8 <__i2b>
 8006e5e:	4605      	mov	r5, r0
 8006e60:	b166      	cbz	r6, 8006e7c <_dtoa_r+0x74c>
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dd09      	ble.n	8006e7c <_dtoa_r+0x74c>
 8006e68:	42b3      	cmp	r3, r6
 8006e6a:	9a00      	ldr	r2, [sp, #0]
 8006e6c:	bfa8      	it	ge
 8006e6e:	4633      	movge	r3, r6
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	9200      	str	r2, [sp, #0]
 8006e74:	9a06      	ldr	r2, [sp, #24]
 8006e76:	1af6      	subs	r6, r6, r3
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	9306      	str	r3, [sp, #24]
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	b30b      	cbz	r3, 8006ec4 <_dtoa_r+0x794>
 8006e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80c6 	beq.w	8007014 <_dtoa_r+0x8e4>
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	f000 80c0 	beq.w	800700e <_dtoa_r+0x8de>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4622      	mov	r2, r4
 8006e92:	4648      	mov	r0, r9
 8006e94:	f000 fcc8 	bl	8007828 <__pow5mult>
 8006e98:	9a02      	ldr	r2, [sp, #8]
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	4648      	mov	r0, r9
 8006ea0:	f000 fc20 	bl	80076e4 <__multiply>
 8006ea4:	9902      	ldr	r1, [sp, #8]
 8006ea6:	4680      	mov	r8, r0
 8006ea8:	4648      	mov	r0, r9
 8006eaa:	f000 fb51 	bl	8007550 <_Bfree>
 8006eae:	9b08      	ldr	r3, [sp, #32]
 8006eb0:	1b1b      	subs	r3, r3, r4
 8006eb2:	9308      	str	r3, [sp, #32]
 8006eb4:	f000 80b1 	beq.w	800701a <_dtoa_r+0x8ea>
 8006eb8:	9a08      	ldr	r2, [sp, #32]
 8006eba:	4641      	mov	r1, r8
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	f000 fcb3 	bl	8007828 <__pow5mult>
 8006ec2:	9002      	str	r0, [sp, #8]
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	f000 fbf6 	bl	80076b8 <__i2b>
 8006ecc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ece:	4604      	mov	r4, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 81d8 	beq.w	8007286 <_dtoa_r+0xb56>
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4601      	mov	r1, r0
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fca4 	bl	8007828 <__pow5mult>
 8006ee0:	9b07      	ldr	r3, [sp, #28]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	f300 809f 	bgt.w	8007028 <_dtoa_r+0x8f8>
 8006eea:	9b04      	ldr	r3, [sp, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f040 8097 	bne.w	8007020 <_dtoa_r+0x8f0>
 8006ef2:	9b05      	ldr	r3, [sp, #20]
 8006ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 8093 	bne.w	8007024 <_dtoa_r+0x8f4>
 8006efe:	9b05      	ldr	r3, [sp, #20]
 8006f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f04:	0d1b      	lsrs	r3, r3, #20
 8006f06:	051b      	lsls	r3, r3, #20
 8006f08:	b133      	cbz	r3, 8006f18 <_dtoa_r+0x7e8>
 8006f0a:	9b00      	ldr	r3, [sp, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	9b06      	ldr	r3, [sp, #24]
 8006f12:	3301      	adds	r3, #1
 8006f14:	9306      	str	r3, [sp, #24]
 8006f16:	2301      	movs	r3, #1
 8006f18:	9308      	str	r3, [sp, #32]
 8006f1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 81b8 	beq.w	8007292 <_dtoa_r+0xb62>
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f28:	6918      	ldr	r0, [r3, #16]
 8006f2a:	f000 fb79 	bl	8007620 <__hi0bits>
 8006f2e:	f1c0 0020 	rsb	r0, r0, #32
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	4418      	add	r0, r3
 8006f36:	f010 001f 	ands.w	r0, r0, #31
 8006f3a:	f000 8082 	beq.w	8007042 <_dtoa_r+0x912>
 8006f3e:	f1c0 0320 	rsb	r3, r0, #32
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	dd73      	ble.n	800702e <_dtoa_r+0x8fe>
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	f1c0 001c 	rsb	r0, r0, #28
 8006f4c:	4403      	add	r3, r0
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	9b06      	ldr	r3, [sp, #24]
 8006f52:	4403      	add	r3, r0
 8006f54:	4406      	add	r6, r0
 8006f56:	9306      	str	r3, [sp, #24]
 8006f58:	9b00      	ldr	r3, [sp, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dd05      	ble.n	8006f6a <_dtoa_r+0x83a>
 8006f5e:	9902      	ldr	r1, [sp, #8]
 8006f60:	461a      	mov	r2, r3
 8006f62:	4648      	mov	r0, r9
 8006f64:	f000 fcba 	bl	80078dc <__lshift>
 8006f68:	9002      	str	r0, [sp, #8]
 8006f6a:	9b06      	ldr	r3, [sp, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dd05      	ble.n	8006f7c <_dtoa_r+0x84c>
 8006f70:	4621      	mov	r1, r4
 8006f72:	461a      	mov	r2, r3
 8006f74:	4648      	mov	r0, r9
 8006f76:	f000 fcb1 	bl	80078dc <__lshift>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d061      	beq.n	8007046 <_dtoa_r+0x916>
 8006f82:	9802      	ldr	r0, [sp, #8]
 8006f84:	4621      	mov	r1, r4
 8006f86:	f000 fd15 	bl	80079b4 <__mcmp>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	da5b      	bge.n	8007046 <_dtoa_r+0x916>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9902      	ldr	r1, [sp, #8]
 8006f92:	220a      	movs	r2, #10
 8006f94:	4648      	mov	r0, r9
 8006f96:	f000 fafd 	bl	8007594 <__multadd>
 8006f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f9c:	9002      	str	r0, [sp, #8]
 8006f9e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8177 	beq.w	8007296 <_dtoa_r+0xb66>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	2300      	movs	r3, #0
 8006fac:	220a      	movs	r2, #10
 8006fae:	4648      	mov	r0, r9
 8006fb0:	f000 faf0 	bl	8007594 <__multadd>
 8006fb4:	f1bb 0f00 	cmp.w	fp, #0
 8006fb8:	4605      	mov	r5, r0
 8006fba:	dc6f      	bgt.n	800709c <_dtoa_r+0x96c>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	dc49      	bgt.n	8007056 <_dtoa_r+0x926>
 8006fc2:	e06b      	b.n	800709c <_dtoa_r+0x96c>
 8006fc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fca:	e73c      	b.n	8006e46 <_dtoa_r+0x716>
 8006fcc:	3fe00000 	.word	0x3fe00000
 8006fd0:	40240000 	.word	0x40240000
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	1e5c      	subs	r4, r3, #1
 8006fd8:	9b08      	ldr	r3, [sp, #32]
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	db09      	blt.n	8006ff2 <_dtoa_r+0x8c2>
 8006fde:	1b1c      	subs	r4, r3, r4
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f6bf af30 	bge.w	8006e48 <_dtoa_r+0x718>
 8006fe8:	9b00      	ldr	r3, [sp, #0]
 8006fea:	9a03      	ldr	r2, [sp, #12]
 8006fec:	1a9e      	subs	r6, r3, r2
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e72b      	b.n	8006e4a <_dtoa_r+0x71a>
 8006ff2:	9b08      	ldr	r3, [sp, #32]
 8006ff4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ff6:	9408      	str	r4, [sp, #32]
 8006ff8:	1ae3      	subs	r3, r4, r3
 8006ffa:	441a      	add	r2, r3
 8006ffc:	9e00      	ldr	r6, [sp, #0]
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	920d      	str	r2, [sp, #52]	@ 0x34
 8007002:	2400      	movs	r4, #0
 8007004:	e721      	b.n	8006e4a <_dtoa_r+0x71a>
 8007006:	9c08      	ldr	r4, [sp, #32]
 8007008:	9e00      	ldr	r6, [sp, #0]
 800700a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800700c:	e728      	b.n	8006e60 <_dtoa_r+0x730>
 800700e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007012:	e751      	b.n	8006eb8 <_dtoa_r+0x788>
 8007014:	9a08      	ldr	r2, [sp, #32]
 8007016:	9902      	ldr	r1, [sp, #8]
 8007018:	e750      	b.n	8006ebc <_dtoa_r+0x78c>
 800701a:	f8cd 8008 	str.w	r8, [sp, #8]
 800701e:	e751      	b.n	8006ec4 <_dtoa_r+0x794>
 8007020:	2300      	movs	r3, #0
 8007022:	e779      	b.n	8006f18 <_dtoa_r+0x7e8>
 8007024:	9b04      	ldr	r3, [sp, #16]
 8007026:	e777      	b.n	8006f18 <_dtoa_r+0x7e8>
 8007028:	2300      	movs	r3, #0
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	e779      	b.n	8006f22 <_dtoa_r+0x7f2>
 800702e:	d093      	beq.n	8006f58 <_dtoa_r+0x828>
 8007030:	9a00      	ldr	r2, [sp, #0]
 8007032:	331c      	adds	r3, #28
 8007034:	441a      	add	r2, r3
 8007036:	9200      	str	r2, [sp, #0]
 8007038:	9a06      	ldr	r2, [sp, #24]
 800703a:	441a      	add	r2, r3
 800703c:	441e      	add	r6, r3
 800703e:	9206      	str	r2, [sp, #24]
 8007040:	e78a      	b.n	8006f58 <_dtoa_r+0x828>
 8007042:	4603      	mov	r3, r0
 8007044:	e7f4      	b.n	8007030 <_dtoa_r+0x900>
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	46b8      	mov	r8, r7
 800704c:	dc20      	bgt.n	8007090 <_dtoa_r+0x960>
 800704e:	469b      	mov	fp, r3
 8007050:	9b07      	ldr	r3, [sp, #28]
 8007052:	2b02      	cmp	r3, #2
 8007054:	dd1e      	ble.n	8007094 <_dtoa_r+0x964>
 8007056:	f1bb 0f00 	cmp.w	fp, #0
 800705a:	f47f adb1 	bne.w	8006bc0 <_dtoa_r+0x490>
 800705e:	4621      	mov	r1, r4
 8007060:	465b      	mov	r3, fp
 8007062:	2205      	movs	r2, #5
 8007064:	4648      	mov	r0, r9
 8007066:	f000 fa95 	bl	8007594 <__multadd>
 800706a:	4601      	mov	r1, r0
 800706c:	4604      	mov	r4, r0
 800706e:	9802      	ldr	r0, [sp, #8]
 8007070:	f000 fca0 	bl	80079b4 <__mcmp>
 8007074:	2800      	cmp	r0, #0
 8007076:	f77f ada3 	ble.w	8006bc0 <_dtoa_r+0x490>
 800707a:	4656      	mov	r6, sl
 800707c:	2331      	movs	r3, #49	@ 0x31
 800707e:	f806 3b01 	strb.w	r3, [r6], #1
 8007082:	f108 0801 	add.w	r8, r8, #1
 8007086:	e59f      	b.n	8006bc8 <_dtoa_r+0x498>
 8007088:	9c03      	ldr	r4, [sp, #12]
 800708a:	46b8      	mov	r8, r7
 800708c:	4625      	mov	r5, r4
 800708e:	e7f4      	b.n	800707a <_dtoa_r+0x94a>
 8007090:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 8101 	beq.w	800729e <_dtoa_r+0xb6e>
 800709c:	2e00      	cmp	r6, #0
 800709e:	dd05      	ble.n	80070ac <_dtoa_r+0x97c>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4632      	mov	r2, r6
 80070a4:	4648      	mov	r0, r9
 80070a6:	f000 fc19 	bl	80078dc <__lshift>
 80070aa:	4605      	mov	r5, r0
 80070ac:	9b08      	ldr	r3, [sp, #32]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d05c      	beq.n	800716c <_dtoa_r+0xa3c>
 80070b2:	6869      	ldr	r1, [r5, #4]
 80070b4:	4648      	mov	r0, r9
 80070b6:	f000 fa0b 	bl	80074d0 <_Balloc>
 80070ba:	4606      	mov	r6, r0
 80070bc:	b928      	cbnz	r0, 80070ca <_dtoa_r+0x99a>
 80070be:	4b82      	ldr	r3, [pc, #520]	@ (80072c8 <_dtoa_r+0xb98>)
 80070c0:	4602      	mov	r2, r0
 80070c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070c6:	f7ff bb4a 	b.w	800675e <_dtoa_r+0x2e>
 80070ca:	692a      	ldr	r2, [r5, #16]
 80070cc:	3202      	adds	r2, #2
 80070ce:	0092      	lsls	r2, r2, #2
 80070d0:	f105 010c 	add.w	r1, r5, #12
 80070d4:	300c      	adds	r0, #12
 80070d6:	f000 ffa3 	bl	8008020 <memcpy>
 80070da:	2201      	movs	r2, #1
 80070dc:	4631      	mov	r1, r6
 80070de:	4648      	mov	r0, r9
 80070e0:	f000 fbfc 	bl	80078dc <__lshift>
 80070e4:	f10a 0301 	add.w	r3, sl, #1
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	eb0a 030b 	add.w	r3, sl, fp
 80070ee:	9308      	str	r3, [sp, #32]
 80070f0:	9b04      	ldr	r3, [sp, #16]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	462f      	mov	r7, r5
 80070f8:	9306      	str	r3, [sp, #24]
 80070fa:	4605      	mov	r5, r0
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	9802      	ldr	r0, [sp, #8]
 8007100:	4621      	mov	r1, r4
 8007102:	f103 3bff 	add.w	fp, r3, #4294967295
 8007106:	f7ff fa88 	bl	800661a <quorem>
 800710a:	4603      	mov	r3, r0
 800710c:	3330      	adds	r3, #48	@ 0x30
 800710e:	9003      	str	r0, [sp, #12]
 8007110:	4639      	mov	r1, r7
 8007112:	9802      	ldr	r0, [sp, #8]
 8007114:	9309      	str	r3, [sp, #36]	@ 0x24
 8007116:	f000 fc4d 	bl	80079b4 <__mcmp>
 800711a:	462a      	mov	r2, r5
 800711c:	9004      	str	r0, [sp, #16]
 800711e:	4621      	mov	r1, r4
 8007120:	4648      	mov	r0, r9
 8007122:	f000 fc63 	bl	80079ec <__mdiff>
 8007126:	68c2      	ldr	r2, [r0, #12]
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	4606      	mov	r6, r0
 800712c:	bb02      	cbnz	r2, 8007170 <_dtoa_r+0xa40>
 800712e:	4601      	mov	r1, r0
 8007130:	9802      	ldr	r0, [sp, #8]
 8007132:	f000 fc3f 	bl	80079b4 <__mcmp>
 8007136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007138:	4602      	mov	r2, r0
 800713a:	4631      	mov	r1, r6
 800713c:	4648      	mov	r0, r9
 800713e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007140:	9309      	str	r3, [sp, #36]	@ 0x24
 8007142:	f000 fa05 	bl	8007550 <_Bfree>
 8007146:	9b07      	ldr	r3, [sp, #28]
 8007148:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800714a:	9e00      	ldr	r6, [sp, #0]
 800714c:	ea42 0103 	orr.w	r1, r2, r3
 8007150:	9b06      	ldr	r3, [sp, #24]
 8007152:	4319      	orrs	r1, r3
 8007154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007156:	d10d      	bne.n	8007174 <_dtoa_r+0xa44>
 8007158:	2b39      	cmp	r3, #57	@ 0x39
 800715a:	d027      	beq.n	80071ac <_dtoa_r+0xa7c>
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	2a00      	cmp	r2, #0
 8007160:	dd01      	ble.n	8007166 <_dtoa_r+0xa36>
 8007162:	9b03      	ldr	r3, [sp, #12]
 8007164:	3331      	adds	r3, #49	@ 0x31
 8007166:	f88b 3000 	strb.w	r3, [fp]
 800716a:	e52e      	b.n	8006bca <_dtoa_r+0x49a>
 800716c:	4628      	mov	r0, r5
 800716e:	e7b9      	b.n	80070e4 <_dtoa_r+0x9b4>
 8007170:	2201      	movs	r2, #1
 8007172:	e7e2      	b.n	800713a <_dtoa_r+0xa0a>
 8007174:	9904      	ldr	r1, [sp, #16]
 8007176:	2900      	cmp	r1, #0
 8007178:	db04      	blt.n	8007184 <_dtoa_r+0xa54>
 800717a:	9807      	ldr	r0, [sp, #28]
 800717c:	4301      	orrs	r1, r0
 800717e:	9806      	ldr	r0, [sp, #24]
 8007180:	4301      	orrs	r1, r0
 8007182:	d120      	bne.n	80071c6 <_dtoa_r+0xa96>
 8007184:	2a00      	cmp	r2, #0
 8007186:	ddee      	ble.n	8007166 <_dtoa_r+0xa36>
 8007188:	9902      	ldr	r1, [sp, #8]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2201      	movs	r2, #1
 800718e:	4648      	mov	r0, r9
 8007190:	f000 fba4 	bl	80078dc <__lshift>
 8007194:	4621      	mov	r1, r4
 8007196:	9002      	str	r0, [sp, #8]
 8007198:	f000 fc0c 	bl	80079b4 <__mcmp>
 800719c:	2800      	cmp	r0, #0
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	dc02      	bgt.n	80071a8 <_dtoa_r+0xa78>
 80071a2:	d1e0      	bne.n	8007166 <_dtoa_r+0xa36>
 80071a4:	07da      	lsls	r2, r3, #31
 80071a6:	d5de      	bpl.n	8007166 <_dtoa_r+0xa36>
 80071a8:	2b39      	cmp	r3, #57	@ 0x39
 80071aa:	d1da      	bne.n	8007162 <_dtoa_r+0xa32>
 80071ac:	2339      	movs	r3, #57	@ 0x39
 80071ae:	f88b 3000 	strb.w	r3, [fp]
 80071b2:	4633      	mov	r3, r6
 80071b4:	461e      	mov	r6, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071bc:	2a39      	cmp	r2, #57	@ 0x39
 80071be:	d04e      	beq.n	800725e <_dtoa_r+0xb2e>
 80071c0:	3201      	adds	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	e501      	b.n	8006bca <_dtoa_r+0x49a>
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	dd03      	ble.n	80071d2 <_dtoa_r+0xaa2>
 80071ca:	2b39      	cmp	r3, #57	@ 0x39
 80071cc:	d0ee      	beq.n	80071ac <_dtoa_r+0xa7c>
 80071ce:	3301      	adds	r3, #1
 80071d0:	e7c9      	b.n	8007166 <_dtoa_r+0xa36>
 80071d2:	9a00      	ldr	r2, [sp, #0]
 80071d4:	9908      	ldr	r1, [sp, #32]
 80071d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071da:	428a      	cmp	r2, r1
 80071dc:	d028      	beq.n	8007230 <_dtoa_r+0xb00>
 80071de:	9902      	ldr	r1, [sp, #8]
 80071e0:	2300      	movs	r3, #0
 80071e2:	220a      	movs	r2, #10
 80071e4:	4648      	mov	r0, r9
 80071e6:	f000 f9d5 	bl	8007594 <__multadd>
 80071ea:	42af      	cmp	r7, r5
 80071ec:	9002      	str	r0, [sp, #8]
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	f04f 020a 	mov.w	r2, #10
 80071f6:	4639      	mov	r1, r7
 80071f8:	4648      	mov	r0, r9
 80071fa:	d107      	bne.n	800720c <_dtoa_r+0xadc>
 80071fc:	f000 f9ca 	bl	8007594 <__multadd>
 8007200:	4607      	mov	r7, r0
 8007202:	4605      	mov	r5, r0
 8007204:	9b00      	ldr	r3, [sp, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	e777      	b.n	80070fc <_dtoa_r+0x9cc>
 800720c:	f000 f9c2 	bl	8007594 <__multadd>
 8007210:	4629      	mov	r1, r5
 8007212:	4607      	mov	r7, r0
 8007214:	2300      	movs	r3, #0
 8007216:	220a      	movs	r2, #10
 8007218:	4648      	mov	r0, r9
 800721a:	f000 f9bb 	bl	8007594 <__multadd>
 800721e:	4605      	mov	r5, r0
 8007220:	e7f0      	b.n	8007204 <_dtoa_r+0xad4>
 8007222:	f1bb 0f00 	cmp.w	fp, #0
 8007226:	bfcc      	ite	gt
 8007228:	465e      	movgt	r6, fp
 800722a:	2601      	movle	r6, #1
 800722c:	4456      	add	r6, sl
 800722e:	2700      	movs	r7, #0
 8007230:	9902      	ldr	r1, [sp, #8]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	4648      	mov	r0, r9
 8007238:	f000 fb50 	bl	80078dc <__lshift>
 800723c:	4621      	mov	r1, r4
 800723e:	9002      	str	r0, [sp, #8]
 8007240:	f000 fbb8 	bl	80079b4 <__mcmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	dcb4      	bgt.n	80071b2 <_dtoa_r+0xa82>
 8007248:	d102      	bne.n	8007250 <_dtoa_r+0xb20>
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	07db      	lsls	r3, r3, #31
 800724e:	d4b0      	bmi.n	80071b2 <_dtoa_r+0xa82>
 8007250:	4633      	mov	r3, r6
 8007252:	461e      	mov	r6, r3
 8007254:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007258:	2a30      	cmp	r2, #48	@ 0x30
 800725a:	d0fa      	beq.n	8007252 <_dtoa_r+0xb22>
 800725c:	e4b5      	b.n	8006bca <_dtoa_r+0x49a>
 800725e:	459a      	cmp	sl, r3
 8007260:	d1a8      	bne.n	80071b4 <_dtoa_r+0xa84>
 8007262:	2331      	movs	r3, #49	@ 0x31
 8007264:	f108 0801 	add.w	r8, r8, #1
 8007268:	f88a 3000 	strb.w	r3, [sl]
 800726c:	e4ad      	b.n	8006bca <_dtoa_r+0x49a>
 800726e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007270:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80072cc <_dtoa_r+0xb9c>
 8007274:	b11b      	cbz	r3, 800727e <_dtoa_r+0xb4e>
 8007276:	f10a 0308 	add.w	r3, sl, #8
 800727a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	4650      	mov	r0, sl
 8007280:	b017      	add	sp, #92	@ 0x5c
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	9b07      	ldr	r3, [sp, #28]
 8007288:	2b01      	cmp	r3, #1
 800728a:	f77f ae2e 	ble.w	8006eea <_dtoa_r+0x7ba>
 800728e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007290:	9308      	str	r3, [sp, #32]
 8007292:	2001      	movs	r0, #1
 8007294:	e64d      	b.n	8006f32 <_dtoa_r+0x802>
 8007296:	f1bb 0f00 	cmp.w	fp, #0
 800729a:	f77f aed9 	ble.w	8007050 <_dtoa_r+0x920>
 800729e:	4656      	mov	r6, sl
 80072a0:	9802      	ldr	r0, [sp, #8]
 80072a2:	4621      	mov	r1, r4
 80072a4:	f7ff f9b9 	bl	800661a <quorem>
 80072a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80072ac:	f806 3b01 	strb.w	r3, [r6], #1
 80072b0:	eba6 020a 	sub.w	r2, r6, sl
 80072b4:	4593      	cmp	fp, r2
 80072b6:	ddb4      	ble.n	8007222 <_dtoa_r+0xaf2>
 80072b8:	9902      	ldr	r1, [sp, #8]
 80072ba:	2300      	movs	r3, #0
 80072bc:	220a      	movs	r2, #10
 80072be:	4648      	mov	r0, r9
 80072c0:	f000 f968 	bl	8007594 <__multadd>
 80072c4:	9002      	str	r0, [sp, #8]
 80072c6:	e7eb      	b.n	80072a0 <_dtoa_r+0xb70>
 80072c8:	08008958 	.word	0x08008958
 80072cc:	080088dc 	.word	0x080088dc

080072d0 <_free_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4605      	mov	r5, r0
 80072d4:	2900      	cmp	r1, #0
 80072d6:	d041      	beq.n	800735c <_free_r+0x8c>
 80072d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072dc:	1f0c      	subs	r4, r1, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bfb8      	it	lt
 80072e2:	18e4      	addlt	r4, r4, r3
 80072e4:	f000 f8e8 	bl	80074b8 <__malloc_lock>
 80072e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007360 <_free_r+0x90>)
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	b933      	cbnz	r3, 80072fc <_free_r+0x2c>
 80072ee:	6063      	str	r3, [r4, #4]
 80072f0:	6014      	str	r4, [r2, #0]
 80072f2:	4628      	mov	r0, r5
 80072f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f8:	f000 b8e4 	b.w	80074c4 <__malloc_unlock>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d908      	bls.n	8007312 <_free_r+0x42>
 8007300:	6820      	ldr	r0, [r4, #0]
 8007302:	1821      	adds	r1, r4, r0
 8007304:	428b      	cmp	r3, r1
 8007306:	bf01      	itttt	eq
 8007308:	6819      	ldreq	r1, [r3, #0]
 800730a:	685b      	ldreq	r3, [r3, #4]
 800730c:	1809      	addeq	r1, r1, r0
 800730e:	6021      	streq	r1, [r4, #0]
 8007310:	e7ed      	b.n	80072ee <_free_r+0x1e>
 8007312:	461a      	mov	r2, r3
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b10b      	cbz	r3, 800731c <_free_r+0x4c>
 8007318:	42a3      	cmp	r3, r4
 800731a:	d9fa      	bls.n	8007312 <_free_r+0x42>
 800731c:	6811      	ldr	r1, [r2, #0]
 800731e:	1850      	adds	r0, r2, r1
 8007320:	42a0      	cmp	r0, r4
 8007322:	d10b      	bne.n	800733c <_free_r+0x6c>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	4401      	add	r1, r0
 8007328:	1850      	adds	r0, r2, r1
 800732a:	4283      	cmp	r3, r0
 800732c:	6011      	str	r1, [r2, #0]
 800732e:	d1e0      	bne.n	80072f2 <_free_r+0x22>
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	6053      	str	r3, [r2, #4]
 8007336:	4408      	add	r0, r1
 8007338:	6010      	str	r0, [r2, #0]
 800733a:	e7da      	b.n	80072f2 <_free_r+0x22>
 800733c:	d902      	bls.n	8007344 <_free_r+0x74>
 800733e:	230c      	movs	r3, #12
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	e7d6      	b.n	80072f2 <_free_r+0x22>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	1821      	adds	r1, r4, r0
 8007348:	428b      	cmp	r3, r1
 800734a:	bf04      	itt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	6063      	str	r3, [r4, #4]
 8007352:	bf04      	itt	eq
 8007354:	1809      	addeq	r1, r1, r0
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	6054      	str	r4, [r2, #4]
 800735a:	e7ca      	b.n	80072f2 <_free_r+0x22>
 800735c:	bd38      	pop	{r3, r4, r5, pc}
 800735e:	bf00      	nop
 8007360:	20000550 	.word	0x20000550

08007364 <malloc>:
 8007364:	4b02      	ldr	r3, [pc, #8]	@ (8007370 <malloc+0xc>)
 8007366:	4601      	mov	r1, r0
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f000 b825 	b.w	80073b8 <_malloc_r>
 800736e:	bf00      	nop
 8007370:	20000028 	.word	0x20000028

08007374 <sbrk_aligned>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	4e0f      	ldr	r6, [pc, #60]	@ (80073b4 <sbrk_aligned+0x40>)
 8007378:	460c      	mov	r4, r1
 800737a:	6831      	ldr	r1, [r6, #0]
 800737c:	4605      	mov	r5, r0
 800737e:	b911      	cbnz	r1, 8007386 <sbrk_aligned+0x12>
 8007380:	f000 fe3e 	bl	8008000 <_sbrk_r>
 8007384:	6030      	str	r0, [r6, #0]
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fe39 	bl	8008000 <_sbrk_r>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	d103      	bne.n	800739a <sbrk_aligned+0x26>
 8007392:	f04f 34ff 	mov.w	r4, #4294967295
 8007396:	4620      	mov	r0, r4
 8007398:	bd70      	pop	{r4, r5, r6, pc}
 800739a:	1cc4      	adds	r4, r0, #3
 800739c:	f024 0403 	bic.w	r4, r4, #3
 80073a0:	42a0      	cmp	r0, r4
 80073a2:	d0f8      	beq.n	8007396 <sbrk_aligned+0x22>
 80073a4:	1a21      	subs	r1, r4, r0
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 fe2a 	bl	8008000 <_sbrk_r>
 80073ac:	3001      	adds	r0, #1
 80073ae:	d1f2      	bne.n	8007396 <sbrk_aligned+0x22>
 80073b0:	e7ef      	b.n	8007392 <sbrk_aligned+0x1e>
 80073b2:	bf00      	nop
 80073b4:	2000054c 	.word	0x2000054c

080073b8 <_malloc_r>:
 80073b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073bc:	1ccd      	adds	r5, r1, #3
 80073be:	f025 0503 	bic.w	r5, r5, #3
 80073c2:	3508      	adds	r5, #8
 80073c4:	2d0c      	cmp	r5, #12
 80073c6:	bf38      	it	cc
 80073c8:	250c      	movcc	r5, #12
 80073ca:	2d00      	cmp	r5, #0
 80073cc:	4606      	mov	r6, r0
 80073ce:	db01      	blt.n	80073d4 <_malloc_r+0x1c>
 80073d0:	42a9      	cmp	r1, r5
 80073d2:	d904      	bls.n	80073de <_malloc_r+0x26>
 80073d4:	230c      	movs	r3, #12
 80073d6:	6033      	str	r3, [r6, #0]
 80073d8:	2000      	movs	r0, #0
 80073da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074b4 <_malloc_r+0xfc>
 80073e2:	f000 f869 	bl	80074b8 <__malloc_lock>
 80073e6:	f8d8 3000 	ldr.w	r3, [r8]
 80073ea:	461c      	mov	r4, r3
 80073ec:	bb44      	cbnz	r4, 8007440 <_malloc_r+0x88>
 80073ee:	4629      	mov	r1, r5
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff ffbf 	bl	8007374 <sbrk_aligned>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	4604      	mov	r4, r0
 80073fa:	d158      	bne.n	80074ae <_malloc_r+0xf6>
 80073fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007400:	4627      	mov	r7, r4
 8007402:	2f00      	cmp	r7, #0
 8007404:	d143      	bne.n	800748e <_malloc_r+0xd6>
 8007406:	2c00      	cmp	r4, #0
 8007408:	d04b      	beq.n	80074a2 <_malloc_r+0xea>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	4639      	mov	r1, r7
 800740e:	4630      	mov	r0, r6
 8007410:	eb04 0903 	add.w	r9, r4, r3
 8007414:	f000 fdf4 	bl	8008000 <_sbrk_r>
 8007418:	4581      	cmp	r9, r0
 800741a:	d142      	bne.n	80074a2 <_malloc_r+0xea>
 800741c:	6821      	ldr	r1, [r4, #0]
 800741e:	1a6d      	subs	r5, r5, r1
 8007420:	4629      	mov	r1, r5
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff ffa6 	bl	8007374 <sbrk_aligned>
 8007428:	3001      	adds	r0, #1
 800742a:	d03a      	beq.n	80074a2 <_malloc_r+0xea>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	442b      	add	r3, r5
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	f8d8 3000 	ldr.w	r3, [r8]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	bb62      	cbnz	r2, 8007494 <_malloc_r+0xdc>
 800743a:	f8c8 7000 	str.w	r7, [r8]
 800743e:	e00f      	b.n	8007460 <_malloc_r+0xa8>
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	1b52      	subs	r2, r2, r5
 8007444:	d420      	bmi.n	8007488 <_malloc_r+0xd0>
 8007446:	2a0b      	cmp	r2, #11
 8007448:	d917      	bls.n	800747a <_malloc_r+0xc2>
 800744a:	1961      	adds	r1, r4, r5
 800744c:	42a3      	cmp	r3, r4
 800744e:	6025      	str	r5, [r4, #0]
 8007450:	bf18      	it	ne
 8007452:	6059      	strne	r1, [r3, #4]
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	bf08      	it	eq
 8007458:	f8c8 1000 	streq.w	r1, [r8]
 800745c:	5162      	str	r2, [r4, r5]
 800745e:	604b      	str	r3, [r1, #4]
 8007460:	4630      	mov	r0, r6
 8007462:	f000 f82f 	bl	80074c4 <__malloc_unlock>
 8007466:	f104 000b 	add.w	r0, r4, #11
 800746a:	1d23      	adds	r3, r4, #4
 800746c:	f020 0007 	bic.w	r0, r0, #7
 8007470:	1ac2      	subs	r2, r0, r3
 8007472:	bf1c      	itt	ne
 8007474:	1a1b      	subne	r3, r3, r0
 8007476:	50a3      	strne	r3, [r4, r2]
 8007478:	e7af      	b.n	80073da <_malloc_r+0x22>
 800747a:	6862      	ldr	r2, [r4, #4]
 800747c:	42a3      	cmp	r3, r4
 800747e:	bf0c      	ite	eq
 8007480:	f8c8 2000 	streq.w	r2, [r8]
 8007484:	605a      	strne	r2, [r3, #4]
 8007486:	e7eb      	b.n	8007460 <_malloc_r+0xa8>
 8007488:	4623      	mov	r3, r4
 800748a:	6864      	ldr	r4, [r4, #4]
 800748c:	e7ae      	b.n	80073ec <_malloc_r+0x34>
 800748e:	463c      	mov	r4, r7
 8007490:	687f      	ldr	r7, [r7, #4]
 8007492:	e7b6      	b.n	8007402 <_malloc_r+0x4a>
 8007494:	461a      	mov	r2, r3
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	42a3      	cmp	r3, r4
 800749a:	d1fb      	bne.n	8007494 <_malloc_r+0xdc>
 800749c:	2300      	movs	r3, #0
 800749e:	6053      	str	r3, [r2, #4]
 80074a0:	e7de      	b.n	8007460 <_malloc_r+0xa8>
 80074a2:	230c      	movs	r3, #12
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	4630      	mov	r0, r6
 80074a8:	f000 f80c 	bl	80074c4 <__malloc_unlock>
 80074ac:	e794      	b.n	80073d8 <_malloc_r+0x20>
 80074ae:	6005      	str	r5, [r0, #0]
 80074b0:	e7d6      	b.n	8007460 <_malloc_r+0xa8>
 80074b2:	bf00      	nop
 80074b4:	20000550 	.word	0x20000550

080074b8 <__malloc_lock>:
 80074b8:	4801      	ldr	r0, [pc, #4]	@ (80074c0 <__malloc_lock+0x8>)
 80074ba:	f7ff b8ac 	b.w	8006616 <__retarget_lock_acquire_recursive>
 80074be:	bf00      	nop
 80074c0:	20000548 	.word	0x20000548

080074c4 <__malloc_unlock>:
 80074c4:	4801      	ldr	r0, [pc, #4]	@ (80074cc <__malloc_unlock+0x8>)
 80074c6:	f7ff b8a7 	b.w	8006618 <__retarget_lock_release_recursive>
 80074ca:	bf00      	nop
 80074cc:	20000548 	.word	0x20000548

080074d0 <_Balloc>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	69c6      	ldr	r6, [r0, #28]
 80074d4:	4604      	mov	r4, r0
 80074d6:	460d      	mov	r5, r1
 80074d8:	b976      	cbnz	r6, 80074f8 <_Balloc+0x28>
 80074da:	2010      	movs	r0, #16
 80074dc:	f7ff ff42 	bl	8007364 <malloc>
 80074e0:	4602      	mov	r2, r0
 80074e2:	61e0      	str	r0, [r4, #28]
 80074e4:	b920      	cbnz	r0, 80074f0 <_Balloc+0x20>
 80074e6:	4b18      	ldr	r3, [pc, #96]	@ (8007548 <_Balloc+0x78>)
 80074e8:	4818      	ldr	r0, [pc, #96]	@ (800754c <_Balloc+0x7c>)
 80074ea:	216b      	movs	r1, #107	@ 0x6b
 80074ec:	f000 fda6 	bl	800803c <__assert_func>
 80074f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074f4:	6006      	str	r6, [r0, #0]
 80074f6:	60c6      	str	r6, [r0, #12]
 80074f8:	69e6      	ldr	r6, [r4, #28]
 80074fa:	68f3      	ldr	r3, [r6, #12]
 80074fc:	b183      	cbz	r3, 8007520 <_Balloc+0x50>
 80074fe:	69e3      	ldr	r3, [r4, #28]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007506:	b9b8      	cbnz	r0, 8007538 <_Balloc+0x68>
 8007508:	2101      	movs	r1, #1
 800750a:	fa01 f605 	lsl.w	r6, r1, r5
 800750e:	1d72      	adds	r2, r6, #5
 8007510:	0092      	lsls	r2, r2, #2
 8007512:	4620      	mov	r0, r4
 8007514:	f000 fdb0 	bl	8008078 <_calloc_r>
 8007518:	b160      	cbz	r0, 8007534 <_Balloc+0x64>
 800751a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800751e:	e00e      	b.n	800753e <_Balloc+0x6e>
 8007520:	2221      	movs	r2, #33	@ 0x21
 8007522:	2104      	movs	r1, #4
 8007524:	4620      	mov	r0, r4
 8007526:	f000 fda7 	bl	8008078 <_calloc_r>
 800752a:	69e3      	ldr	r3, [r4, #28]
 800752c:	60f0      	str	r0, [r6, #12]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e4      	bne.n	80074fe <_Balloc+0x2e>
 8007534:	2000      	movs	r0, #0
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	6802      	ldr	r2, [r0, #0]
 800753a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800753e:	2300      	movs	r3, #0
 8007540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007544:	e7f7      	b.n	8007536 <_Balloc+0x66>
 8007546:	bf00      	nop
 8007548:	080088e9 	.word	0x080088e9
 800754c:	08008969 	.word	0x08008969

08007550 <_Bfree>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	69c6      	ldr	r6, [r0, #28]
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	b976      	cbnz	r6, 8007578 <_Bfree+0x28>
 800755a:	2010      	movs	r0, #16
 800755c:	f7ff ff02 	bl	8007364 <malloc>
 8007560:	4602      	mov	r2, r0
 8007562:	61e8      	str	r0, [r5, #28]
 8007564:	b920      	cbnz	r0, 8007570 <_Bfree+0x20>
 8007566:	4b09      	ldr	r3, [pc, #36]	@ (800758c <_Bfree+0x3c>)
 8007568:	4809      	ldr	r0, [pc, #36]	@ (8007590 <_Bfree+0x40>)
 800756a:	218f      	movs	r1, #143	@ 0x8f
 800756c:	f000 fd66 	bl	800803c <__assert_func>
 8007570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007574:	6006      	str	r6, [r0, #0]
 8007576:	60c6      	str	r6, [r0, #12]
 8007578:	b13c      	cbz	r4, 800758a <_Bfree+0x3a>
 800757a:	69eb      	ldr	r3, [r5, #28]
 800757c:	6862      	ldr	r2, [r4, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007584:	6021      	str	r1, [r4, #0]
 8007586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	080088e9 	.word	0x080088e9
 8007590:	08008969 	.word	0x08008969

08007594 <__multadd>:
 8007594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007598:	690d      	ldr	r5, [r1, #16]
 800759a:	4607      	mov	r7, r0
 800759c:	460c      	mov	r4, r1
 800759e:	461e      	mov	r6, r3
 80075a0:	f101 0c14 	add.w	ip, r1, #20
 80075a4:	2000      	movs	r0, #0
 80075a6:	f8dc 3000 	ldr.w	r3, [ip]
 80075aa:	b299      	uxth	r1, r3
 80075ac:	fb02 6101 	mla	r1, r2, r1, r6
 80075b0:	0c1e      	lsrs	r6, r3, #16
 80075b2:	0c0b      	lsrs	r3, r1, #16
 80075b4:	fb02 3306 	mla	r3, r2, r6, r3
 80075b8:	b289      	uxth	r1, r1
 80075ba:	3001      	adds	r0, #1
 80075bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075c0:	4285      	cmp	r5, r0
 80075c2:	f84c 1b04 	str.w	r1, [ip], #4
 80075c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075ca:	dcec      	bgt.n	80075a6 <__multadd+0x12>
 80075cc:	b30e      	cbz	r6, 8007612 <__multadd+0x7e>
 80075ce:	68a3      	ldr	r3, [r4, #8]
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	dc19      	bgt.n	8007608 <__multadd+0x74>
 80075d4:	6861      	ldr	r1, [r4, #4]
 80075d6:	4638      	mov	r0, r7
 80075d8:	3101      	adds	r1, #1
 80075da:	f7ff ff79 	bl	80074d0 <_Balloc>
 80075de:	4680      	mov	r8, r0
 80075e0:	b928      	cbnz	r0, 80075ee <__multadd+0x5a>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007618 <__multadd+0x84>)
 80075e6:	480d      	ldr	r0, [pc, #52]	@ (800761c <__multadd+0x88>)
 80075e8:	21ba      	movs	r1, #186	@ 0xba
 80075ea:	f000 fd27 	bl	800803c <__assert_func>
 80075ee:	6922      	ldr	r2, [r4, #16]
 80075f0:	3202      	adds	r2, #2
 80075f2:	f104 010c 	add.w	r1, r4, #12
 80075f6:	0092      	lsls	r2, r2, #2
 80075f8:	300c      	adds	r0, #12
 80075fa:	f000 fd11 	bl	8008020 <memcpy>
 80075fe:	4621      	mov	r1, r4
 8007600:	4638      	mov	r0, r7
 8007602:	f7ff ffa5 	bl	8007550 <_Bfree>
 8007606:	4644      	mov	r4, r8
 8007608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800760c:	3501      	adds	r5, #1
 800760e:	615e      	str	r6, [r3, #20]
 8007610:	6125      	str	r5, [r4, #16]
 8007612:	4620      	mov	r0, r4
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	08008958 	.word	0x08008958
 800761c:	08008969 	.word	0x08008969

08007620 <__hi0bits>:
 8007620:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007624:	4603      	mov	r3, r0
 8007626:	bf36      	itet	cc
 8007628:	0403      	lslcc	r3, r0, #16
 800762a:	2000      	movcs	r0, #0
 800762c:	2010      	movcc	r0, #16
 800762e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007632:	bf3c      	itt	cc
 8007634:	021b      	lslcc	r3, r3, #8
 8007636:	3008      	addcc	r0, #8
 8007638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800763c:	bf3c      	itt	cc
 800763e:	011b      	lslcc	r3, r3, #4
 8007640:	3004      	addcc	r0, #4
 8007642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007646:	bf3c      	itt	cc
 8007648:	009b      	lslcc	r3, r3, #2
 800764a:	3002      	addcc	r0, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	db05      	blt.n	800765c <__hi0bits+0x3c>
 8007650:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007654:	f100 0001 	add.w	r0, r0, #1
 8007658:	bf08      	it	eq
 800765a:	2020      	moveq	r0, #32
 800765c:	4770      	bx	lr

0800765e <__lo0bits>:
 800765e:	6803      	ldr	r3, [r0, #0]
 8007660:	4602      	mov	r2, r0
 8007662:	f013 0007 	ands.w	r0, r3, #7
 8007666:	d00b      	beq.n	8007680 <__lo0bits+0x22>
 8007668:	07d9      	lsls	r1, r3, #31
 800766a:	d421      	bmi.n	80076b0 <__lo0bits+0x52>
 800766c:	0798      	lsls	r0, r3, #30
 800766e:	bf49      	itett	mi
 8007670:	085b      	lsrmi	r3, r3, #1
 8007672:	089b      	lsrpl	r3, r3, #2
 8007674:	2001      	movmi	r0, #1
 8007676:	6013      	strmi	r3, [r2, #0]
 8007678:	bf5c      	itt	pl
 800767a:	6013      	strpl	r3, [r2, #0]
 800767c:	2002      	movpl	r0, #2
 800767e:	4770      	bx	lr
 8007680:	b299      	uxth	r1, r3
 8007682:	b909      	cbnz	r1, 8007688 <__lo0bits+0x2a>
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	2010      	movs	r0, #16
 8007688:	b2d9      	uxtb	r1, r3
 800768a:	b909      	cbnz	r1, 8007690 <__lo0bits+0x32>
 800768c:	3008      	adds	r0, #8
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	0719      	lsls	r1, r3, #28
 8007692:	bf04      	itt	eq
 8007694:	091b      	lsreq	r3, r3, #4
 8007696:	3004      	addeq	r0, #4
 8007698:	0799      	lsls	r1, r3, #30
 800769a:	bf04      	itt	eq
 800769c:	089b      	lsreq	r3, r3, #2
 800769e:	3002      	addeq	r0, #2
 80076a0:	07d9      	lsls	r1, r3, #31
 80076a2:	d403      	bmi.n	80076ac <__lo0bits+0x4e>
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	f100 0001 	add.w	r0, r0, #1
 80076aa:	d003      	beq.n	80076b4 <__lo0bits+0x56>
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	4770      	bx	lr
 80076b0:	2000      	movs	r0, #0
 80076b2:	4770      	bx	lr
 80076b4:	2020      	movs	r0, #32
 80076b6:	4770      	bx	lr

080076b8 <__i2b>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	460c      	mov	r4, r1
 80076bc:	2101      	movs	r1, #1
 80076be:	f7ff ff07 	bl	80074d0 <_Balloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	b928      	cbnz	r0, 80076d2 <__i2b+0x1a>
 80076c6:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <__i2b+0x24>)
 80076c8:	4805      	ldr	r0, [pc, #20]	@ (80076e0 <__i2b+0x28>)
 80076ca:	f240 1145 	movw	r1, #325	@ 0x145
 80076ce:	f000 fcb5 	bl	800803c <__assert_func>
 80076d2:	2301      	movs	r3, #1
 80076d4:	6144      	str	r4, [r0, #20]
 80076d6:	6103      	str	r3, [r0, #16]
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	08008958 	.word	0x08008958
 80076e0:	08008969 	.word	0x08008969

080076e4 <__multiply>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4617      	mov	r7, r2
 80076ea:	690a      	ldr	r2, [r1, #16]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	bfa8      	it	ge
 80076f2:	463b      	movge	r3, r7
 80076f4:	4689      	mov	r9, r1
 80076f6:	bfa4      	itt	ge
 80076f8:	460f      	movge	r7, r1
 80076fa:	4699      	movge	r9, r3
 80076fc:	693d      	ldr	r5, [r7, #16]
 80076fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	eb05 060a 	add.w	r6, r5, sl
 800770a:	42b3      	cmp	r3, r6
 800770c:	b085      	sub	sp, #20
 800770e:	bfb8      	it	lt
 8007710:	3101      	addlt	r1, #1
 8007712:	f7ff fedd 	bl	80074d0 <_Balloc>
 8007716:	b930      	cbnz	r0, 8007726 <__multiply+0x42>
 8007718:	4602      	mov	r2, r0
 800771a:	4b41      	ldr	r3, [pc, #260]	@ (8007820 <__multiply+0x13c>)
 800771c:	4841      	ldr	r0, [pc, #260]	@ (8007824 <__multiply+0x140>)
 800771e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007722:	f000 fc8b 	bl	800803c <__assert_func>
 8007726:	f100 0414 	add.w	r4, r0, #20
 800772a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800772e:	4623      	mov	r3, r4
 8007730:	2200      	movs	r2, #0
 8007732:	4573      	cmp	r3, lr
 8007734:	d320      	bcc.n	8007778 <__multiply+0x94>
 8007736:	f107 0814 	add.w	r8, r7, #20
 800773a:	f109 0114 	add.w	r1, r9, #20
 800773e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007742:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007746:	9302      	str	r3, [sp, #8]
 8007748:	1beb      	subs	r3, r5, r7
 800774a:	3b15      	subs	r3, #21
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	3304      	adds	r3, #4
 8007752:	3715      	adds	r7, #21
 8007754:	42bd      	cmp	r5, r7
 8007756:	bf38      	it	cc
 8007758:	2304      	movcc	r3, #4
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	9b02      	ldr	r3, [sp, #8]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	428b      	cmp	r3, r1
 8007762:	d80c      	bhi.n	800777e <__multiply+0x9a>
 8007764:	2e00      	cmp	r6, #0
 8007766:	dd03      	ble.n	8007770 <__multiply+0x8c>
 8007768:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800776c:	2b00      	cmp	r3, #0
 800776e:	d055      	beq.n	800781c <__multiply+0x138>
 8007770:	6106      	str	r6, [r0, #16]
 8007772:	b005      	add	sp, #20
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	f843 2b04 	str.w	r2, [r3], #4
 800777c:	e7d9      	b.n	8007732 <__multiply+0x4e>
 800777e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007782:	f1ba 0f00 	cmp.w	sl, #0
 8007786:	d01f      	beq.n	80077c8 <__multiply+0xe4>
 8007788:	46c4      	mov	ip, r8
 800778a:	46a1      	mov	r9, r4
 800778c:	2700      	movs	r7, #0
 800778e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007792:	f8d9 3000 	ldr.w	r3, [r9]
 8007796:	fa1f fb82 	uxth.w	fp, r2
 800779a:	b29b      	uxth	r3, r3
 800779c:	fb0a 330b 	mla	r3, sl, fp, r3
 80077a0:	443b      	add	r3, r7
 80077a2:	f8d9 7000 	ldr.w	r7, [r9]
 80077a6:	0c12      	lsrs	r2, r2, #16
 80077a8:	0c3f      	lsrs	r7, r7, #16
 80077aa:	fb0a 7202 	mla	r2, sl, r2, r7
 80077ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b8:	4565      	cmp	r5, ip
 80077ba:	f849 3b04 	str.w	r3, [r9], #4
 80077be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80077c2:	d8e4      	bhi.n	800778e <__multiply+0xaa>
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	50e7      	str	r7, [r4, r3]
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077ce:	3104      	adds	r1, #4
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	d020      	beq.n	8007818 <__multiply+0x134>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	4647      	mov	r7, r8
 80077da:	46a4      	mov	ip, r4
 80077dc:	f04f 0a00 	mov.w	sl, #0
 80077e0:	f8b7 b000 	ldrh.w	fp, [r7]
 80077e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80077e8:	fb09 220b 	mla	r2, r9, fp, r2
 80077ec:	4452      	add	r2, sl
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077f4:	f84c 3b04 	str.w	r3, [ip], #4
 80077f8:	f857 3b04 	ldr.w	r3, [r7], #4
 80077fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007800:	f8bc 3000 	ldrh.w	r3, [ip]
 8007804:	fb09 330a 	mla	r3, r9, sl, r3
 8007808:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800780c:	42bd      	cmp	r5, r7
 800780e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007812:	d8e5      	bhi.n	80077e0 <__multiply+0xfc>
 8007814:	9a01      	ldr	r2, [sp, #4]
 8007816:	50a3      	str	r3, [r4, r2]
 8007818:	3404      	adds	r4, #4
 800781a:	e79f      	b.n	800775c <__multiply+0x78>
 800781c:	3e01      	subs	r6, #1
 800781e:	e7a1      	b.n	8007764 <__multiply+0x80>
 8007820:	08008958 	.word	0x08008958
 8007824:	08008969 	.word	0x08008969

08007828 <__pow5mult>:
 8007828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800782c:	4615      	mov	r5, r2
 800782e:	f012 0203 	ands.w	r2, r2, #3
 8007832:	4607      	mov	r7, r0
 8007834:	460e      	mov	r6, r1
 8007836:	d007      	beq.n	8007848 <__pow5mult+0x20>
 8007838:	4c25      	ldr	r4, [pc, #148]	@ (80078d0 <__pow5mult+0xa8>)
 800783a:	3a01      	subs	r2, #1
 800783c:	2300      	movs	r3, #0
 800783e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007842:	f7ff fea7 	bl	8007594 <__multadd>
 8007846:	4606      	mov	r6, r0
 8007848:	10ad      	asrs	r5, r5, #2
 800784a:	d03d      	beq.n	80078c8 <__pow5mult+0xa0>
 800784c:	69fc      	ldr	r4, [r7, #28]
 800784e:	b97c      	cbnz	r4, 8007870 <__pow5mult+0x48>
 8007850:	2010      	movs	r0, #16
 8007852:	f7ff fd87 	bl	8007364 <malloc>
 8007856:	4602      	mov	r2, r0
 8007858:	61f8      	str	r0, [r7, #28]
 800785a:	b928      	cbnz	r0, 8007868 <__pow5mult+0x40>
 800785c:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <__pow5mult+0xac>)
 800785e:	481e      	ldr	r0, [pc, #120]	@ (80078d8 <__pow5mult+0xb0>)
 8007860:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007864:	f000 fbea 	bl	800803c <__assert_func>
 8007868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800786c:	6004      	str	r4, [r0, #0]
 800786e:	60c4      	str	r4, [r0, #12]
 8007870:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007878:	b94c      	cbnz	r4, 800788e <__pow5mult+0x66>
 800787a:	f240 2171 	movw	r1, #625	@ 0x271
 800787e:	4638      	mov	r0, r7
 8007880:	f7ff ff1a 	bl	80076b8 <__i2b>
 8007884:	2300      	movs	r3, #0
 8007886:	f8c8 0008 	str.w	r0, [r8, #8]
 800788a:	4604      	mov	r4, r0
 800788c:	6003      	str	r3, [r0, #0]
 800788e:	f04f 0900 	mov.w	r9, #0
 8007892:	07eb      	lsls	r3, r5, #31
 8007894:	d50a      	bpl.n	80078ac <__pow5mult+0x84>
 8007896:	4631      	mov	r1, r6
 8007898:	4622      	mov	r2, r4
 800789a:	4638      	mov	r0, r7
 800789c:	f7ff ff22 	bl	80076e4 <__multiply>
 80078a0:	4631      	mov	r1, r6
 80078a2:	4680      	mov	r8, r0
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff fe53 	bl	8007550 <_Bfree>
 80078aa:	4646      	mov	r6, r8
 80078ac:	106d      	asrs	r5, r5, #1
 80078ae:	d00b      	beq.n	80078c8 <__pow5mult+0xa0>
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	b938      	cbnz	r0, 80078c4 <__pow5mult+0x9c>
 80078b4:	4622      	mov	r2, r4
 80078b6:	4621      	mov	r1, r4
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ff13 	bl	80076e4 <__multiply>
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	f8c0 9000 	str.w	r9, [r0]
 80078c4:	4604      	mov	r4, r0
 80078c6:	e7e4      	b.n	8007892 <__pow5mult+0x6a>
 80078c8:	4630      	mov	r0, r6
 80078ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ce:	bf00      	nop
 80078d0:	08008a1c 	.word	0x08008a1c
 80078d4:	080088e9 	.word	0x080088e9
 80078d8:	08008969 	.word	0x08008969

080078dc <__lshift>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	460c      	mov	r4, r1
 80078e2:	6849      	ldr	r1, [r1, #4]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ea:	68a3      	ldr	r3, [r4, #8]
 80078ec:	4607      	mov	r7, r0
 80078ee:	4691      	mov	r9, r2
 80078f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078f4:	f108 0601 	add.w	r6, r8, #1
 80078f8:	42b3      	cmp	r3, r6
 80078fa:	db0b      	blt.n	8007914 <__lshift+0x38>
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff fde7 	bl	80074d0 <_Balloc>
 8007902:	4605      	mov	r5, r0
 8007904:	b948      	cbnz	r0, 800791a <__lshift+0x3e>
 8007906:	4602      	mov	r2, r0
 8007908:	4b28      	ldr	r3, [pc, #160]	@ (80079ac <__lshift+0xd0>)
 800790a:	4829      	ldr	r0, [pc, #164]	@ (80079b0 <__lshift+0xd4>)
 800790c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007910:	f000 fb94 	bl	800803c <__assert_func>
 8007914:	3101      	adds	r1, #1
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	e7ee      	b.n	80078f8 <__lshift+0x1c>
 800791a:	2300      	movs	r3, #0
 800791c:	f100 0114 	add.w	r1, r0, #20
 8007920:	f100 0210 	add.w	r2, r0, #16
 8007924:	4618      	mov	r0, r3
 8007926:	4553      	cmp	r3, sl
 8007928:	db33      	blt.n	8007992 <__lshift+0xb6>
 800792a:	6920      	ldr	r0, [r4, #16]
 800792c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007930:	f104 0314 	add.w	r3, r4, #20
 8007934:	f019 091f 	ands.w	r9, r9, #31
 8007938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800793c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007940:	d02b      	beq.n	800799a <__lshift+0xbe>
 8007942:	f1c9 0e20 	rsb	lr, r9, #32
 8007946:	468a      	mov	sl, r1
 8007948:	2200      	movs	r2, #0
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	fa00 f009 	lsl.w	r0, r0, r9
 8007950:	4310      	orrs	r0, r2
 8007952:	f84a 0b04 	str.w	r0, [sl], #4
 8007956:	f853 2b04 	ldr.w	r2, [r3], #4
 800795a:	459c      	cmp	ip, r3
 800795c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007960:	d8f3      	bhi.n	800794a <__lshift+0x6e>
 8007962:	ebac 0304 	sub.w	r3, ip, r4
 8007966:	3b15      	subs	r3, #21
 8007968:	f023 0303 	bic.w	r3, r3, #3
 800796c:	3304      	adds	r3, #4
 800796e:	f104 0015 	add.w	r0, r4, #21
 8007972:	4560      	cmp	r0, ip
 8007974:	bf88      	it	hi
 8007976:	2304      	movhi	r3, #4
 8007978:	50ca      	str	r2, [r1, r3]
 800797a:	b10a      	cbz	r2, 8007980 <__lshift+0xa4>
 800797c:	f108 0602 	add.w	r6, r8, #2
 8007980:	3e01      	subs	r6, #1
 8007982:	4638      	mov	r0, r7
 8007984:	612e      	str	r6, [r5, #16]
 8007986:	4621      	mov	r1, r4
 8007988:	f7ff fde2 	bl	8007550 <_Bfree>
 800798c:	4628      	mov	r0, r5
 800798e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007992:	f842 0f04 	str.w	r0, [r2, #4]!
 8007996:	3301      	adds	r3, #1
 8007998:	e7c5      	b.n	8007926 <__lshift+0x4a>
 800799a:	3904      	subs	r1, #4
 800799c:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80079a4:	459c      	cmp	ip, r3
 80079a6:	d8f9      	bhi.n	800799c <__lshift+0xc0>
 80079a8:	e7ea      	b.n	8007980 <__lshift+0xa4>
 80079aa:	bf00      	nop
 80079ac:	08008958 	.word	0x08008958
 80079b0:	08008969 	.word	0x08008969

080079b4 <__mcmp>:
 80079b4:	690a      	ldr	r2, [r1, #16]
 80079b6:	4603      	mov	r3, r0
 80079b8:	6900      	ldr	r0, [r0, #16]
 80079ba:	1a80      	subs	r0, r0, r2
 80079bc:	b530      	push	{r4, r5, lr}
 80079be:	d10e      	bne.n	80079de <__mcmp+0x2a>
 80079c0:	3314      	adds	r3, #20
 80079c2:	3114      	adds	r1, #20
 80079c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079d4:	4295      	cmp	r5, r2
 80079d6:	d003      	beq.n	80079e0 <__mcmp+0x2c>
 80079d8:	d205      	bcs.n	80079e6 <__mcmp+0x32>
 80079da:	f04f 30ff 	mov.w	r0, #4294967295
 80079de:	bd30      	pop	{r4, r5, pc}
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d3f3      	bcc.n	80079cc <__mcmp+0x18>
 80079e4:	e7fb      	b.n	80079de <__mcmp+0x2a>
 80079e6:	2001      	movs	r0, #1
 80079e8:	e7f9      	b.n	80079de <__mcmp+0x2a>
	...

080079ec <__mdiff>:
 80079ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	4689      	mov	r9, r1
 80079f2:	4606      	mov	r6, r0
 80079f4:	4611      	mov	r1, r2
 80079f6:	4648      	mov	r0, r9
 80079f8:	4614      	mov	r4, r2
 80079fa:	f7ff ffdb 	bl	80079b4 <__mcmp>
 80079fe:	1e05      	subs	r5, r0, #0
 8007a00:	d112      	bne.n	8007a28 <__mdiff+0x3c>
 8007a02:	4629      	mov	r1, r5
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7ff fd63 	bl	80074d0 <_Balloc>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	b928      	cbnz	r0, 8007a1a <__mdiff+0x2e>
 8007a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8007b0c <__mdiff+0x120>)
 8007a10:	f240 2137 	movw	r1, #567	@ 0x237
 8007a14:	483e      	ldr	r0, [pc, #248]	@ (8007b10 <__mdiff+0x124>)
 8007a16:	f000 fb11 	bl	800803c <__assert_func>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a20:	4610      	mov	r0, r2
 8007a22:	b003      	add	sp, #12
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	bfbc      	itt	lt
 8007a2a:	464b      	movlt	r3, r9
 8007a2c:	46a1      	movlt	r9, r4
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a34:	bfba      	itte	lt
 8007a36:	461c      	movlt	r4, r3
 8007a38:	2501      	movlt	r5, #1
 8007a3a:	2500      	movge	r5, #0
 8007a3c:	f7ff fd48 	bl	80074d0 <_Balloc>
 8007a40:	4602      	mov	r2, r0
 8007a42:	b918      	cbnz	r0, 8007a4c <__mdiff+0x60>
 8007a44:	4b31      	ldr	r3, [pc, #196]	@ (8007b0c <__mdiff+0x120>)
 8007a46:	f240 2145 	movw	r1, #581	@ 0x245
 8007a4a:	e7e3      	b.n	8007a14 <__mdiff+0x28>
 8007a4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a50:	6926      	ldr	r6, [r4, #16]
 8007a52:	60c5      	str	r5, [r0, #12]
 8007a54:	f109 0310 	add.w	r3, r9, #16
 8007a58:	f109 0514 	add.w	r5, r9, #20
 8007a5c:	f104 0e14 	add.w	lr, r4, #20
 8007a60:	f100 0b14 	add.w	fp, r0, #20
 8007a64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	46d9      	mov	r9, fp
 8007a70:	f04f 0c00 	mov.w	ip, #0
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	fa1f f38a 	uxth.w	r3, sl
 8007a84:	4619      	mov	r1, r3
 8007a86:	b283      	uxth	r3, r0
 8007a88:	1acb      	subs	r3, r1, r3
 8007a8a:	0c00      	lsrs	r0, r0, #16
 8007a8c:	4463      	add	r3, ip
 8007a8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a9c:	4576      	cmp	r6, lr
 8007a9e:	f849 3b04 	str.w	r3, [r9], #4
 8007aa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007aa6:	d8e5      	bhi.n	8007a74 <__mdiff+0x88>
 8007aa8:	1b33      	subs	r3, r6, r4
 8007aaa:	3b15      	subs	r3, #21
 8007aac:	f023 0303 	bic.w	r3, r3, #3
 8007ab0:	3415      	adds	r4, #21
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	42a6      	cmp	r6, r4
 8007ab6:	bf38      	it	cc
 8007ab8:	2304      	movcc	r3, #4
 8007aba:	441d      	add	r5, r3
 8007abc:	445b      	add	r3, fp
 8007abe:	461e      	mov	r6, r3
 8007ac0:	462c      	mov	r4, r5
 8007ac2:	4544      	cmp	r4, r8
 8007ac4:	d30e      	bcc.n	8007ae4 <__mdiff+0xf8>
 8007ac6:	f108 0103 	add.w	r1, r8, #3
 8007aca:	1b49      	subs	r1, r1, r5
 8007acc:	f021 0103 	bic.w	r1, r1, #3
 8007ad0:	3d03      	subs	r5, #3
 8007ad2:	45a8      	cmp	r8, r5
 8007ad4:	bf38      	it	cc
 8007ad6:	2100      	movcc	r1, #0
 8007ad8:	440b      	add	r3, r1
 8007ada:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ade:	b191      	cbz	r1, 8007b06 <__mdiff+0x11a>
 8007ae0:	6117      	str	r7, [r2, #16]
 8007ae2:	e79d      	b.n	8007a20 <__mdiff+0x34>
 8007ae4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ae8:	46e6      	mov	lr, ip
 8007aea:	0c08      	lsrs	r0, r1, #16
 8007aec:	fa1c fc81 	uxtah	ip, ip, r1
 8007af0:	4471      	add	r1, lr
 8007af2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007af6:	b289      	uxth	r1, r1
 8007af8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007afc:	f846 1b04 	str.w	r1, [r6], #4
 8007b00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b04:	e7dd      	b.n	8007ac2 <__mdiff+0xd6>
 8007b06:	3f01      	subs	r7, #1
 8007b08:	e7e7      	b.n	8007ada <__mdiff+0xee>
 8007b0a:	bf00      	nop
 8007b0c:	08008958 	.word	0x08008958
 8007b10:	08008969 	.word	0x08008969

08007b14 <__d2b>:
 8007b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	460f      	mov	r7, r1
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	ec59 8b10 	vmov	r8, r9, d0
 8007b20:	4616      	mov	r6, r2
 8007b22:	f7ff fcd5 	bl	80074d0 <_Balloc>
 8007b26:	4604      	mov	r4, r0
 8007b28:	b930      	cbnz	r0, 8007b38 <__d2b+0x24>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b23      	ldr	r3, [pc, #140]	@ (8007bbc <__d2b+0xa8>)
 8007b2e:	4824      	ldr	r0, [pc, #144]	@ (8007bc0 <__d2b+0xac>)
 8007b30:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b34:	f000 fa82 	bl	800803c <__assert_func>
 8007b38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b40:	b10d      	cbz	r5, 8007b46 <__d2b+0x32>
 8007b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	f1b8 0300 	subs.w	r3, r8, #0
 8007b4c:	d023      	beq.n	8007b96 <__d2b+0x82>
 8007b4e:	4668      	mov	r0, sp
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	f7ff fd84 	bl	800765e <__lo0bits>
 8007b56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b5a:	b1d0      	cbz	r0, 8007b92 <__d2b+0x7e>
 8007b5c:	f1c0 0320 	rsb	r3, r0, #32
 8007b60:	fa02 f303 	lsl.w	r3, r2, r3
 8007b64:	430b      	orrs	r3, r1
 8007b66:	40c2      	lsrs	r2, r0
 8007b68:	6163      	str	r3, [r4, #20]
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	61a3      	str	r3, [r4, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bf0c      	ite	eq
 8007b74:	2201      	moveq	r2, #1
 8007b76:	2202      	movne	r2, #2
 8007b78:	6122      	str	r2, [r4, #16]
 8007b7a:	b1a5      	cbz	r5, 8007ba6 <__d2b+0x92>
 8007b7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b80:	4405      	add	r5, r0
 8007b82:	603d      	str	r5, [r7, #0]
 8007b84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b88:	6030      	str	r0, [r6, #0]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	b003      	add	sp, #12
 8007b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b92:	6161      	str	r1, [r4, #20]
 8007b94:	e7ea      	b.n	8007b6c <__d2b+0x58>
 8007b96:	a801      	add	r0, sp, #4
 8007b98:	f7ff fd61 	bl	800765e <__lo0bits>
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	6163      	str	r3, [r4, #20]
 8007ba0:	3020      	adds	r0, #32
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	e7e8      	b.n	8007b78 <__d2b+0x64>
 8007ba6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007baa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bae:	6038      	str	r0, [r7, #0]
 8007bb0:	6918      	ldr	r0, [r3, #16]
 8007bb2:	f7ff fd35 	bl	8007620 <__hi0bits>
 8007bb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bba:	e7e5      	b.n	8007b88 <__d2b+0x74>
 8007bbc:	08008958 	.word	0x08008958
 8007bc0:	08008969 	.word	0x08008969

08007bc4 <__ssputs_r>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	688e      	ldr	r6, [r1, #8]
 8007bca:	461f      	mov	r7, r3
 8007bcc:	42be      	cmp	r6, r7
 8007bce:	680b      	ldr	r3, [r1, #0]
 8007bd0:	4682      	mov	sl, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	4690      	mov	r8, r2
 8007bd6:	d82d      	bhi.n	8007c34 <__ssputs_r+0x70>
 8007bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007be0:	d026      	beq.n	8007c30 <__ssputs_r+0x6c>
 8007be2:	6965      	ldr	r5, [r4, #20]
 8007be4:	6909      	ldr	r1, [r1, #16]
 8007be6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bea:	eba3 0901 	sub.w	r9, r3, r1
 8007bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bf2:	1c7b      	adds	r3, r7, #1
 8007bf4:	444b      	add	r3, r9
 8007bf6:	106d      	asrs	r5, r5, #1
 8007bf8:	429d      	cmp	r5, r3
 8007bfa:	bf38      	it	cc
 8007bfc:	461d      	movcc	r5, r3
 8007bfe:	0553      	lsls	r3, r2, #21
 8007c00:	d527      	bpl.n	8007c52 <__ssputs_r+0x8e>
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7ff fbd8 	bl	80073b8 <_malloc_r>
 8007c08:	4606      	mov	r6, r0
 8007c0a:	b360      	cbz	r0, 8007c66 <__ssputs_r+0xa2>
 8007c0c:	6921      	ldr	r1, [r4, #16]
 8007c0e:	464a      	mov	r2, r9
 8007c10:	f000 fa06 	bl	8008020 <memcpy>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	6126      	str	r6, [r4, #16]
 8007c22:	6165      	str	r5, [r4, #20]
 8007c24:	444e      	add	r6, r9
 8007c26:	eba5 0509 	sub.w	r5, r5, r9
 8007c2a:	6026      	str	r6, [r4, #0]
 8007c2c:	60a5      	str	r5, [r4, #8]
 8007c2e:	463e      	mov	r6, r7
 8007c30:	42be      	cmp	r6, r7
 8007c32:	d900      	bls.n	8007c36 <__ssputs_r+0x72>
 8007c34:	463e      	mov	r6, r7
 8007c36:	6820      	ldr	r0, [r4, #0]
 8007c38:	4632      	mov	r2, r6
 8007c3a:	4641      	mov	r1, r8
 8007c3c:	f000 f9c6 	bl	8007fcc <memmove>
 8007c40:	68a3      	ldr	r3, [r4, #8]
 8007c42:	1b9b      	subs	r3, r3, r6
 8007c44:	60a3      	str	r3, [r4, #8]
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	4433      	add	r3, r6
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	462a      	mov	r2, r5
 8007c54:	f000 fa36 	bl	80080c4 <_realloc_r>
 8007c58:	4606      	mov	r6, r0
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d1e0      	bne.n	8007c20 <__ssputs_r+0x5c>
 8007c5e:	6921      	ldr	r1, [r4, #16]
 8007c60:	4650      	mov	r0, sl
 8007c62:	f7ff fb35 	bl	80072d0 <_free_r>
 8007c66:	230c      	movs	r3, #12
 8007c68:	f8ca 3000 	str.w	r3, [sl]
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e7e9      	b.n	8007c4e <__ssputs_r+0x8a>
	...

08007c7c <_svfiprintf_r>:
 8007c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	4698      	mov	r8, r3
 8007c82:	898b      	ldrh	r3, [r1, #12]
 8007c84:	061b      	lsls	r3, r3, #24
 8007c86:	b09d      	sub	sp, #116	@ 0x74
 8007c88:	4607      	mov	r7, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	d510      	bpl.n	8007cb2 <_svfiprintf_r+0x36>
 8007c90:	690b      	ldr	r3, [r1, #16]
 8007c92:	b973      	cbnz	r3, 8007cb2 <_svfiprintf_r+0x36>
 8007c94:	2140      	movs	r1, #64	@ 0x40
 8007c96:	f7ff fb8f 	bl	80073b8 <_malloc_r>
 8007c9a:	6028      	str	r0, [r5, #0]
 8007c9c:	6128      	str	r0, [r5, #16]
 8007c9e:	b930      	cbnz	r0, 8007cae <_svfiprintf_r+0x32>
 8007ca0:	230c      	movs	r3, #12
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	b01d      	add	sp, #116	@ 0x74
 8007caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cae:	2340      	movs	r3, #64	@ 0x40
 8007cb0:	616b      	str	r3, [r5, #20]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb6:	2320      	movs	r3, #32
 8007cb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cc0:	2330      	movs	r3, #48	@ 0x30
 8007cc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e60 <_svfiprintf_r+0x1e4>
 8007cc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cca:	f04f 0901 	mov.w	r9, #1
 8007cce:	4623      	mov	r3, r4
 8007cd0:	469a      	mov	sl, r3
 8007cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cd6:	b10a      	cbz	r2, 8007cdc <_svfiprintf_r+0x60>
 8007cd8:	2a25      	cmp	r2, #37	@ 0x25
 8007cda:	d1f9      	bne.n	8007cd0 <_svfiprintf_r+0x54>
 8007cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ce0:	d00b      	beq.n	8007cfa <_svfiprintf_r+0x7e>
 8007ce2:	465b      	mov	r3, fp
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7ff ff6b 	bl	8007bc4 <__ssputs_r>
 8007cee:	3001      	adds	r0, #1
 8007cf0:	f000 80a7 	beq.w	8007e42 <_svfiprintf_r+0x1c6>
 8007cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cf6:	445a      	add	r2, fp
 8007cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 809f 	beq.w	8007e42 <_svfiprintf_r+0x1c6>
 8007d04:	2300      	movs	r3, #0
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d0e:	f10a 0a01 	add.w	sl, sl, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	9307      	str	r3, [sp, #28]
 8007d16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d1c:	4654      	mov	r4, sl
 8007d1e:	2205      	movs	r2, #5
 8007d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d24:	484e      	ldr	r0, [pc, #312]	@ (8007e60 <_svfiprintf_r+0x1e4>)
 8007d26:	f7f8 fa53 	bl	80001d0 <memchr>
 8007d2a:	9a04      	ldr	r2, [sp, #16]
 8007d2c:	b9d8      	cbnz	r0, 8007d66 <_svfiprintf_r+0xea>
 8007d2e:	06d0      	lsls	r0, r2, #27
 8007d30:	bf44      	itt	mi
 8007d32:	2320      	movmi	r3, #32
 8007d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d38:	0711      	lsls	r1, r2, #28
 8007d3a:	bf44      	itt	mi
 8007d3c:	232b      	movmi	r3, #43	@ 0x2b
 8007d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d48:	d015      	beq.n	8007d76 <_svfiprintf_r+0xfa>
 8007d4a:	9a07      	ldr	r2, [sp, #28]
 8007d4c:	4654      	mov	r4, sl
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f04f 0c0a 	mov.w	ip, #10
 8007d54:	4621      	mov	r1, r4
 8007d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d5a:	3b30      	subs	r3, #48	@ 0x30
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d94b      	bls.n	8007df8 <_svfiprintf_r+0x17c>
 8007d60:	b1b0      	cbz	r0, 8007d90 <_svfiprintf_r+0x114>
 8007d62:	9207      	str	r2, [sp, #28]
 8007d64:	e014      	b.n	8007d90 <_svfiprintf_r+0x114>
 8007d66:	eba0 0308 	sub.w	r3, r0, r8
 8007d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	46a2      	mov	sl, r4
 8007d74:	e7d2      	b.n	8007d1c <_svfiprintf_r+0xa0>
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	1d19      	adds	r1, r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	9103      	str	r1, [sp, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bfbb      	ittet	lt
 8007d82:	425b      	neglt	r3, r3
 8007d84:	f042 0202 	orrlt.w	r2, r2, #2
 8007d88:	9307      	strge	r3, [sp, #28]
 8007d8a:	9307      	strlt	r3, [sp, #28]
 8007d8c:	bfb8      	it	lt
 8007d8e:	9204      	strlt	r2, [sp, #16]
 8007d90:	7823      	ldrb	r3, [r4, #0]
 8007d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d94:	d10a      	bne.n	8007dac <_svfiprintf_r+0x130>
 8007d96:	7863      	ldrb	r3, [r4, #1]
 8007d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d9a:	d132      	bne.n	8007e02 <_svfiprintf_r+0x186>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	1d1a      	adds	r2, r3, #4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	9203      	str	r2, [sp, #12]
 8007da4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007da8:	3402      	adds	r4, #2
 8007daa:	9305      	str	r3, [sp, #20]
 8007dac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e70 <_svfiprintf_r+0x1f4>
 8007db0:	7821      	ldrb	r1, [r4, #0]
 8007db2:	2203      	movs	r2, #3
 8007db4:	4650      	mov	r0, sl
 8007db6:	f7f8 fa0b 	bl	80001d0 <memchr>
 8007dba:	b138      	cbz	r0, 8007dcc <_svfiprintf_r+0x150>
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	eba0 000a 	sub.w	r0, r0, sl
 8007dc2:	2240      	movs	r2, #64	@ 0x40
 8007dc4:	4082      	lsls	r2, r0
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	3401      	adds	r4, #1
 8007dca:	9304      	str	r3, [sp, #16]
 8007dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd0:	4824      	ldr	r0, [pc, #144]	@ (8007e64 <_svfiprintf_r+0x1e8>)
 8007dd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dd6:	2206      	movs	r2, #6
 8007dd8:	f7f8 f9fa 	bl	80001d0 <memchr>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d036      	beq.n	8007e4e <_svfiprintf_r+0x1d2>
 8007de0:	4b21      	ldr	r3, [pc, #132]	@ (8007e68 <_svfiprintf_r+0x1ec>)
 8007de2:	bb1b      	cbnz	r3, 8007e2c <_svfiprintf_r+0x1b0>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	3307      	adds	r3, #7
 8007de8:	f023 0307 	bic.w	r3, r3, #7
 8007dec:	3308      	adds	r3, #8
 8007dee:	9303      	str	r3, [sp, #12]
 8007df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df2:	4433      	add	r3, r6
 8007df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df6:	e76a      	b.n	8007cce <_svfiprintf_r+0x52>
 8007df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	2001      	movs	r0, #1
 8007e00:	e7a8      	b.n	8007d54 <_svfiprintf_r+0xd8>
 8007e02:	2300      	movs	r3, #0
 8007e04:	3401      	adds	r4, #1
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f04f 0c0a 	mov.w	ip, #10
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e14:	3a30      	subs	r2, #48	@ 0x30
 8007e16:	2a09      	cmp	r2, #9
 8007e18:	d903      	bls.n	8007e22 <_svfiprintf_r+0x1a6>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0c6      	beq.n	8007dac <_svfiprintf_r+0x130>
 8007e1e:	9105      	str	r1, [sp, #20]
 8007e20:	e7c4      	b.n	8007dac <_svfiprintf_r+0x130>
 8007e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e26:	4604      	mov	r4, r0
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e7f0      	b.n	8007e0e <_svfiprintf_r+0x192>
 8007e2c:	ab03      	add	r3, sp, #12
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	462a      	mov	r2, r5
 8007e32:	4b0e      	ldr	r3, [pc, #56]	@ (8007e6c <_svfiprintf_r+0x1f0>)
 8007e34:	a904      	add	r1, sp, #16
 8007e36:	4638      	mov	r0, r7
 8007e38:	f7fd fe7e 	bl	8005b38 <_printf_float>
 8007e3c:	1c42      	adds	r2, r0, #1
 8007e3e:	4606      	mov	r6, r0
 8007e40:	d1d6      	bne.n	8007df0 <_svfiprintf_r+0x174>
 8007e42:	89ab      	ldrh	r3, [r5, #12]
 8007e44:	065b      	lsls	r3, r3, #25
 8007e46:	f53f af2d 	bmi.w	8007ca4 <_svfiprintf_r+0x28>
 8007e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e4c:	e72c      	b.n	8007ca8 <_svfiprintf_r+0x2c>
 8007e4e:	ab03      	add	r3, sp, #12
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	462a      	mov	r2, r5
 8007e54:	4b05      	ldr	r3, [pc, #20]	@ (8007e6c <_svfiprintf_r+0x1f0>)
 8007e56:	a904      	add	r1, sp, #16
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7fe f905 	bl	8006068 <_printf_i>
 8007e5e:	e7ed      	b.n	8007e3c <_svfiprintf_r+0x1c0>
 8007e60:	080089c2 	.word	0x080089c2
 8007e64:	080089cc 	.word	0x080089cc
 8007e68:	08005b39 	.word	0x08005b39
 8007e6c:	08007bc5 	.word	0x08007bc5
 8007e70:	080089c8 	.word	0x080089c8

08007e74 <__sflush_r>:
 8007e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7c:	0716      	lsls	r6, r2, #28
 8007e7e:	4605      	mov	r5, r0
 8007e80:	460c      	mov	r4, r1
 8007e82:	d454      	bmi.n	8007f2e <__sflush_r+0xba>
 8007e84:	684b      	ldr	r3, [r1, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dc02      	bgt.n	8007e90 <__sflush_r+0x1c>
 8007e8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dd48      	ble.n	8007f22 <__sflush_r+0xae>
 8007e90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e92:	2e00      	cmp	r6, #0
 8007e94:	d045      	beq.n	8007f22 <__sflush_r+0xae>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e9c:	682f      	ldr	r7, [r5, #0]
 8007e9e:	6a21      	ldr	r1, [r4, #32]
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	d030      	beq.n	8007f06 <__sflush_r+0x92>
 8007ea4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	0759      	lsls	r1, r3, #29
 8007eaa:	d505      	bpl.n	8007eb8 <__sflush_r+0x44>
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eb2:	b10b      	cbz	r3, 8007eb8 <__sflush_r+0x44>
 8007eb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	2300      	movs	r3, #0
 8007eba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b0      	blx	r6
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	d106      	bne.n	8007ed6 <__sflush_r+0x62>
 8007ec8:	6829      	ldr	r1, [r5, #0]
 8007eca:	291d      	cmp	r1, #29
 8007ecc:	d82b      	bhi.n	8007f26 <__sflush_r+0xb2>
 8007ece:	4a2a      	ldr	r2, [pc, #168]	@ (8007f78 <__sflush_r+0x104>)
 8007ed0:	40ca      	lsrs	r2, r1
 8007ed2:	07d6      	lsls	r6, r2, #31
 8007ed4:	d527      	bpl.n	8007f26 <__sflush_r+0xb2>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	04d9      	lsls	r1, r3, #19
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	d504      	bpl.n	8007eec <__sflush_r+0x78>
 8007ee2:	1c42      	adds	r2, r0, #1
 8007ee4:	d101      	bne.n	8007eea <__sflush_r+0x76>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b903      	cbnz	r3, 8007eec <__sflush_r+0x78>
 8007eea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eee:	602f      	str	r7, [r5, #0]
 8007ef0:	b1b9      	cbz	r1, 8007f22 <__sflush_r+0xae>
 8007ef2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ef6:	4299      	cmp	r1, r3
 8007ef8:	d002      	beq.n	8007f00 <__sflush_r+0x8c>
 8007efa:	4628      	mov	r0, r5
 8007efc:	f7ff f9e8 	bl	80072d0 <_free_r>
 8007f00:	2300      	movs	r3, #0
 8007f02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f04:	e00d      	b.n	8007f22 <__sflush_r+0xae>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	1c50      	adds	r0, r2, #1
 8007f10:	d1c9      	bne.n	8007ea6 <__sflush_r+0x32>
 8007f12:	682b      	ldr	r3, [r5, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0c6      	beq.n	8007ea6 <__sflush_r+0x32>
 8007f18:	2b1d      	cmp	r3, #29
 8007f1a:	d001      	beq.n	8007f20 <__sflush_r+0xac>
 8007f1c:	2b16      	cmp	r3, #22
 8007f1e:	d11e      	bne.n	8007f5e <__sflush_r+0xea>
 8007f20:	602f      	str	r7, [r5, #0]
 8007f22:	2000      	movs	r0, #0
 8007f24:	e022      	b.n	8007f6c <__sflush_r+0xf8>
 8007f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f2a:	b21b      	sxth	r3, r3
 8007f2c:	e01b      	b.n	8007f66 <__sflush_r+0xf2>
 8007f2e:	690f      	ldr	r7, [r1, #16]
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	d0f6      	beq.n	8007f22 <__sflush_r+0xae>
 8007f34:	0793      	lsls	r3, r2, #30
 8007f36:	680e      	ldr	r6, [r1, #0]
 8007f38:	bf08      	it	eq
 8007f3a:	694b      	ldreq	r3, [r1, #20]
 8007f3c:	600f      	str	r7, [r1, #0]
 8007f3e:	bf18      	it	ne
 8007f40:	2300      	movne	r3, #0
 8007f42:	eba6 0807 	sub.w	r8, r6, r7
 8007f46:	608b      	str	r3, [r1, #8]
 8007f48:	f1b8 0f00 	cmp.w	r8, #0
 8007f4c:	dde9      	ble.n	8007f22 <__sflush_r+0xae>
 8007f4e:	6a21      	ldr	r1, [r4, #32]
 8007f50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f52:	4643      	mov	r3, r8
 8007f54:	463a      	mov	r2, r7
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b0      	blx	r6
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	dc08      	bgt.n	8007f70 <__sflush_r+0xfc>
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f70:	4407      	add	r7, r0
 8007f72:	eba8 0800 	sub.w	r8, r8, r0
 8007f76:	e7e7      	b.n	8007f48 <__sflush_r+0xd4>
 8007f78:	20400001 	.word	0x20400001

08007f7c <_fflush_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	690b      	ldr	r3, [r1, #16]
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	b913      	cbnz	r3, 8007f8c <_fflush_r+0x10>
 8007f86:	2500      	movs	r5, #0
 8007f88:	4628      	mov	r0, r5
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	b118      	cbz	r0, 8007f96 <_fflush_r+0x1a>
 8007f8e:	6a03      	ldr	r3, [r0, #32]
 8007f90:	b90b      	cbnz	r3, 8007f96 <_fflush_r+0x1a>
 8007f92:	f7fe fa13 	bl	80063bc <__sinit>
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f3      	beq.n	8007f86 <_fflush_r+0xa>
 8007f9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fa0:	07d0      	lsls	r0, r2, #31
 8007fa2:	d404      	bmi.n	8007fae <_fflush_r+0x32>
 8007fa4:	0599      	lsls	r1, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_fflush_r+0x32>
 8007fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007faa:	f7fe fb34 	bl	8006616 <__retarget_lock_acquire_recursive>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	f7ff ff5f 	bl	8007e74 <__sflush_r>
 8007fb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fb8:	07da      	lsls	r2, r3, #31
 8007fba:	4605      	mov	r5, r0
 8007fbc:	d4e4      	bmi.n	8007f88 <_fflush_r+0xc>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	059b      	lsls	r3, r3, #22
 8007fc2:	d4e1      	bmi.n	8007f88 <_fflush_r+0xc>
 8007fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fc6:	f7fe fb27 	bl	8006618 <__retarget_lock_release_recursive>
 8007fca:	e7dd      	b.n	8007f88 <_fflush_r+0xc>

08007fcc <memmove>:
 8007fcc:	4288      	cmp	r0, r1
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	eb01 0402 	add.w	r4, r1, r2
 8007fd4:	d902      	bls.n	8007fdc <memmove+0x10>
 8007fd6:	4284      	cmp	r4, r0
 8007fd8:	4623      	mov	r3, r4
 8007fda:	d807      	bhi.n	8007fec <memmove+0x20>
 8007fdc:	1e43      	subs	r3, r0, #1
 8007fde:	42a1      	cmp	r1, r4
 8007fe0:	d008      	beq.n	8007ff4 <memmove+0x28>
 8007fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fea:	e7f8      	b.n	8007fde <memmove+0x12>
 8007fec:	4402      	add	r2, r0
 8007fee:	4601      	mov	r1, r0
 8007ff0:	428a      	cmp	r2, r1
 8007ff2:	d100      	bne.n	8007ff6 <memmove+0x2a>
 8007ff4:	bd10      	pop	{r4, pc}
 8007ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ffe:	e7f7      	b.n	8007ff0 <memmove+0x24>

08008000 <_sbrk_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4d06      	ldr	r5, [pc, #24]	@ (800801c <_sbrk_r+0x1c>)
 8008004:	2300      	movs	r3, #0
 8008006:	4604      	mov	r4, r0
 8008008:	4608      	mov	r0, r1
 800800a:	602b      	str	r3, [r5, #0]
 800800c:	f7f9 fec8 	bl	8001da0 <_sbrk>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_sbrk_r+0x1a>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_sbrk_r+0x1a>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000544 	.word	0x20000544

08008020 <memcpy>:
 8008020:	440a      	add	r2, r1
 8008022:	4291      	cmp	r1, r2
 8008024:	f100 33ff 	add.w	r3, r0, #4294967295
 8008028:	d100      	bne.n	800802c <memcpy+0xc>
 800802a:	4770      	bx	lr
 800802c:	b510      	push	{r4, lr}
 800802e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008036:	4291      	cmp	r1, r2
 8008038:	d1f9      	bne.n	800802e <memcpy+0xe>
 800803a:	bd10      	pop	{r4, pc}

0800803c <__assert_func>:
 800803c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800803e:	4614      	mov	r4, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <__assert_func+0x2c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4605      	mov	r5, r0
 8008048:	68d8      	ldr	r0, [r3, #12]
 800804a:	b14c      	cbz	r4, 8008060 <__assert_func+0x24>
 800804c:	4b07      	ldr	r3, [pc, #28]	@ (800806c <__assert_func+0x30>)
 800804e:	9100      	str	r1, [sp, #0]
 8008050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008054:	4906      	ldr	r1, [pc, #24]	@ (8008070 <__assert_func+0x34>)
 8008056:	462b      	mov	r3, r5
 8008058:	f000 f870 	bl	800813c <fiprintf>
 800805c:	f000 f880 	bl	8008160 <abort>
 8008060:	4b04      	ldr	r3, [pc, #16]	@ (8008074 <__assert_func+0x38>)
 8008062:	461c      	mov	r4, r3
 8008064:	e7f3      	b.n	800804e <__assert_func+0x12>
 8008066:	bf00      	nop
 8008068:	20000028 	.word	0x20000028
 800806c:	080089dd 	.word	0x080089dd
 8008070:	080089ea 	.word	0x080089ea
 8008074:	08008a18 	.word	0x08008a18

08008078 <_calloc_r>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	fba1 5402 	umull	r5, r4, r1, r2
 800807e:	b934      	cbnz	r4, 800808e <_calloc_r+0x16>
 8008080:	4629      	mov	r1, r5
 8008082:	f7ff f999 	bl	80073b8 <_malloc_r>
 8008086:	4606      	mov	r6, r0
 8008088:	b928      	cbnz	r0, 8008096 <_calloc_r+0x1e>
 800808a:	4630      	mov	r0, r6
 800808c:	bd70      	pop	{r4, r5, r6, pc}
 800808e:	220c      	movs	r2, #12
 8008090:	6002      	str	r2, [r0, #0]
 8008092:	2600      	movs	r6, #0
 8008094:	e7f9      	b.n	800808a <_calloc_r+0x12>
 8008096:	462a      	mov	r2, r5
 8008098:	4621      	mov	r1, r4
 800809a:	f7fe fa3e 	bl	800651a <memset>
 800809e:	e7f4      	b.n	800808a <_calloc_r+0x12>

080080a0 <__ascii_mbtowc>:
 80080a0:	b082      	sub	sp, #8
 80080a2:	b901      	cbnz	r1, 80080a6 <__ascii_mbtowc+0x6>
 80080a4:	a901      	add	r1, sp, #4
 80080a6:	b142      	cbz	r2, 80080ba <__ascii_mbtowc+0x1a>
 80080a8:	b14b      	cbz	r3, 80080be <__ascii_mbtowc+0x1e>
 80080aa:	7813      	ldrb	r3, [r2, #0]
 80080ac:	600b      	str	r3, [r1, #0]
 80080ae:	7812      	ldrb	r2, [r2, #0]
 80080b0:	1e10      	subs	r0, r2, #0
 80080b2:	bf18      	it	ne
 80080b4:	2001      	movne	r0, #1
 80080b6:	b002      	add	sp, #8
 80080b8:	4770      	bx	lr
 80080ba:	4610      	mov	r0, r2
 80080bc:	e7fb      	b.n	80080b6 <__ascii_mbtowc+0x16>
 80080be:	f06f 0001 	mvn.w	r0, #1
 80080c2:	e7f8      	b.n	80080b6 <__ascii_mbtowc+0x16>

080080c4 <_realloc_r>:
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	4607      	mov	r7, r0
 80080ca:	4614      	mov	r4, r2
 80080cc:	460d      	mov	r5, r1
 80080ce:	b921      	cbnz	r1, 80080da <_realloc_r+0x16>
 80080d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d4:	4611      	mov	r1, r2
 80080d6:	f7ff b96f 	b.w	80073b8 <_malloc_r>
 80080da:	b92a      	cbnz	r2, 80080e8 <_realloc_r+0x24>
 80080dc:	f7ff f8f8 	bl	80072d0 <_free_r>
 80080e0:	4625      	mov	r5, r4
 80080e2:	4628      	mov	r0, r5
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	f000 f841 	bl	800816e <_malloc_usable_size_r>
 80080ec:	4284      	cmp	r4, r0
 80080ee:	4606      	mov	r6, r0
 80080f0:	d802      	bhi.n	80080f8 <_realloc_r+0x34>
 80080f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080f6:	d8f4      	bhi.n	80080e2 <_realloc_r+0x1e>
 80080f8:	4621      	mov	r1, r4
 80080fa:	4638      	mov	r0, r7
 80080fc:	f7ff f95c 	bl	80073b8 <_malloc_r>
 8008100:	4680      	mov	r8, r0
 8008102:	b908      	cbnz	r0, 8008108 <_realloc_r+0x44>
 8008104:	4645      	mov	r5, r8
 8008106:	e7ec      	b.n	80080e2 <_realloc_r+0x1e>
 8008108:	42b4      	cmp	r4, r6
 800810a:	4622      	mov	r2, r4
 800810c:	4629      	mov	r1, r5
 800810e:	bf28      	it	cs
 8008110:	4632      	movcs	r2, r6
 8008112:	f7ff ff85 	bl	8008020 <memcpy>
 8008116:	4629      	mov	r1, r5
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff f8d9 	bl	80072d0 <_free_r>
 800811e:	e7f1      	b.n	8008104 <_realloc_r+0x40>

08008120 <__ascii_wctomb>:
 8008120:	4603      	mov	r3, r0
 8008122:	4608      	mov	r0, r1
 8008124:	b141      	cbz	r1, 8008138 <__ascii_wctomb+0x18>
 8008126:	2aff      	cmp	r2, #255	@ 0xff
 8008128:	d904      	bls.n	8008134 <__ascii_wctomb+0x14>
 800812a:	228a      	movs	r2, #138	@ 0x8a
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f04f 30ff 	mov.w	r0, #4294967295
 8008132:	4770      	bx	lr
 8008134:	700a      	strb	r2, [r1, #0]
 8008136:	2001      	movs	r0, #1
 8008138:	4770      	bx	lr
	...

0800813c <fiprintf>:
 800813c:	b40e      	push	{r1, r2, r3}
 800813e:	b503      	push	{r0, r1, lr}
 8008140:	4601      	mov	r1, r0
 8008142:	ab03      	add	r3, sp, #12
 8008144:	4805      	ldr	r0, [pc, #20]	@ (800815c <fiprintf+0x20>)
 8008146:	f853 2b04 	ldr.w	r2, [r3], #4
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f000 f83f 	bl	80081d0 <_vfiprintf_r>
 8008152:	b002      	add	sp, #8
 8008154:	f85d eb04 	ldr.w	lr, [sp], #4
 8008158:	b003      	add	sp, #12
 800815a:	4770      	bx	lr
 800815c:	20000028 	.word	0x20000028

08008160 <abort>:
 8008160:	b508      	push	{r3, lr}
 8008162:	2006      	movs	r0, #6
 8008164:	f000 fa08 	bl	8008578 <raise>
 8008168:	2001      	movs	r0, #1
 800816a:	f7f9 fda1 	bl	8001cb0 <_exit>

0800816e <_malloc_usable_size_r>:
 800816e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008172:	1f18      	subs	r0, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	bfbc      	itt	lt
 8008178:	580b      	ldrlt	r3, [r1, r0]
 800817a:	18c0      	addlt	r0, r0, r3
 800817c:	4770      	bx	lr

0800817e <__sfputc_r>:
 800817e:	6893      	ldr	r3, [r2, #8]
 8008180:	3b01      	subs	r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	b410      	push	{r4}
 8008186:	6093      	str	r3, [r2, #8]
 8008188:	da08      	bge.n	800819c <__sfputc_r+0x1e>
 800818a:	6994      	ldr	r4, [r2, #24]
 800818c:	42a3      	cmp	r3, r4
 800818e:	db01      	blt.n	8008194 <__sfputc_r+0x16>
 8008190:	290a      	cmp	r1, #10
 8008192:	d103      	bne.n	800819c <__sfputc_r+0x1e>
 8008194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008198:	f000 b932 	b.w	8008400 <__swbuf_r>
 800819c:	6813      	ldr	r3, [r2, #0]
 800819e:	1c58      	adds	r0, r3, #1
 80081a0:	6010      	str	r0, [r2, #0]
 80081a2:	7019      	strb	r1, [r3, #0]
 80081a4:	4608      	mov	r0, r1
 80081a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <__sfputs_r>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	4614      	mov	r4, r2
 80081b4:	18d5      	adds	r5, r2, r3
 80081b6:	42ac      	cmp	r4, r5
 80081b8:	d101      	bne.n	80081be <__sfputs_r+0x12>
 80081ba:	2000      	movs	r0, #0
 80081bc:	e007      	b.n	80081ce <__sfputs_r+0x22>
 80081be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c2:	463a      	mov	r2, r7
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff ffda 	bl	800817e <__sfputc_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d1f3      	bne.n	80081b6 <__sfputs_r+0xa>
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081d0 <_vfiprintf_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	460d      	mov	r5, r1
 80081d6:	b09d      	sub	sp, #116	@ 0x74
 80081d8:	4614      	mov	r4, r2
 80081da:	4698      	mov	r8, r3
 80081dc:	4606      	mov	r6, r0
 80081de:	b118      	cbz	r0, 80081e8 <_vfiprintf_r+0x18>
 80081e0:	6a03      	ldr	r3, [r0, #32]
 80081e2:	b90b      	cbnz	r3, 80081e8 <_vfiprintf_r+0x18>
 80081e4:	f7fe f8ea 	bl	80063bc <__sinit>
 80081e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ea:	07d9      	lsls	r1, r3, #31
 80081ec:	d405      	bmi.n	80081fa <_vfiprintf_r+0x2a>
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	059a      	lsls	r2, r3, #22
 80081f2:	d402      	bmi.n	80081fa <_vfiprintf_r+0x2a>
 80081f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081f6:	f7fe fa0e 	bl	8006616 <__retarget_lock_acquire_recursive>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	071b      	lsls	r3, r3, #28
 80081fe:	d501      	bpl.n	8008204 <_vfiprintf_r+0x34>
 8008200:	692b      	ldr	r3, [r5, #16]
 8008202:	b99b      	cbnz	r3, 800822c <_vfiprintf_r+0x5c>
 8008204:	4629      	mov	r1, r5
 8008206:	4630      	mov	r0, r6
 8008208:	f000 f938 	bl	800847c <__swsetup_r>
 800820c:	b170      	cbz	r0, 800822c <_vfiprintf_r+0x5c>
 800820e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008210:	07dc      	lsls	r4, r3, #31
 8008212:	d504      	bpl.n	800821e <_vfiprintf_r+0x4e>
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	b01d      	add	sp, #116	@ 0x74
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	0598      	lsls	r0, r3, #22
 8008222:	d4f7      	bmi.n	8008214 <_vfiprintf_r+0x44>
 8008224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008226:	f7fe f9f7 	bl	8006618 <__retarget_lock_release_recursive>
 800822a:	e7f3      	b.n	8008214 <_vfiprintf_r+0x44>
 800822c:	2300      	movs	r3, #0
 800822e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008230:	2320      	movs	r3, #32
 8008232:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008236:	f8cd 800c 	str.w	r8, [sp, #12]
 800823a:	2330      	movs	r3, #48	@ 0x30
 800823c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083ec <_vfiprintf_r+0x21c>
 8008240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008244:	f04f 0901 	mov.w	r9, #1
 8008248:	4623      	mov	r3, r4
 800824a:	469a      	mov	sl, r3
 800824c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008250:	b10a      	cbz	r2, 8008256 <_vfiprintf_r+0x86>
 8008252:	2a25      	cmp	r2, #37	@ 0x25
 8008254:	d1f9      	bne.n	800824a <_vfiprintf_r+0x7a>
 8008256:	ebba 0b04 	subs.w	fp, sl, r4
 800825a:	d00b      	beq.n	8008274 <_vfiprintf_r+0xa4>
 800825c:	465b      	mov	r3, fp
 800825e:	4622      	mov	r2, r4
 8008260:	4629      	mov	r1, r5
 8008262:	4630      	mov	r0, r6
 8008264:	f7ff ffa2 	bl	80081ac <__sfputs_r>
 8008268:	3001      	adds	r0, #1
 800826a:	f000 80a7 	beq.w	80083bc <_vfiprintf_r+0x1ec>
 800826e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008270:	445a      	add	r2, fp
 8008272:	9209      	str	r2, [sp, #36]	@ 0x24
 8008274:	f89a 3000 	ldrb.w	r3, [sl]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 809f 	beq.w	80083bc <_vfiprintf_r+0x1ec>
 800827e:	2300      	movs	r3, #0
 8008280:	f04f 32ff 	mov.w	r2, #4294967295
 8008284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008288:	f10a 0a01 	add.w	sl, sl, #1
 800828c:	9304      	str	r3, [sp, #16]
 800828e:	9307      	str	r3, [sp, #28]
 8008290:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008294:	931a      	str	r3, [sp, #104]	@ 0x68
 8008296:	4654      	mov	r4, sl
 8008298:	2205      	movs	r2, #5
 800829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829e:	4853      	ldr	r0, [pc, #332]	@ (80083ec <_vfiprintf_r+0x21c>)
 80082a0:	f7f7 ff96 	bl	80001d0 <memchr>
 80082a4:	9a04      	ldr	r2, [sp, #16]
 80082a6:	b9d8      	cbnz	r0, 80082e0 <_vfiprintf_r+0x110>
 80082a8:	06d1      	lsls	r1, r2, #27
 80082aa:	bf44      	itt	mi
 80082ac:	2320      	movmi	r3, #32
 80082ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082b2:	0713      	lsls	r3, r2, #28
 80082b4:	bf44      	itt	mi
 80082b6:	232b      	movmi	r3, #43	@ 0x2b
 80082b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082bc:	f89a 3000 	ldrb.w	r3, [sl]
 80082c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c2:	d015      	beq.n	80082f0 <_vfiprintf_r+0x120>
 80082c4:	9a07      	ldr	r2, [sp, #28]
 80082c6:	4654      	mov	r4, sl
 80082c8:	2000      	movs	r0, #0
 80082ca:	f04f 0c0a 	mov.w	ip, #10
 80082ce:	4621      	mov	r1, r4
 80082d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d4:	3b30      	subs	r3, #48	@ 0x30
 80082d6:	2b09      	cmp	r3, #9
 80082d8:	d94b      	bls.n	8008372 <_vfiprintf_r+0x1a2>
 80082da:	b1b0      	cbz	r0, 800830a <_vfiprintf_r+0x13a>
 80082dc:	9207      	str	r2, [sp, #28]
 80082de:	e014      	b.n	800830a <_vfiprintf_r+0x13a>
 80082e0:	eba0 0308 	sub.w	r3, r0, r8
 80082e4:	fa09 f303 	lsl.w	r3, r9, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	46a2      	mov	sl, r4
 80082ee:	e7d2      	b.n	8008296 <_vfiprintf_r+0xc6>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	1d19      	adds	r1, r3, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	9103      	str	r1, [sp, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfbb      	ittet	lt
 80082fc:	425b      	neglt	r3, r3
 80082fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008302:	9307      	strge	r3, [sp, #28]
 8008304:	9307      	strlt	r3, [sp, #28]
 8008306:	bfb8      	it	lt
 8008308:	9204      	strlt	r2, [sp, #16]
 800830a:	7823      	ldrb	r3, [r4, #0]
 800830c:	2b2e      	cmp	r3, #46	@ 0x2e
 800830e:	d10a      	bne.n	8008326 <_vfiprintf_r+0x156>
 8008310:	7863      	ldrb	r3, [r4, #1]
 8008312:	2b2a      	cmp	r3, #42	@ 0x2a
 8008314:	d132      	bne.n	800837c <_vfiprintf_r+0x1ac>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	1d1a      	adds	r2, r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	9203      	str	r2, [sp, #12]
 800831e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008322:	3402      	adds	r4, #2
 8008324:	9305      	str	r3, [sp, #20]
 8008326:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083fc <_vfiprintf_r+0x22c>
 800832a:	7821      	ldrb	r1, [r4, #0]
 800832c:	2203      	movs	r2, #3
 800832e:	4650      	mov	r0, sl
 8008330:	f7f7 ff4e 	bl	80001d0 <memchr>
 8008334:	b138      	cbz	r0, 8008346 <_vfiprintf_r+0x176>
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	eba0 000a 	sub.w	r0, r0, sl
 800833c:	2240      	movs	r2, #64	@ 0x40
 800833e:	4082      	lsls	r2, r0
 8008340:	4313      	orrs	r3, r2
 8008342:	3401      	adds	r4, #1
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834a:	4829      	ldr	r0, [pc, #164]	@ (80083f0 <_vfiprintf_r+0x220>)
 800834c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008350:	2206      	movs	r2, #6
 8008352:	f7f7 ff3d 	bl	80001d0 <memchr>
 8008356:	2800      	cmp	r0, #0
 8008358:	d03f      	beq.n	80083da <_vfiprintf_r+0x20a>
 800835a:	4b26      	ldr	r3, [pc, #152]	@ (80083f4 <_vfiprintf_r+0x224>)
 800835c:	bb1b      	cbnz	r3, 80083a6 <_vfiprintf_r+0x1d6>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	3307      	adds	r3, #7
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	3308      	adds	r3, #8
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836c:	443b      	add	r3, r7
 800836e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008370:	e76a      	b.n	8008248 <_vfiprintf_r+0x78>
 8008372:	fb0c 3202 	mla	r2, ip, r2, r3
 8008376:	460c      	mov	r4, r1
 8008378:	2001      	movs	r0, #1
 800837a:	e7a8      	b.n	80082ce <_vfiprintf_r+0xfe>
 800837c:	2300      	movs	r3, #0
 800837e:	3401      	adds	r4, #1
 8008380:	9305      	str	r3, [sp, #20]
 8008382:	4619      	mov	r1, r3
 8008384:	f04f 0c0a 	mov.w	ip, #10
 8008388:	4620      	mov	r0, r4
 800838a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800838e:	3a30      	subs	r2, #48	@ 0x30
 8008390:	2a09      	cmp	r2, #9
 8008392:	d903      	bls.n	800839c <_vfiprintf_r+0x1cc>
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0c6      	beq.n	8008326 <_vfiprintf_r+0x156>
 8008398:	9105      	str	r1, [sp, #20]
 800839a:	e7c4      	b.n	8008326 <_vfiprintf_r+0x156>
 800839c:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a0:	4604      	mov	r4, r0
 80083a2:	2301      	movs	r3, #1
 80083a4:	e7f0      	b.n	8008388 <_vfiprintf_r+0x1b8>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4b12      	ldr	r3, [pc, #72]	@ (80083f8 <_vfiprintf_r+0x228>)
 80083ae:	a904      	add	r1, sp, #16
 80083b0:	4630      	mov	r0, r6
 80083b2:	f7fd fbc1 	bl	8005b38 <_printf_float>
 80083b6:	4607      	mov	r7, r0
 80083b8:	1c78      	adds	r0, r7, #1
 80083ba:	d1d6      	bne.n	800836a <_vfiprintf_r+0x19a>
 80083bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083be:	07d9      	lsls	r1, r3, #31
 80083c0:	d405      	bmi.n	80083ce <_vfiprintf_r+0x1fe>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	059a      	lsls	r2, r3, #22
 80083c6:	d402      	bmi.n	80083ce <_vfiprintf_r+0x1fe>
 80083c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ca:	f7fe f925 	bl	8006618 <__retarget_lock_release_recursive>
 80083ce:	89ab      	ldrh	r3, [r5, #12]
 80083d0:	065b      	lsls	r3, r3, #25
 80083d2:	f53f af1f 	bmi.w	8008214 <_vfiprintf_r+0x44>
 80083d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083d8:	e71e      	b.n	8008218 <_vfiprintf_r+0x48>
 80083da:	ab03      	add	r3, sp, #12
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	462a      	mov	r2, r5
 80083e0:	4b05      	ldr	r3, [pc, #20]	@ (80083f8 <_vfiprintf_r+0x228>)
 80083e2:	a904      	add	r1, sp, #16
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7fd fe3f 	bl	8006068 <_printf_i>
 80083ea:	e7e4      	b.n	80083b6 <_vfiprintf_r+0x1e6>
 80083ec:	080089c2 	.word	0x080089c2
 80083f0:	080089cc 	.word	0x080089cc
 80083f4:	08005b39 	.word	0x08005b39
 80083f8:	080081ad 	.word	0x080081ad
 80083fc:	080089c8 	.word	0x080089c8

08008400 <__swbuf_r>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	460e      	mov	r6, r1
 8008404:	4614      	mov	r4, r2
 8008406:	4605      	mov	r5, r0
 8008408:	b118      	cbz	r0, 8008412 <__swbuf_r+0x12>
 800840a:	6a03      	ldr	r3, [r0, #32]
 800840c:	b90b      	cbnz	r3, 8008412 <__swbuf_r+0x12>
 800840e:	f7fd ffd5 	bl	80063bc <__sinit>
 8008412:	69a3      	ldr	r3, [r4, #24]
 8008414:	60a3      	str	r3, [r4, #8]
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	071a      	lsls	r2, r3, #28
 800841a:	d501      	bpl.n	8008420 <__swbuf_r+0x20>
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	b943      	cbnz	r3, 8008432 <__swbuf_r+0x32>
 8008420:	4621      	mov	r1, r4
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f82a 	bl	800847c <__swsetup_r>
 8008428:	b118      	cbz	r0, 8008432 <__swbuf_r+0x32>
 800842a:	f04f 37ff 	mov.w	r7, #4294967295
 800842e:	4638      	mov	r0, r7
 8008430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	6922      	ldr	r2, [r4, #16]
 8008436:	1a98      	subs	r0, r3, r2
 8008438:	6963      	ldr	r3, [r4, #20]
 800843a:	b2f6      	uxtb	r6, r6
 800843c:	4283      	cmp	r3, r0
 800843e:	4637      	mov	r7, r6
 8008440:	dc05      	bgt.n	800844e <__swbuf_r+0x4e>
 8008442:	4621      	mov	r1, r4
 8008444:	4628      	mov	r0, r5
 8008446:	f7ff fd99 	bl	8007f7c <_fflush_r>
 800844a:	2800      	cmp	r0, #0
 800844c:	d1ed      	bne.n	800842a <__swbuf_r+0x2a>
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	3b01      	subs	r3, #1
 8008452:	60a3      	str	r3, [r4, #8]
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	6022      	str	r2, [r4, #0]
 800845a:	701e      	strb	r6, [r3, #0]
 800845c:	6962      	ldr	r2, [r4, #20]
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	429a      	cmp	r2, r3
 8008462:	d004      	beq.n	800846e <__swbuf_r+0x6e>
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	07db      	lsls	r3, r3, #31
 8008468:	d5e1      	bpl.n	800842e <__swbuf_r+0x2e>
 800846a:	2e0a      	cmp	r6, #10
 800846c:	d1df      	bne.n	800842e <__swbuf_r+0x2e>
 800846e:	4621      	mov	r1, r4
 8008470:	4628      	mov	r0, r5
 8008472:	f7ff fd83 	bl	8007f7c <_fflush_r>
 8008476:	2800      	cmp	r0, #0
 8008478:	d0d9      	beq.n	800842e <__swbuf_r+0x2e>
 800847a:	e7d6      	b.n	800842a <__swbuf_r+0x2a>

0800847c <__swsetup_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4b29      	ldr	r3, [pc, #164]	@ (8008524 <__swsetup_r+0xa8>)
 8008480:	4605      	mov	r5, r0
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	460c      	mov	r4, r1
 8008486:	b118      	cbz	r0, 8008490 <__swsetup_r+0x14>
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b90b      	cbnz	r3, 8008490 <__swsetup_r+0x14>
 800848c:	f7fd ff96 	bl	80063bc <__sinit>
 8008490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008494:	0719      	lsls	r1, r3, #28
 8008496:	d422      	bmi.n	80084de <__swsetup_r+0x62>
 8008498:	06da      	lsls	r2, r3, #27
 800849a:	d407      	bmi.n	80084ac <__swsetup_r+0x30>
 800849c:	2209      	movs	r2, #9
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295
 80084aa:	e033      	b.n	8008514 <__swsetup_r+0x98>
 80084ac:	0758      	lsls	r0, r3, #29
 80084ae:	d512      	bpl.n	80084d6 <__swsetup_r+0x5a>
 80084b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b2:	b141      	cbz	r1, 80084c6 <__swsetup_r+0x4a>
 80084b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d002      	beq.n	80084c2 <__swsetup_r+0x46>
 80084bc:	4628      	mov	r0, r5
 80084be:	f7fe ff07 	bl	80072d0 <_free_r>
 80084c2:	2300      	movs	r3, #0
 80084c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	2300      	movs	r3, #0
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	b94b      	cbnz	r3, 80084f6 <__swsetup_r+0x7a>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ec:	d003      	beq.n	80084f6 <__swsetup_r+0x7a>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 f883 	bl	80085fc <__smakebuf_r>
 80084f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fa:	f013 0201 	ands.w	r2, r3, #1
 80084fe:	d00a      	beq.n	8008516 <__swsetup_r+0x9a>
 8008500:	2200      	movs	r2, #0
 8008502:	60a2      	str	r2, [r4, #8]
 8008504:	6962      	ldr	r2, [r4, #20]
 8008506:	4252      	negs	r2, r2
 8008508:	61a2      	str	r2, [r4, #24]
 800850a:	6922      	ldr	r2, [r4, #16]
 800850c:	b942      	cbnz	r2, 8008520 <__swsetup_r+0xa4>
 800850e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008512:	d1c5      	bne.n	80084a0 <__swsetup_r+0x24>
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	0799      	lsls	r1, r3, #30
 8008518:	bf58      	it	pl
 800851a:	6962      	ldrpl	r2, [r4, #20]
 800851c:	60a2      	str	r2, [r4, #8]
 800851e:	e7f4      	b.n	800850a <__swsetup_r+0x8e>
 8008520:	2000      	movs	r0, #0
 8008522:	e7f7      	b.n	8008514 <__swsetup_r+0x98>
 8008524:	20000028 	.word	0x20000028

08008528 <_raise_r>:
 8008528:	291f      	cmp	r1, #31
 800852a:	b538      	push	{r3, r4, r5, lr}
 800852c:	4605      	mov	r5, r0
 800852e:	460c      	mov	r4, r1
 8008530:	d904      	bls.n	800853c <_raise_r+0x14>
 8008532:	2316      	movs	r3, #22
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	f04f 30ff 	mov.w	r0, #4294967295
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800853e:	b112      	cbz	r2, 8008546 <_raise_r+0x1e>
 8008540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008544:	b94b      	cbnz	r3, 800855a <_raise_r+0x32>
 8008546:	4628      	mov	r0, r5
 8008548:	f000 f830 	bl	80085ac <_getpid_r>
 800854c:	4622      	mov	r2, r4
 800854e:	4601      	mov	r1, r0
 8008550:	4628      	mov	r0, r5
 8008552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008556:	f000 b817 	b.w	8008588 <_kill_r>
 800855a:	2b01      	cmp	r3, #1
 800855c:	d00a      	beq.n	8008574 <_raise_r+0x4c>
 800855e:	1c59      	adds	r1, r3, #1
 8008560:	d103      	bne.n	800856a <_raise_r+0x42>
 8008562:	2316      	movs	r3, #22
 8008564:	6003      	str	r3, [r0, #0]
 8008566:	2001      	movs	r0, #1
 8008568:	e7e7      	b.n	800853a <_raise_r+0x12>
 800856a:	2100      	movs	r1, #0
 800856c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008570:	4620      	mov	r0, r4
 8008572:	4798      	blx	r3
 8008574:	2000      	movs	r0, #0
 8008576:	e7e0      	b.n	800853a <_raise_r+0x12>

08008578 <raise>:
 8008578:	4b02      	ldr	r3, [pc, #8]	@ (8008584 <raise+0xc>)
 800857a:	4601      	mov	r1, r0
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	f7ff bfd3 	b.w	8008528 <_raise_r>
 8008582:	bf00      	nop
 8008584:	20000028 	.word	0x20000028

08008588 <_kill_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4d07      	ldr	r5, [pc, #28]	@ (80085a8 <_kill_r+0x20>)
 800858c:	2300      	movs	r3, #0
 800858e:	4604      	mov	r4, r0
 8008590:	4608      	mov	r0, r1
 8008592:	4611      	mov	r1, r2
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	f7f9 fb7b 	bl	8001c90 <_kill>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d102      	bne.n	80085a4 <_kill_r+0x1c>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	b103      	cbz	r3, 80085a4 <_kill_r+0x1c>
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
 80085a6:	bf00      	nop
 80085a8:	20000544 	.word	0x20000544

080085ac <_getpid_r>:
 80085ac:	f7f9 bb68 	b.w	8001c80 <_getpid>

080085b0 <__swhatbuf_r>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	460c      	mov	r4, r1
 80085b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b8:	2900      	cmp	r1, #0
 80085ba:	b096      	sub	sp, #88	@ 0x58
 80085bc:	4615      	mov	r5, r2
 80085be:	461e      	mov	r6, r3
 80085c0:	da0d      	bge.n	80085de <__swhatbuf_r+0x2e>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085c8:	f04f 0100 	mov.w	r1, #0
 80085cc:	bf14      	ite	ne
 80085ce:	2340      	movne	r3, #64	@ 0x40
 80085d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085d4:	2000      	movs	r0, #0
 80085d6:	6031      	str	r1, [r6, #0]
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	b016      	add	sp, #88	@ 0x58
 80085dc:	bd70      	pop	{r4, r5, r6, pc}
 80085de:	466a      	mov	r2, sp
 80085e0:	f000 f848 	bl	8008674 <_fstat_r>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	dbec      	blt.n	80085c2 <__swhatbuf_r+0x12>
 80085e8:	9901      	ldr	r1, [sp, #4]
 80085ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085f2:	4259      	negs	r1, r3
 80085f4:	4159      	adcs	r1, r3
 80085f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085fa:	e7eb      	b.n	80085d4 <__swhatbuf_r+0x24>

080085fc <__smakebuf_r>:
 80085fc:	898b      	ldrh	r3, [r1, #12]
 80085fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008600:	079d      	lsls	r5, r3, #30
 8008602:	4606      	mov	r6, r0
 8008604:	460c      	mov	r4, r1
 8008606:	d507      	bpl.n	8008618 <__smakebuf_r+0x1c>
 8008608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	2301      	movs	r3, #1
 8008612:	6163      	str	r3, [r4, #20]
 8008614:	b003      	add	sp, #12
 8008616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008618:	ab01      	add	r3, sp, #4
 800861a:	466a      	mov	r2, sp
 800861c:	f7ff ffc8 	bl	80085b0 <__swhatbuf_r>
 8008620:	9f00      	ldr	r7, [sp, #0]
 8008622:	4605      	mov	r5, r0
 8008624:	4639      	mov	r1, r7
 8008626:	4630      	mov	r0, r6
 8008628:	f7fe fec6 	bl	80073b8 <_malloc_r>
 800862c:	b948      	cbnz	r0, 8008642 <__smakebuf_r+0x46>
 800862e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008632:	059a      	lsls	r2, r3, #22
 8008634:	d4ee      	bmi.n	8008614 <__smakebuf_r+0x18>
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	f043 0302 	orr.w	r3, r3, #2
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	e7e2      	b.n	8008608 <__smakebuf_r+0xc>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	6020      	str	r0, [r4, #0]
 8008646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008652:	b15b      	cbz	r3, 800866c <__smakebuf_r+0x70>
 8008654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f81d 	bl	8008698 <_isatty_r>
 800865e:	b128      	cbz	r0, 800866c <__smakebuf_r+0x70>
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	f043 0301 	orr.w	r3, r3, #1
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	431d      	orrs	r5, r3
 8008670:	81a5      	strh	r5, [r4, #12]
 8008672:	e7cf      	b.n	8008614 <__smakebuf_r+0x18>

08008674 <_fstat_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d07      	ldr	r5, [pc, #28]	@ (8008694 <_fstat_r+0x20>)
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	f7f9 fb65 	bl	8001d50 <_fstat>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d102      	bne.n	8008690 <_fstat_r+0x1c>
 800868a:	682b      	ldr	r3, [r5, #0]
 800868c:	b103      	cbz	r3, 8008690 <_fstat_r+0x1c>
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	bd38      	pop	{r3, r4, r5, pc}
 8008692:	bf00      	nop
 8008694:	20000544 	.word	0x20000544

08008698 <_isatty_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d06      	ldr	r5, [pc, #24]	@ (80086b4 <_isatty_r+0x1c>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	f7f9 fb64 	bl	8001d70 <_isatty>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_isatty_r+0x1a>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_isatty_r+0x1a>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	20000544 	.word	0x20000544

080086b8 <_init>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr

080086c4 <_fini>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	bf00      	nop
 80086c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ca:	bc08      	pop	{r3}
 80086cc:	469e      	mov	lr, r3
 80086ce:	4770      	bx	lr
